import unrealsdk
from unrealsdk import *
from ..ModManager import BL2MOD, EnabledSaveType, RegisterMod
from ..OptionManager import Options
from typing import Dict
from Mods.UserFeedback import ShowHUDMessage
from ..ModMenu import Keybind, Game, Mods, SaveModSettings
import random
import datetime
import webbrowser
import sys
import os

class DropRateMod(BL2MOD):
    Name = "WBL2Fix"
    Description = "Flare2V - Design / alienoliver - Code\nPuts the Gameplay in the Videogame\n\nOptions -> Mod Options to configure\nOptions -> Keyboard/Mouse -> Modded Keybindings for binds\n\nCredits to apple for PythonSDK, NoAds and essential programming support, Abahbob for PythonSDK and PauseInAir, UCP team for the UCP, c0dycode for the hex multitool, FromDarkHell for cutscene skip, our beta testers and thank you, for playing! Have fun!"
    Types = ModTypes.Gameplay
    Author = "Flare2V, alienoliver"
    Version = "BL2Fix v1.10"
    SupportedGames = Game.BL2
    
    SaveEnabledState = EnabledSaveType.LoadOnMainMenu

    SettingsInputs: Dict[str, str] = {
        "Enter": "Enable",
        "R": "Readme",
        "D": "Discord"
    }
    
    checkForModConflicts = True
    checkForUCP = False
    modConflictText = "BL2Fix is incompatible with other overhaul mods. Please disable them and restart your game!"
    conflictingModNames = [
        "BL2: Exodus",
        "Big Tiddy Bar Wenches"
    ]
    
    demandedRestart = False
    
    def SettingsInputPressed(self, action: str) -> None:
        if action == "Enable":
            for mod in Mods:
                if mod.Name in self.conflictingModNames and mod.IsEnabled == True and self.checkForModConflicts == True:
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"say {self.modConflictText}")
                    super().SettingsInputPressed("Disable")
                    return
            if unrealsdk.FindObject("SkillDefinition", "GD_Weap_AssaultRifle.Skills.Skill_EvilSmasher_SMASH").TrackedSkillHUDSlot == 10 and self.checkForUCP == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"say {self.modConflictText}")
                super().SettingsInputPressed("Disable")
                return
                
        if action == "Discord":
            webbrowser.open("https://discord.gg/8NYzdBEUhP")
        elif action == "Readme":
            os.startfile(os.path.join(os.path.dirname(sys.executable), "Mods\BL2Fix\\readme.txt"))
        else:
            if action == "Disable" and self.demandedRestart == False:
                PC = GetEngine().GamePlayers[0].Actor
                popupOnDisable = [
                    "Please Restart Borderlands 2",
                    "BL2Fix will not be disabled until you restart your game.",
                    0
                ]
                PC.GFxUIManager.ShowTrainingDialog(popupOnDisable[1], popupOnDisable[0], popupOnDisable[2])
                self.demandedRestart = True
            super().SettingsInputPressed(action)

    def __init__(self) -> None:
        
        self.hasBeenEnabled = False
        random.seed(datetime.datetime.now())
        self.HUDHookRuns = 0
        
        self.travelDelayOption = Options.Slider("Multiplayer travel delay", "The number of seconds you wait before travelling to a new area. Host controlled.", 2, 0, 10, 1) #The first number after the description is the starting value.
        self.crouchSkipOption = Options.Boolean("Gamepad Dialog Skip", "When enabled, crouching with a gamepad will skip the current dialog", True)
        self.cutsceneDisablerOption = Options.Spinner("Cutscenes", "Controls which cutscenes will play. Combat only disables all cutscenes not relevant to gameplay. All means all cutscenes will play, None means none will play.", "Combat Only", ["Combat Only", "None", "All"])
        self.audioFixOption = Options.Boolean("Fix Audio", "Quiets unusually loud areas (Bloodshot Stronghold, Bunker, etc.)", True)
        self.adOption = Options.Spinner("Menu Ads", "Controls which ads will appear at the main menu.", "BL2Fix", ["BL2Fix", "None", "Gearbox"])
        self.preferredTechnicalOption = Options.Spinner("Preferred technical", "The technical type catch-a-rides default to.", "Catapult", ["Catapult", "Sawblade"])
        self.preferredRunnerOption = Options.Spinner("Preferred runner", "The runner type catch-a-rides default to.", "MG", ["Rocket", "MG"])
        self.menuPauseOption = Options.Boolean("Menu pause", "Pauses the game when menuing in singleplayer.", True)
        self.menuInAirOption = Options.Boolean("Menu in air", "Allows you to open your menu at times you would normally be unable to, such as while in the air.", True)
        self.startingGearOption = Options.Spinner("Starting Gear", "The items new characters start with. Premiere Club contains the gearbox guns + relic, Special Edition contains the skyrocket and customizations.", "All", ["All", "Premiere Club", "Special Edition", "None"])
        self.DLCPopupOption = Options.Boolean("DLC Pop-Ups", "Toggles the pop-ups that appear the first time you open a character's inventory.", False)
        self.goldenKeyPopupOption = Options.Boolean("Golden Key Pop-Ups", "Toggles the pop-up notifying you of your golden keys.", False)
        self.CurrencyBeamOption = Options.Spinner("Currency Beam Colour", "The colour of loot beams for money, eridium, torgue tokens and seraph crystals. Useful for sorting through large piles of loot. May require map change to update.", "Yellow", ["Yellow", "Original"])
        self.autopickupOption = Options.Spinner("Eridium Auto-Pickup", "Causes eridium to be automatically picked up in the specified playthroughs.", "UVHM", ["UVHM", "Always", "Never"])
        self.TurretThrowSpeedOption = Options.Spinner("Turret Throw Speed", "The speed at which Axton throws out his turret.", "Grenade", ["Grenade", "Original"])
        self.OPLevelOption = Options.Spinner("Max OP Level", "Highest obtainable overpower level. OP8 is highly Recommended for the most balanced and enjoyable gameplay experience.", "OP8", ["OP8", "OP10"])
        self.popupDisablingOption = Options.Spinner("BL2Fix Training Messages", "Controls the BL2Fix-specific popups.", "Show Once", ["Show Once", "Once/Session", "Disabled"])
        self.hiddenHasBeenEnabledBeforeOption = Options.Boolean("Hidden option1", "You really shouldn't be able to see this.", False)
        self.hiddenMissionRerollHasPoppedUpOption = Options.Boolean("Hidden option2", "You really shouldn't be able to see this.", False)
        self.hiddenBankHasPoppedUpOption = Options.Boolean("Hidden option3", "You really shouldn't be able to see this.", False)
        self.hiddenEarlHasPoppedUpOption = Options.Boolean("Hidden option4", "You really shouldn't be able to see this.", False)
        self.hiddenVendorHasPoppedUpOption = Options.Boolean("Hidden option5", "You really shouldn't be able to see this.", False)
        self.hiddenDialogSkipHasPoppedUpOption = Options.Boolean("Hidden option6", "You really shouldn't be able to see this.", False)
        
        #Droprate Options
        self.lootPoolOption = Options.Boolean("Global Loot Rebalance", "Rebalances world drops, boss drops, chests, vendors, and just about every other loot source. Also scales with playthrough and playercount.", True)
        self.heldGunDropOption = Options.Boolean("Enemyuse Gun Drops", "Enemies will drop the guns they use on death if they are green or better.", True)
        self.legendaryGunsForEnemiesOption = Options.Boolean("Enemyuse Legendary Guns", "Enemies that can wield green or better weapons will have an exceedingly rare chance of spawning with a legendary weapon.", True)
        self.uniqueDropRateOption = Options.Boolean("BossUniques Scaling", "Scales the rate at which special enemies drop their dedicated/assigned drops based on playthrough.", True)
        self.gunsAndGearRateOption = Options.Boolean("GunsAndGear Scaling", "Scales the rate at which regular enemies and various misc loot sources will drop an item based on playthrough.", True)
        self.gearLevelOption = Options.Boolean("Item Level Variance", "Disables item level variance in UVHM onward, preventing items from being underlevelled.", True)
        
        #Item Change Option
        self.weaponPartsOption = Options.Boolean("Weapon Part Scaling", "Scales weapons to generate with better parts based on playthrough.", True)
        self.shieldPartsOption = Options.Boolean("Shield Part Scaling", "Scales shields to generate with better parts based on playthrough.", True)
        self.grenadePartsOption = Options.Boolean("Grenade Part Scaling", "Scales grenades to generate with better parts based on playthrough. Also improves grenade type distribution.", True)
        self.classModPartsOption = Options.Boolean("Com Part Scaling", "Scales class mods to generate with better parts based on playthrough.", True)
        self.relicPartsOption = Options.Boolean("Relic Part Scaling", "Scales relics to generate with better parts based on playthrough. Also improves relic type distribution.", True)
        
        #Gameplay Options
        self.EXPRateOption = Options.Boolean("Experience Modifier", "Triples experience gained in UVHM, and massively increases the exprience gained from enemies that are 3 or more levels above you.", True)
        self.enemySpawnRateOption = Options.Boolean("Enemy Spawn Modifier", "Scales the rate at which tubby enemies, Triple O and Vermivorous the Invincible spawn at based on playthrough and playercount.", True)
        
        #Misc options
        self.vendorPriceOption = Options.Boolean("Vendor Price Modifier", "Reduces the price of ammo, health vials, and respecs based on playthrough. Also reduces the price of Torgue and Seraph vendors.", True)
        self.digipeakChestOption = Options.Boolean("Free Digipeak Chests", "Removes the eridium cost of opening red chests in Digistruct Peak.", True)
        self.caravanChestOption = Options.Boolean("Upgrade Caravan Chest", "Adds a small chance for the dahl caravan chest to be red instead of white.", True)
        self.grogNozzleRewardOption = Options.Boolean("Grog Nozzle Mission Reward", "Makes the Grog Nozzle the reward for the side mission \"The Beard Makes the Man\".", True)
        self.ravingRetributionOption = Options.Boolean("Raving Retribution Rants", "Re-enables Krieg's Raving Retribution rants, but at a reduced frequency.", True)
        self.displayRunningBL2FixOption = Options.Boolean("\"Running BL2Fix\"", "Displays the text \"Running BL2Fix\" with version number on the Badass Rank screen.", True)
        self.rangerOnslaughtOption = Options.Boolean("Legendary Ranger Fix", "Makes the Legendary Ranger correctly increase the Onslaught skill by 5 points.", True)
        self.vehiclePermaslagOption = Options.Boolean("Vehicle Permaslag", "Prevents permaslag from occuring by making vehicles unslaggable.", True)
        self.reusableEchoesOption = Options.Boolean("Reusable Echo Logs", "Prevents the starting Echo Logs from being consumed on use and makes them override inferior dialog. Sarah, what the hell?", True)
        self.raidCrashPreventionOption = Options.Boolean("Raid Crash Prevention", "Makes the less valuable raid loot not drop when too many items are on the ground in order to prevent crashing", True)
        self.repeatableMissionOption = Options.Boolean("Repeatable Missions", "Makes Round 5 of Bandit, Creature and Hyperion slaughter as well as the final missions of Torgue and Hammerlock DLCs repeatable.", True)
        self.earlierRaidAccessOption = Options.Boolean("Earlier Raid Access", "Makes Raid Missions available as soon as their location is available allowing you to raid earlier.", True)
        self.unlimitedBankOption = Options.Boolean("Unlimited Bank", "Allows you to endlessly deposit items into your bank.", True)
        self.SDUPriceOption = Options.Boolean("Cheaper SDUs", "Reduces the price of the higher end SDUs in Crazy Earl's shop.", True)
        #self.interspersedOutburstFixOption = Options.Boolean("IO Fix", "desc", True)
        #self.vehicleAnimationsOption = Options.Boolean("Wow he's really moving", "Look at him go", True)
        
        #UCP options
        self.UCPCompatibilityOption = Options.Boolean("UCP Loot + MP Scale", "Enables almost all of the UCP dedicated loot drops and scales them to drop an additional item per player.", False)
        
        #self.rerollKeybind = Keybind("Reroll mission rewards", "O")
        
        self.Options = [
            
            self.travelDelayOption,
            self.crouchSkipOption,
            self.cutsceneDisablerOption,
            self.preferredTechnicalOption,
            self.preferredRunnerOption,
            self.menuPauseOption,
            self.menuInAirOption,
            self.startingGearOption,
            self.DLCPopupOption,
            self.goldenKeyPopupOption,
            self.audioFixOption,
            self.adOption,
            self.CurrencyBeamOption,
            self.autopickupOption,
            self.TurretThrowSpeedOption,
            self.OPLevelOption,
            self.popupDisablingOption,
            self.hiddenHasBeenEnabledBeforeOption,
            self.hiddenMissionRerollHasPoppedUpOption,
            self.hiddenBankHasPoppedUpOption,
            self.hiddenEarlHasPoppedUpOption,
            self.hiddenVendorHasPoppedUpOption,
            self.hiddenDialogSkipHasPoppedUpOption,
            
            Options.Nested("Advanced Options", "Toggle core elements of BL2Fix for compatibility or preference. Avoid touching these unless you know what you're doing.", [
                Options.Nested("Loot Pools", "Adjustments to loot pools and drop rates.", [
                    self.lootPoolOption,
                    self.heldGunDropOption,
                    self.legendaryGunsForEnemiesOption,
                    self.uniqueDropRateOption,
                    self.gunsAndGearRateOption,
                    self.gearLevelOption
                ]),
                Options.Nested("Item Changes", "Adjustments to item generation.", [
                    self.weaponPartsOption,
                    self.shieldPartsOption,
                    self.grenadePartsOption,
                    self.classModPartsOption,
                    self.relicPartsOption
                ]),
                Options.Nested("Gameplay Changes", "Adjustments to experience rates and enemy spawns.", [
                    self.EXPRateOption,
                    self.enemySpawnRateOption
                ]),
                Options.Nested("Misc Changes", "Adjustments to various other parts of BL2.", [
                    self.vendorPriceOption,
                    self.digipeakChestOption,
                    self.caravanChestOption,
                    self.grogNozzleRewardOption,
                    self.ravingRetributionOption,
                    self.displayRunningBL2FixOption,
                    self.rangerOnslaughtOption,
                    self.vehiclePermaslagOption,
                    self.reusableEchoesOption,
                    self.raidCrashPreventionOption,
                    self.repeatableMissionOption,
                    self.earlierRaidAccessOption,
                    self.unlimitedBankOption,
                    self.SDUPriceOption
                    #self.interspersedOutburstFixOption,
                    #self.vehicleAnimationsOption
                ]),
                Options.Nested("UCP Compatibility", "Options to make BL2Fix include some features of the UCP.", [
                    self.UCPCompatibilityOption
                ])
            ])
        ]
        
        self.hiddenHasBeenEnabledBeforeOption.IsHidden = True
        self.hiddenMissionRerollHasPoppedUpOption.IsHidden = True
        self.hiddenBankHasPoppedUpOption.IsHidden = True
        self.hiddenEarlHasPoppedUpOption.IsHidden = True
        self.hiddenVendorHasPoppedUpOption.IsHidden = True
        self.hiddenDialogSkipHasPoppedUpOption.IsHidden = True
        
        #These options will notify the user to restart their game
        self.mustRestartOptionsList = [
            self.lootPoolOption,
            self.heldGunDropOption,
            self.legendaryGunsForEnemiesOption,
            self.uniqueDropRateOption,
            self.gunsAndGearRateOption,
            self.gearLevelOption,
            self.weaponPartsOption,
            self.shieldPartsOption,
            self.grenadePartsOption,
            self.classModPartsOption,
            self.relicPartsOption,
            self.EXPRateOption,
            self.enemySpawnRateOption,
            self.vendorPriceOption,
            self.digipeakChestOption,
            self.caravanChestOption,
            self.grogNozzleRewardOption,
            self.ravingRetributionOption,
            self.displayRunningBL2FixOption,
            self.rangerOnslaughtOption,
            self.vehiclePermaslagOption,
            self.reusableEchoesOption,
            self.raidCrashPreventionOption,
            self.repeatableMissionOption,
            self.earlierRaidAccessOption,
            self.unlimitedBankOption,
            self.SDUPriceOption,
            #self.interspersedOutburstFixOption
            #self.vehicleAnimationsOption,
            self.UCPCompatibilityOption
        ]
        
        '''
        PC = GetEngine().GamePlayers[0].Actor
        if PC.GetMaxExpLevel() == 72:
            self.level80Field.IsHidden = True
            self.level72Field.IsHidden = False
        else:
            self.level80Field.IsHidden = False
            self.level72Field.IsHidden = True
        '''
        
        self.dialogSkipKeybind = Keybind("Skip current dialog", "Z")
        
        self.Keybinds = [
            #["Skip current dialog", "Z"]
            self.dialogSkipKeybind
            #self.rerollKeybind
        ]

    def Enable(self) -> None:
        
        self.lastPlaythrough = -1
        
        #================================================================ EASY-ADJUST VARIABLES FOR FLARE2V ===================================================================
        #Boss loot chances
        self.bossDropsTestingOverride = False #MAKE SURE THIS IS FALSE FOR RELEASE
        self.bossUnqiuesIncreasePerPlaythrough = 0.1
        self.bossUnqiuesIncreasePerOPLevel = 0.025
        self.bossUnqiueRaresIncreasePerPlaythrough = 0.33
        self.bossUnqiueRaresIncreasePerOPLevel = 0.825
        self.bossUnqiueRareSpawnMonsterIncreasePerPlaythrough = 0.2
        self.bossUnqiueRareSpawnMonsterIncreasePerOPLevel = 0.05
        
        #Price scaling
        self.cheapAmmoCostReductionPerPlaythrough = 0.4 #Base is 0.9 so it is 0.1 in UVHM
        self.grenadeCostReductionPerPlaythrough = 2.375 #Base is 5 so it is 0.25 in UVHM
        self.rocketAmmoCostReductionPerPlaythrough = 4.75 #Base is 10 so it is 0.5 in UVHM
        self.healthItemCostReductionPerPlaythrough = 1.35 #Base is 3 so it is 0.3 in UVHM
        self.skillResetCostIncreasePerLevel = 1.09 #Base is 1.12
        self.torgueVendorPriceScale = 0.5 #Base is 1
        self.torgueIOTDPriceScale = 0.5 #Base is 1
        self.seraphStandardItemCost = 60 #Base is 120
        self.seraphIOTDCost = 50 #Base is 50
        
        #Rerolling mission rewards cost
        self.eridiumCostToRerollMissionRewardsNVHM = 2
        self.eridiumCostToRerollMissionRewardsTVHM = 2
        self.eridiumCostToRerollMissionRewardsUVHM = 2
        
        #EXP rates
        #Over/underlevel multipliers
        #Overlevel [1 level over, 2 levels over, etc.]
        self.expOverlevelMultiplierInNVHM = [1, 1.03, 2, 2.5, 3, 3] #Base of [1, 1.03, 1.06, 1.09, 1.12, 1.15]
        self.expOverlevelMultiplierInTVHM = [1, 1.03, 3, 4, 5, 5] #Base of [1, 1.03, 1.06, 1.09, 1.12, 1.15]
        self.expOverlevelMultiplierInUVHM = [1, 1.03, 3, 4, 5, 5] #Base of [1, 1.03, 1.06, 1.09, 1.12, 1.15]
        #Underlevel [1 level under, 2 levels under, etc.]
        self.expUnderlevelMultiplierInNVHM = [0.9, 0.7, 0.4, 0.15, 0.05, 0.01] #Base of [0.9, 0.7, 0.4 0.15, 0.05, 0.01]
        self.expUnderlevelMultiplierInTVHM = [0.9, 0.7, 0.4, 0.15, 0.05, 0.01] #Base of [0.9, 0.7, 0.4 0.15, 0.05, 0.01]
        self.expUnderlevelMultiplierInUVHM = [0.9, 0.7, 0.4, 0.15, 0.05, 0.01] #Base of [0.9, 0.7, 0.4 0.15, 0.05, 0.01]
        #Base EXP rates
        self.expInNVHM = 10 #Base of 10
        self.expInTVHM = 10 #Base of 10
        self.expInUVHM = 33 #Base of 11
        
        #Tubby and Vermi rates
        self.normalTubbyRate = 1 #Base of 1
        self.UVHMTubbyRate = 1.5 #Base of 1
        self.normalVermiRate = 1 #Base of 1
        self.UVHMVermiRate = 2   #Base of 1
        
        #Controlls the ratio of ETechs to purples that will drop from newly-expanded rarity-specific pools and general loot pools
        self.numOfPurplesPerETech = 2 #for every this many purples there will be 1 etech
        
        #Scale constant for the rate of legendaries in the weaponsall, shieldsall, and grenademodsall as well as their derivitives
        self.generalPoolLegendaryScaleConstant = 1 #Base of 3
        
        #Scale constant for GD_Itempools.WeaponPools.Pool_Weapons_Pistols, ARs, etc.
        self.weaponPoolLegendaryScaleConstant = 1
        
        #Multipliers for the chance to roll a pearl in a legendary pool (Base weight is double what Legendaries use)
        self.pearlPistolandARChance = 0.25 #Base of 1
        self.pearlEverythingElseChance = 0.125 #Base of 1
        self.lootMidgetLegendaryOrPearlChance = 0.5 #Base of 1

        #Multiplies the amount of damage cars do on impact (also applies to enemy vehicles)
        self.NVHMCarImpactDamageModifier = 1
        self.TVHMCarImpactDamageModifier = 1
        self.UVHMCarImpactDamageModifier = 1
        
        #Chance of a savage turning into OOO
        self.normalOOOChance = 0.01
        self.TVHMAndUpOOOChance = 0.025
        self.perPlayerOOOScaleIncreaseForTVHMAndUp = 0.33333
        
        #The chance of a raving retribution rant occurring
        self.ravingRetributionChance = 0.025 #base of 0.25
        
        #Not really working
        #Backpack SDU tunables
        self.numExtraBackpackSDUInUVHM = 4 #Base 4 (prices are 4, 8, 12, 16, 20 then bonus 50, 100, 150, 200)
        self.extraBackpackSDUPrices = [
            25, 50, 75, 100
        ]
        self.backpackSlotsPerUpgrade = 3
        
        #Not really working
        #Bank SDU tunables
        self.numExtraBankSDUInUVHM = 0 #Base 4 (prices are 4, 8, 12, 16, 20 then bonus 50, 100, 150, 200)
        self.extraBankSDUPrices = [
            
        ]
        self.bankSlotsPerUpgrade = 2
        
        #Adjusts the ratio at which different types of relics drop
        self.vitalityRate = 1
        self.stockpileRate = 2
        self.protectionRate = 1
        self.strengthRate = 1
        self.resistanceRate = 1.5
        self.elementalRate = 1.75
        self.tenacityRate = 1
        self.proficiencyRate = 1
        self.aggressionRate = 1.5
        self.allegianceRate = 2.5
        
        self.UVHMVitalityScale = 1
        self.UVHMStockpileScale = 1.25
        self.UVHMProtectionScale = 1
        self.UVHMStrengthScale = 1
        self.UVHMResistanceScale = 1.33
        self.UVHMElementalScale = 1.33
        self.UVHMTenacityScale = 1
        self.UVHMProficiencyScale = 1
        self.UVHMAggressionScale = 1
        self.UVHMAllegianceScale = 1.33
        
        #[NVHM value, TVHM value, UVHM value, OP8 value] scales linearly between UVHM and OP8 values with each OP level
        self.allegianceType1 = [1,      0.5,    0.25,   0.1] #Base of 1 (Type1 = one allegiance modifier)
        self.allegianceType2 = [0.5,    1.5,    1.75,   1.9] #Base of 0.5 (Type2 = two allegiance modifiers)
        self.allegianceRareType1 = [1,  0.5,    0.25,   0.1] #Base of 1
        self.allegianceRareType2 = [1,  1.5,    1.75,   1.9] #Base of 1
        self.stockpileType1 = [1, 0.5,  0.25,   0.1] #Base of 1 (Type1 = one stockpile modifier roll) (THESE NEED TO TOTAL 1 OR YOU ONLY GET STOCKPILE RELICS LOL)
        self.stockpileType2 = [1, 1,    0.5,    0.25] #Base of 1 (Type2 = two stockpile modifier rolls)
        self.stockpileType3 = [1, 1.5,  2.25,   2.65] #Base of 1 (Type3 = three stockpile modifier rolls)
        
        #Weights applied to the BaseValueConstant of the bandit manufacturer chance of the corresponding types of grenades
        self.nadeBanditStandard = 0.75 #Base 1
        self.nadeBanditMirv = 0.75 #Base 0.5
        self.nadeBanditBetty = 0.5 #Base 0.5
        
        #The rate at which standard enemies will drop their gunsandgear (scales linearly to op8 from UVHM rate with each op level)
        self.NVHMGunsAndGearRate = 1.2 #Base of 1
        self.TVHMGunsAndGearRate = 1.4 #Base of 1
        self.UVHMGunsAndGearRate = 2.2 #Base of 1
        self.OP8GunsAndGearRate = 4 #Base of 1
        self.digistructPeakGunsAndGearMultiplier = 1
        
        #Scales the weights of whites and greens in white chests
        self.weaponChestCommonScale = 8
        self.weaponChestUncommonScale = 2
        
        #The number of items on the ground at once which is required to delete/warn of the deletion of items of the specified rarity
        self.warnShortlived = 2325
        self.deleteShortlived = 2500
        self.warnLonglived = 2625
        self.deleteLonglived = 2750
        
        #Axton's turret animation variables
        #The turret coming out
        self.throwBlendInTime = 0.1 #Base of 0.1
        self.throwBlendOutTime = 0.1 #Base of 0.1
        self.throwPlayRate = 1 #Base of 0.65
        #The arm animation
        self.throwAnimationBlendInTime = 0.1 #Base of 0.1
        self.throwAnimationBlendOutTime = 0.1 #Base of 0.1
        self.throwAnimationPlayRate = 1 #Base of 0.65
        
        #The special character to reprsent eridium in the reroll ui section
        self.eridiumCharacter = "E"
        
        #Make vehicles unslaggable
        self.makeVehiclesUnslaggable = True
        
        #Vehicle animation speed
        self.vehicleAnimationSpeed = 3 #Base of 1.0
        
        #For the message of the day
        #["HEADER", "BODY", TIME]
        self.MOTDData = [
            ["BL2Fix Discord", "Questions? Comments? Feedback? Check out the Discord! Link is in the Mods menu -> BL2Fix.", 15],
            ["More Info", "The readme contains all sorts of valuable information! Find it in Mods menu -> BL2Fix.", 15],
            ["Ads = Bads?", "You can disable these messages in Options -> Mod Options!", 15]
        ]
        
        #CUSTOM WEIGHTINGS (LEGACY, NOT USED)
        #Current uses:
        #Minus1: rarity-specific gunsandgear under-rarity and on-rarity chances, and vendor loot under-rarity and on-rarity chances
        #Minus2: general pools replace their common and uncommon with corresponding minus2 weights and relic pools use minus2 for down scaling rarities
        #Minus3: white chest pools have thier commons/uncommons weighted with the corresponding minus3 weights, epic chest pools have thier commons/uncommons/rares weighted with the corresponding minus3 weights, and endgame chests have their rares wegihted with commonMinus3
        #Plus1: rarity-specific gunsandgear over-rarity chances, and vendor loot over-rarity chances
        #Plus2: general pools replace their rare+ with corresponding plus2 weights and relic pools use plus2 for up scaling rarities
        #Plus3: white chest pools have thier rares/very rares/legendaries weighted with the corresponding plus3 weights, epic chest pools have thier very rares/legendaries weighted with the corresponding plus3 weights, and endgame chests have their very rares/legendaries wegihted with uncommonMinus3 and rareMinus3 respectively
        #Com weights: in coms according to the spreadsheet
        
        #Purples roll their weight twice (once for purple, once for e-tech)

        #Player controller
        PC = GetEngine().GamePlayers[0].Actor
        weaponList = unrealsdk.FindAll("WeaponBalanceDefinition")
        self.customWeightList = [
            #Name (Becomes GD_Balance.Weighting.Weight_NAME), Base value, NVHM scale, TVHM scale, UVHM scale, OP8 scale, 2 player scale, 3 player scale, 4 player scale, number of items to aplly special multiplier, special multiplier   LAST TWO NOT NECESSARY       
            ["1_Common_Plus1",      28.52,  1,      1,      1,      1,      1,      1,      1],        #4P 1      (unused)
            #"GunsAndGear weights"
            ["6_Legendary_Minus1",  0.03,   1,      222,    333,    333,    1, 1, 1],                  #THEY'RE ALL 9.99
            ["5_VeryRare_Minus1",   0.3,    1,      22.2,   33.3,   33.3,   1, 1, 1],
            ["4_Rare_Minus1",       3,      1,      2.22,   3.33,   3.33,   1, 1, 1],
            ["2_Uncommon_Minus1",   9.99,   1,      1,      1,      1,      1, 1, 1], 
            
            ["1_Common_Minus1",     85.56,  1,      0.872,  0.578,  0.400,  0.991,  0.982,  0.974],    #4P 0.9482  83.34       #TVHM   74.60   #4P 72.66    #UVHM   49.49   #OP8    34.224
            ["2_Uncommon_Plus1",    3.33,   1,      6,      9,      12,     1.166,  1.333,  1.5],      #4P 1.5     4.995       #TVHM   19.98   #4P 29.97    #UVHM   29.97   #OP8    39.96
            ["4_Rare_Plus1",        1,      1,      5,      10,     15,     1.166,  1.333,  1.5],      #4P 1.5     1.5         #TVHM   5       #4P 7.5      #UVHM   10      #OP8    15
            ["5_VeryRare_Plus1",    0.1,    1,      3.5,    5,      7,      1.166,  1.333,  1.5],      #4P 1.5     0.15        #TVHM   0.35    #4P 0.525    #UVHM   0.5     #OP8    0.7
            ["6_Legendary_Plus1",   0.01,   1,      3.5,    5,      7,      1.166,  1.333,  1.5],      #4P 1.5     0.015       #TVHM   0.035   #4P 0.0525   #UVHM   0.05    #OP8    0.07
            #"World Drop weights"
            ["1_Common_Minus2",     85,     1,      0.438,  0.390,  0.294,  0.910,  0.820,  0.731],    #4P 0.731   62.135      #TVHM   37.3                 #UVHM   33.16   #OP8    24.99 <-- This might be too high relative to greens? ('sfine)
            ["2_Uncommon_Minus2",   9.87,   1,      5.493,  5.053,  3.938,  1.5,    2,      2.5],      #4P 2.5     24.675      #TVHM   54.22                #UVHM   49.87   #OP8    38.86
            ["4_Rare_Minus2",       3.33,   1,      2,      4,      8,      1.666,  2.333,  3],        #4P 3       9.99        #TVHM   6.66                 #UVHM   13.32   #OP8    26.64
            ["5_VeryRare_Minus2",   0.8,    1,      2,      4,      10,     1.833,  2.666,  3.5],      #4P 3.5     2.8         #TVHM   1.6                  #UVHM   3.2     #OP8    8
            ["6_Legendary_Minus2",  0.1,    1,      2,      4.5,    15,     2,      3,      4],        #4P 4       0.4         #TVHM   0.2                  #UVHM   0.45    #OP8    1.5
            
            ["1_Common_Plus2",      85,     1,      0.438,  0.390,  0.294,  0.910,  0.820,  0.731],
            ["2_Uncommon_Plus2",    9.87,   1,      5.493,  5.053,  3.263,  1.5,    2,      2.5],
            ["4_Rare_Plus2",        3.33,   1,      2,      4,      10,     1.666,  2.333,  3],
            ["5_VeryRare_Plus2",    0.8,    1,      2,      4,      10,     1.833,  2.666,  3.5],
            ["6_Legendary_Plus2",   0.1,    1,      2,      4.5,    15,     2,      3,      4],
            #I screwed up and made the blue, purple and orange weights scale by the same amount with playercount.
            #This means that chest loot won't scale in later modes where blues are the baseline as everything goes up by the same amount.
            #Hopefully lowering blue and increasing orange doesn't fuck anything up in nvhm/tvhm co-op.
            #old rare, veryrare and legendary values are 2 for 4p scale
            #"Chest weights"
            ["1_Common_Minus3",     15,     1,      0.666,  0.333,  0.166,  0.888,  0.777,  0.666],    #4P 9.99    #TVHM 9.99      4P 6.653                 #UVHM   4.995   #OP8    2.5
            ["2_Uncommon_Minus3",   70.8,   1,      0.870,  0.593,  0.148,  0.946,  0.892,  0.839],    #4P 59.4    #TVHM 61.61     4P 51.690                #UVHM   41.984  #OP8    10.478
            ["4_Rare_Minus3",       10,     1,      2,      4,      5,      1.333,  1.666,  2],        #4P 20      #TVHM 20        4P 40                    #UVHM   40      #OP8    50
            ["5_VeryRare_Minus3",   4,      1,      2,      3,      8,      1.5,    2,      2.5],      #4P 10      #TVHM 8         4P 20                    #UVHM   12      #OP8    32
            ["6_Legendary_Minus3",  0.2,    1,      2,      5,      25,     1.666,  2.333,  3],        #4P 0.6     #TVHM 0.4       4P 1.2                   #UVHM   1       #OP8    5
            
            ["1_Common_Plus3",      15,     1,      0.666,  0.333,  0.166,  0.888,  0.777,  0.666],    #w 120      43.509
            ["2_Uncommon_Plus3",    70.8,   1,      0.870,  0.593,  0.148,  0.946,  0.892,  0.839],    #w 141.6    51.341
            ["4_Rare_Plus3",        10,     1,      2,      4,      5,      1.333,  1.666,  2],        #w 10       3.625
            ["5_VeryRare_Plus3",    4,      1,      2,      3,      8,      1.5,    2,      2.5],      #w 4        1.45
            ["6_Legendary_Plus3",   0.2,    1,      2,      5,      25,     1.666,  2.333,  3],        #w 0.2      0.072
            #Tunables for custom assigned gunsandgear rarity weightings (formerly plus1/minus1
            #Etech/VeryRare Ratio
            ["Pistols_Purple",      8,      1,      1,      1,      1,      1,      1,      1],
            ["Pistols_Etech",       1,      1,      1,      1,      1,      1,      1,      1],
            ["AssaultRifles_Purple",5,      1,      1,      1,      1,      1,      1,      1],
            ["AssaultRifles_Etech", 1,      1,      1,      1,      1,      1,      1,      1],
            ["SMG_Purple",          5,      1,      1,      1,      1,      1,      1,      1],
            ["SMG_Etech",           1,      1,      1,      1,      1,      1,      1,      1],
            ["Shotguns_Purple",     5,      1,      1,      1,      1,      1,      1,      1],
            ["Shotguns_Etech",      1,      1,      1,      1,      1,      1,      1,      1],
            ["SniperRifles_Purple", 5,      1,      1,      1,      1,      1,      1,      1],
            ["SniperRifles_Etech",  1,      1,      1,      1,      1,      1,      1,      1],
            ["Launchers_Purple",    5,      1,      1,      1,      1,      1,      1,      1],
            ["Launchers_Etech",     1,      1,      1,      1,      1,      1,      1,      1],
            #Flarev2 Raid Weights
            ["1_Common_Raid",       1,      7.5,    5,      3.75,   2.5,    1,      1,      1],
            ["2_Uncommon_Raid",     1,      20,     17.5,   15,     12.5,   1,      1,      1],
            ["4_Rare_Raid",         1,      30,     30,     30,     30,     1,      1,      1],
            ["5_VeryRare_Raid",     1,      40,     42.5,   45,     47.5,   1,      1,      1],
            ["6_Legendary_Raid",    1,      2.5,    5,      6.25,   7.5,    1,      1,      1],
            
            #NOT USED  (YET)
            
            #White                          99.982  99.9899 99.9996 99.9984  
            ["1_Common_White",      1,      95.06,  74.672, 53.072, 41.817, 0.991,  0.982,  0.974],
            ["2_Uncommon_White",    1,      3.69,   19.944, 35.607, 48.697, 1.166,  1.333,  1.5],
            ["4_Rare_White",        1,      1.11,   4.99,   10.731, 8.545,  1.166,  1.333,  1.5],
            ["5_VeryRare_White",    1,      0.111,  0.349,  0.536,  0.854,  1.166,  1.333,  1.5],
            ["6_Legendary_White",   1,      0.0111, 0.0349, 0.0536, 0.0854, 1.166,  1.333,  1.5],
            #Green                          99.98   99.997  99.997  99.998
            ["1_Common_Green",      1,      9.99,   9.087,  9.586,  10.873, 1,      1,      1],
            ["2_Uncommon_Green",    1,      85.56,  67.869, 47.455, 37.251, 0.991,  0.982,  0.974],
            ["4_Rare_Green",        1,      3.33,   18.175, 31.922, 43.494, 1.166,  1.333,  1.5],
            ["5_VeryRare_Green",    1,      1,      4.548,  10.555, 7.619,  1.166,  1.333,  1.5],
            ["6_Legendary_Green",   1,      0.1,    0.318,  0.479,  0.761,  1.166,  1.333,  1.5],
            #Blue                           99.998  99.998  99.997  99.996
            ["1_Common_Blue",       1,      2.916,  5.729,  8.786,  28.309, 1,      1,      1],
            ["2_Uncommon_Blue",     1,      9.710,  8.594,  8.786,  7.855,  1,      1,      1],
            ["4_Rare_Blue",         1,      83.164, 64.188, 43.497, 26.912, 0.991,  0.982,  0.974],
            ["5_VeryRare_Blue",     1,      3.236,  17.185, 29.253, 31.416, 1.166,  1.333,  1.5],
            ["6_Legendary_Blue",    1,      0.972,  4.302,  9.675,  5.504,  1.166,  1.333,  1.5],
            #Purple                         99.996  99.998  99.998  99.998
            ["1_Common_Purple",     1,      0.293,  5.638,  8.848,  9.574,  1,      1,      1],
            ["2_Uncommon_Purple",   1,      2.935,  5.647,  8.864,  9.591,  1,      1,      1],
            ["4_Rare_Purple",       1,      9.776,  8.474,  8.867,  9.594,  1,      1,      1],
            ["5_VeryRare_Purple",   1,      83.734, 63.294, 43.898, 32.870, 0.991,  0.982,  0.974],
            ["6_Legendary_Purple",  1,      3.258,  16.945, 29.521, 38.369, 1.166,  1.333,  1.5],
            #Orange (hopefully unused?)
            #["1_Common_Orange",     20,     1,      1,      1,      1,      1,      1,      1],
            #["2_Uncommon_Orange",   20,     1,      1,      1,      1,      1,      1,      1],
            #["5_VeryRare_Orange",   20,     1,      1,      1,      1,      1,      1,      1],
            #["6_Legendary_Orange",  20,     1,      1,      1,      1,      1,      1,      1],
            
            #ComPlus determines the quality of the stat boost values on the com
            #ComPurple determines the number of skill boosts on the com (1=whites+greens 2=purples(bad) 3=purples(good), blue base is 1)
            #Aster com distribution: white=1, green=3, blue=6, purple=9(3 good 6 bad)
            ["ComPlus1",            1,      1,  16.666,  8.333,  4.166,  1, 1, 1], #6 weights, 16.666 is 1/6 of 100
            ["ComPlus2",            1,      1,  16.666,  11.666, 8.749,  1, 1, 1],
            ["ComPlus3",            1,      1,  16.666,  15,     13.333, 1, 1, 1],
            ["ComPlus4",            1,      1,  16.666,  18.333, 17.916, 1, 1, 1],
            ["ComPlus5",            1,      1,  16.666,  21.666, 22.5,   1, 1, 1], #difference of 8.33 between 16.666/25/33.333
            ["ComPlus6",            1,      1,  16.666,  25,     33.333, 1, 1, 1], #ends up as double original value
            
            ["ComPurple1",          1,      1,  1,       0.25,   0.125,  1, 1, 1],
            ["ComPurple2",          1,      1,  1,       0.1,    0.05,   1, 1, 1], #UVHM 1 in 5 purples will be 5 4 3
            ["ComPurple3",          1,      1,  1,       0.8,    0.9,    1, 1, 1], #UVHM 4 in 5 purples will be 5 4 4
            #Hide of Terra accessory weights
            ["Hide1",               1,      1,  20,      10,     5,      1, 1, 1],
            ["Hide2",               1,      1,  20,      15,     11.666, 1, 1, 1],
            ["Hide3",               1,      1,  20,      20,     18.333, 1, 1, 1],
            ["Hide4",               1,      1,  20,      25,     24.999, 1, 1, 1],
            ["Hide5",               1,      1,  20,      30,     40,     1, 1, 1],
            
            #Carnage (and butcher) vertical grip weight (the other accessories are weighted 10(uncommon))
            ["CarnageVerticalGrip",     20,     1, 1,       1,      1,      1, 1, 1],
            
            #Grenade fuse time weightings
            ["FuseCommon0",             25,      1, 1,       1,      1,      1, 1, 1],
            ["FuseCommon1",             25,      1, 1,       1,      1,      1, 1, 1],
            ["FuseCommon2",             25,      1, 1,       1,      1,      1, 1, 1],
            ["FuseCommon3",             100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseCommon4",             100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseCommon5",             100,      1, 1,       1,      1,      1, 1, 1],
            
            ["FuseUncommon0",           50,      1, 1,       1,      1,      1, 1, 1],
            ["FuseUncommon1",           50,      1, 1,       1,      1,      1, 1, 1],
            ["FuseUncommon2",           50,      1, 1,       1,      1,      1, 1, 1],
            ["FuseUncommon3",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseUncommon4",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseUncommon5",           100,      1, 1,       1,      1,      1, 1, 1],
            
            ["FuseRare0",               75,      1, 1,       1,      1,      1, 1, 1],
            ["FuseRare1",               75,      1, 1,       1,      1,      1, 1, 1],
            ["FuseRare2",               75,      1, 1,       1,      1,      1, 1, 1],
            ["FuseRare3",               100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseRare4",               100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseRare5",               100,      1, 1,       1,      1,      1, 1, 1],
            
            ["FuseVeryRare0",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseVeryRare1",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseVeryRare2",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseVeryRare3",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseVeryRare4",           100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseVeryRare5",           100,      1, 1,       1,      1,      1, 1, 1],
            
            ["FuseFast0",               100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseFast1",               100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseFast2",               100,      1, 1,       1,      1,      1, 1, 1],
            ["FuseFast3",               50,      1, 1,       1,      1,      1, 1, 1],
            ["FuseFast4",               50,      1, 1,       1,      1,      1, 1, 1],
            ["FuseFast5",               50,      1, 1,       1,      1,      1, 1, 1],
            
            #Grenade delivery weightings
            ["BanditStickyCommon",      100,      1, 1,       1,      1,      1, 1, 1],
            ["BanditStickyUncommon",    75,      1, 1,       1,      1,      1, 1, 1],
            ["BanditStickyRare",        20,      1, 1,       1,      1,      1, 1, 1],
            ["BanditStickyVeryRare",    10,      1, 1,       1,      1,      1, 1, 1],
            
            ["BanditStickySpecial1",    20,      1, 1,       1,      1,      1, 1, 1],
            ["BanditStickySpecial2",    10,      1, 1,       1,      1,      1, 1, 1],
            
            ["BanditLobbed",            10,      1, 1,       1,      1,      1, 1, 1],
            ["LegendaryLobbed",         20,      1, 1,       1,      1,      1, 1, 1],
            ["LegendaryLobbedVladof",   200,      1, 1,       1,      1,      1, 1, 1],
            
            #Grenade element weightings
            ["ElementChance0",          100,      1, 1,       1,        1,      1, 1, 1], #weight increase by 1.25x each Grade at UVHM, 1.5x at OP8 (recurring theme)
            ["ElementChance1",          100,      1, 1,       1.25,     1.5,    1, 1, 1],
            ["ElementChance2",          100,      1, 1,       1.5625,   2.25,   1, 1, 1],
            ["ElementChance3",          100,      1, 1,       1.9531,   3.375,  1, 1, 1],
            ["ElementChance4",          100,      1, 1,       2.4414,   5.0625, 1, 1, 1],
            
            ["Explosive2",              100,      4, 4,       4.5,      5,      1, 1, 1], #ExplosiveBad Weightings should equal total of ElementChance Weightings
            ["Explosive4A",             100,      8, 8,       11.5312,  16.25,  1, 1, 1], #Explosive Weightings are double ExplosiveBad
            ["Explosive4B",             100,      8, 8,       14.414,   24.375, 1, 1, 1], 
            ["Explosive5",              100,      10,10,      16.414,   26.375, 1, 1, 1],
            
            ["ExplosiveBad2",           100,      2, 2,       2.25,     2.5,        1, 1, 1], #ElementChance0 + 1
            ["ExplosiveBad4A",          100,      4, 4,       5.7656,   8.125,      1, 1, 1], #ElementChance0 + 1 + 2 + 3
            ["ExplosiveBad4B",          100,      4, 4,       7.207,    12.1875,    1, 1, 1], #ElementChance1 + 2 + 3 + 4
            ["ExplosiveBad5",           100,      5, 5,       8.207,    13.1875,    1, 1, 1], #ElementChance0 + 1 + 2 + 3 + 4
            
            #Grenade damage weightings
            ["Damage0",                 100,      1, 1,       1,        1,          1, 1, 1],
            ["Damage1",                 100,      1, 1,       1.25,     1.5,        1, 1, 1],
            ["Damage2",                 100,      1, 1,       1.5625,   2.25,       1, 1, 1],
            ["Damage3",                 100,      1, 1,       1.9531,   3.375,      1, 1, 1],
            ["Damage4",                 100,      1, 1,       2.4414,   5.0625,     1, 1, 1],
            ["Damage5",                 100,      1, 1,       3.0517,   7.5937,     1, 1, 1],
            ["Damage6",                 100,      1, 1,       3.8146,   11.3906,    1, 1, 1],
            ["Damage7",                 100,      1, 1,       4.7683,   17.0859,    1, 1, 1],
            
            ["DamageBandit0",           100,      1, 1,       1,        1,          1, 1, 1],
            ["DamageBandit1",           200,      1, 1,       1.25,     1.5,        1, 1, 1],
            ["DamageBandit2",           400,      1, 1,       1.5625,   2.25,       1, 1, 1],
            ["DamageBandit3",           800,      1, 1,       1.9531,   3.375,      1, 1, 1],
            ["DamageBandit4",           1600,     1, 1,       2.4414,   5.0625,     1, 1, 1],
            ["DamageBandit5",           3200,     1, 1,       3.0517,   7.5937,     1, 1, 1],
            ["DamageBandit6",           6400,     1, 1,       3.8146,   11.3906,    1, 1, 1],
            ["DamageBandit7",           32800,    1, 1,       4.7683,   17.0859,    1, 1, 1],
            
            #Grenade splash radius weightings
            ["BanditRadiusSmall",       100,      1, 1,       1,      1,      1, 1, 1],
            ["BanditRadiusNormal",      200,      1, 1,       1,      1,      1, 1, 1],
            ["BanditRadiusLarge",       400,      1, 1,       1,      1,      1, 1, 1],
            ["BanditRadiusExtraLarge",  800,      1, 1,       1,      1,      1, 1, 1],
            
            #Grenade child count weightings
            ["ChildCount0",             100,      1, 1,       1,        1,          1, 1, 1],
            ["ChildCount1",             100,      1, 1,       1.25,     1.5,        1, 1, 1],
            ["ChildCount2",             100,      1, 1,       1.5625,   2.25,       1, 1, 1],
            ["ChildCount3",             100,      1, 1,       1.9531,   3.375,      1, 1, 1],
            ["ChildCount4",             100,      1, 1,       2.4414,   5.0625,     1, 1, 1],
            ["ChildCount5",             100,      1, 1,       3.0517,   7.5937,     1, 1, 1],
            
            #Grenade effect damage weightings
            ["EffectDmg0",              100,      1, 1,       1,        1,          1, 1, 1],
            ["EffectDmg1",              100,      1, 1,       1.25,     1.5,        1, 1, 1],
            ["EffectDmg2",              100,      1, 1,       1.5625,   2.25,       1, 1, 1],
            ["EffectDmg3",              100,      1, 1,       1.9531,   3.375,      1, 1, 1],
            ["EffectDmg4",              100,      1, 1,       2.4414,   5.0625,     1, 1, 1],
            ["EffectDmg5",              100,      1, 1,       3.0517,   7.5937,     1, 1, 1],
            
            
            
            #Raid/Custom FlarePoolWeights
            ["2P",                                  0.001,      1,  1,  1,  1,  1000,   1000,   1000],
            ["3P",                                  0.001,      1,  1,  1,  1,  1,      1000,   1000],
            ["4P",                                  0.001,      1,  1,  1,  1,  1,      1,      1000],
            
            ["BossUniques",                         0.1,        1,  2,  3,  5,  1,      1,      1],
            ["BossUniques_2P",                      0.0001,     1,  2,  3,  5,  1000,   1000,   1000],
            ["BossUniques_3P",                      0.0001,     1,  2,  3,  5,  1,      1000,   1000],
            ["BossUniques_4P",                      0.0001,     1,  2,  3,  5,  1,      1,      1000],
            
            ["BossUniqueRares",                     0.33,       1,  2,  3,  5,  1,      1,      1],
            ["BossUniqueRares_2P",                  0.00033,    1,  2,  3,  5,  1000,   1000,   1000],
            ["BossUniqueRares_3P",                  0.00033,    1,  2,  3,  5,  1,      1000,   1000],
            ["BossUniqueRares_4P",                  0.00033,    1,  2,  3,  5,  1,      1,      1000],
            
            ["BossUniques_Digi",                    0.05,       1,  2,  3,  5,  1,      1,      1],
            ["BossUniques_Digi_2P",                 0.00005,    1,  2,  3,  5,  1000,   1000,   1000],
            ["BossUniques_Digi_3P",                 0.00005,    1,  2,  3,  5,  1,      1000,   1000],
            ["BossUniques_Digi_4P",                 0.00005,    1,  2,  3,  5,  1,      1,      1000],
            
            ["BossUniqueRares_Digi",                0.33,      1,  2,  3,  5,  1,      1,      1],
            ["BossUniqueRares_Digi_2P",             0.00033,   1,  2,  3,  5,  1000,   1000,   1000],
            ["BossUniqueRares_Digi_3P",             0.00033,   1,  2,  3,  5,  1,      1000,   1000],
            ["BossUniqueRares_Digi_4P",             0.00033,   1,  2,  3,  5,  1,      1,      1000],
            
            
            
            ["Raid",                                1,          1,  1,  1,  1,  1,      1,      1,          10000,     1],
            ["Raid_MP",                             0.001,      1,  1,  1,  1,  333,    666,    1000,       10000,     1],
            ["Raid_BossUniques",                    0.05,       1,  2,  3,  5,  1.333,  1.666,  2,          10000,     1],
            ["Raid_BossUniques_Rare",               0.025,      1,  2,  3,  5,  1.333,  1.666,  2,          10000,     1],
            ["Raid_BossUniques_Seraphs",            0.05,       0,  0,  3,  5,  1.333,  1.666,  2,          10000,     1],
            ["Raid_BossUniques_Seraphs_Rare",       0.05,   0.333,0.666,3,  5,  1.333,  1.666,  2,          10000,     1],
            
            ["GreenRaid",                          1,          1,  1,  1,  1,  1,      1,      1,          750,     0],
            ["GreenRaid_MP",                       0.001,      1,  1,  1,  1,  333,    666,    1000,       750,     0],
            ["GreenRaid_BossUniques",              0.1,        0.5,1,  1.5,2.5,1.333,  1.666,  2,          750,     0],
            
            ["BlueRaid",                           1,          1,  1,  1,  1,  1,      1,      1,          1250,     0],
            ["BlueRaid_MP",                        0.001,      1,  1,  1,  1,  333,    666,    1000,       1250,     0],
            ["BlueRaid_BossUniques",               0.1,        0.5,1,  1.5,2.5,1.333,  1.666,  2,          1250,     0],
            
            ["PurpleRaid",                         1,          1,  1,  1,  1,  1,      1,      1,          1500,     0],
            ["PurpleRaid_MP",                      0.001,      1,  1,  1,  1,  333,    666,    1000,       1500,     0],
            ["PurpleRaid_BossUniques",             0.1,        0.5,1,  1.5,2.5,1.333,  1.666,  2,          1500,     0],
            
            ["Raid_Money",                          1,          1,  1,  1,  1,  1,      1,      1,          500,     0],
            ["Raid_EridiumStick",                   1.6,        1,  1,  1,  1,  1,      1,      1,          500,     0],
            ["Raid_EridiumBar",                     0.15,       1,  1,  1,  1,  1,      1,      1,          500,     0],
            ["Raid_SeraphCrystal",                  1,          1,  1,  1,  1,  1,      1,      1,          1250,     0],
            
            
            ["AlwaysUnlessCrowded",                 1,          1,  1,  1,  1,  1, 1, 1, 50, 0] #Second last number is the cutoff at which it is multiplied by the last number, which should be 0 to disable the weight
        ]

        #POPUP TEXT/DURATION
        #"Title Text",
        #"Body text", <--- use \n for newline
        #PauseDuration (number) <--- number of seconds before you can click ok (displays "Please wait..." during the duration)
        
        #Do <font color=\"#HEX\">TEXT</font> for new colour
        
        self.UnderlevelPopup = [
            "<font color=\"#ff0000\">ERROR:</font> Levelcap Mismatch",
            "Your character's level or experience is higher than Borderlands 2's current levelcap. Characters that exceed levelcap do not pass sanity check, and cannot be safely loaded.  To change your game's levelcap, navigate to your BL2Fix folder and double click on Level72.bat or Level80.bat.\n\nYour BL2Fix folder can be found in:\nBorderlands 2\Binaries\Win32\Mods\BL2Fix",
            1
        ]
        self.ModEnablePopup = [
            "Welcome to BL2Fix!",
            "Thank you for installing BL2Fix! This is the first of a series of tutorial messages that will guide you through the mod's features, options, and errors (should you encounter any).\nTo toggle or view info on Python mods, check the mods tab. You can also view the readme or join the BL2Fix discord there.\n\nA list of mod options are available at Options -> Mod Options\n\nChange keybinds at Options -> Keyboard/Mouse -> Modded Keybinds\n\nThanks for reading, and have fun!",
            5
        ]
        self.MissionRewardPopup = [
            "BL2Fix: Mission Reward Rerolling",
            "You can spend eridium while at a mission reward screen to replace the current item reward with a new variant of the same item. This costs eridium and is done by pressing secondary interact.\n\nYou can see how much eridium you have remaining at the bottom of the mission reward screen, next to the Reroll option: The first number is the cost, the second is your remaining eridium.\nBy default, secondary interact is bound to Q on keyboard and Y on Controller.\n\nDoes not work offhost.",
            2
        ]
        self.BankPopup = [
            "BL2Fix: Infinite Bank",
            "You can endlessly deposit items into your bank. Even though it only appears you have six slots, if you attempt to swap an item, it will deposit the item from your inventory without withdrawing the item from the bank.\n\nWhile there is no set limit on the number of items that can be stored, loading the bank screen will take slightly longer if you've banked hundreds of items.\n\nRemember to regularly back up your save files!",
            2
        ]
        self.EarlPopup = [
            "Title",
            "Body",
            1
        ]
        self.AmmoVendorPopup = [
            "BL2Fix: Fill Ammo",
            "While in an ammo vendor, you can auto buy the ammo required to fill your reserves by pressing secondary interact. If you can't afford to fill all of your ammo, it will buy as much as it can starting with Assault Rifle ammunition, moving downwards. \nBy default, secondary interact is bound to Q on keyboard and Y on Controller.\n\nDoes not work offhost.",
            2
        ]
        self.PleaseRestartPopup = [
            "<font color=\"#ff0000\">ERROR:</font> Restart Required",
            "Some mod options have been changed that will not work properly until you restart Borderlands 2. Please restart your game to avoid any errors and apply the new settings correctly.",
            1
        ]
        self.DialogSkipPopup = [
            "BL2Fix: Dialog Skip",
            f"You can press [{self.dialogSkipKeybind.Key}] (or press B on controller) to instantly skip all dialog that is currently playing. Skipping Dialog makes most mission objectives progress faster, so you can use it to speed through those slow segments!\n\n You can change the bind in Options -> Keyboard/Mouse -> Modded Key Bindings\nDoes not work offhost.",
            2
        ]

        #Usable items that will no longer be consumed on use
        self.NonConsumableItemsList = [
            ["UsableItemDefinition", "GD_DefaultProfiles.IntroEchos.ID_SoldierIntroECHO"],
            ["UsableItemDefinition", "GD_DefaultProfiles.IntroEchos.ID_SirenIntroECHO"],
            ["UsableItemDefinition", "GD_DefaultProfiles.IntroEchos.ID_GunzerkerIntroECHO"],
            ["UsableItemDefinition", "GD_DefaultProfiles.IntroEchos.ID_AssassinIntroECHO"]
        ]
        
        self.blockSwap = False
        self.autoCheckingObjectsList = []
        self.hasShownShortlivedWarning = False
        self.hasShownLonglivedWarning = False
        self.numItemsOnGround = 0
        self.currentMissionItems = None
        self.blockingOPCap = False
        self.blockRewards = False
        self.cutsceneDisablerList = []
        self.notifyRestart = False
        self.hasRestarted = True
        
        PC = GetEngine().GamePlayers[0].Actor
        weaponList = unrealsdk.FindAll("WeaponBalanceDefinition")
        self.dialogGroupObject = unrealsdk.FindObject("GearboxDialogGroup","GD_VOCT_InvEcho.Groups.DialogGroups_InvEcho")
        self.savedDialogGroupObject = unrealsdk.ConstructObject(
            Class=self.dialogGroupObject.Class,
            Outer=self.dialogGroupObject.Outer,
            Name=f"{self.dialogGroupObject.Name}_Saved",
            Template=self.dialogGroupObject
        )
        unrealsdk.KeepAlive(self.savedDialogGroupObject)
        
        #Determines if the user is a client or host of a multiplayer game
        def IsHost() -> bool:
            if GetEngine().GetCurrentWorldInfo().Game:
                return True
            else:
                return False
                
        #Gets the OP level of a WillowPlayerController (Capped at 8)
        def GetOPLevel(WPC) -> int:
            OPLevel = 0
            try:
                if WPC and WPC.Pawn:
                    pawn = WPC.Pawn
                    OPLevel = (pawn.GetGameStage()-pawn.GetExpLevel())
            except:
                unrealsdk.Log("Handeled error while retrieving OP level, defaulted to 0")
                
            if OPLevel > 8:
                OPLevel = 8
            elif OPLevel < 0:
                OPLevel = 0
                
            return OPLevel
                
        if self.popupDisablingOption.CurrentValue == "Once/Session":
            self.hiddenHasBeenEnabledBeforeOption.CurrentValue = False
            self.hiddenMissionRerollHasPoppedUpOption.CurrentValue = False
            self.hiddenBankHasPoppedUpOption.CurrentValue = False
            self.hiddenEarlHasPoppedUpOption.CurrentValue = False
            self.hiddenVendorHasPoppedUpOption.CurrentValue = False
            self.hiddenDialogSkipHasPoppedUpOption.CurrentValue = False
            SaveModSettings(self)
        
        if self.hiddenHasBeenEnabledBeforeOption.CurrentValue == False and self.popupDisablingOption.CurrentValue != "Disabled":
            PC = GetEngine().GamePlayers[0].Actor
            PC.GFxUIManager.ShowTrainingDialog(self.ModEnablePopup[1], self.ModEnablePopup[0], self.ModEnablePopup[2])
            self.hiddenHasBeenEnabledBeforeOption.CurrentValue = True
            SaveModSettings(self)
                
        if self.hasBeenEnabled == False:
            #Collects all the rarities
            self.veryCommonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_0_VeryCommon")
            self.commonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common")
            self.commonRareModObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_RareMod")
            self.uncommonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            self.uncommonerObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3_Uncommoner")
            self.rareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
            self.veryRareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
            self.legendaryObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary")
        
        def checkIndexAgainstMasterTable(BVC, ID):

            '''
            The Master Table:
            Index: BaseValueConstant, BaseValueAttribute, InitializationDefinition, BaseValueScaleConstant
            0: 1, None, None, 1
            1: 100, None, None, 1
            2: 0, None, None, 1
            3: 0, None, veryCommonObject, 1
            4: 0, None, commonObject, 1
            5: 0, None, commonRareModObject, 1
            6: 0, None, uncommonObject, 1
            7: 0, None, uncommonerObject, 1
            8: 0, None, rareObject, 1
            9: 0, None, veryRareObject, 1
            10: 0, None, legendaryObject, 1
            11: 7, None, None, 1
            12: 11, None, None, 1
            13: 13, None, None, 1
            14: 15, None, None, 1
            15: 25, None, None, 1
            '''
            
            if BVC == 0:
                if ID == None:
                    return 2
                elif ID == self.veryCommonObject:
                    return 3
                elif ID == self.commonObject:
                    return 4
                elif ID == self.commonRareModObject:
                    return 5
                elif ID == self.uncommonObject:
                    return 6
                elif ID == self.uncommonerObject:
                    return 7
                elif ID == self.rareObject:
                    return 8
                elif ID == self.veryRareObject:
                    return 9
                elif ID == self.legendaryObject:
                    return 10
                else:
                    PC.ServerRCon(f"say Couldn't find matching index in master table - Error #1")
                    return 666
            else:
                if ID != None:
                    PC.ServerRCon(f"say Couldn't find matching index in master table - Error #2")
                    return 666
                elif BVC == 1:
                    return 0
                elif BVC == 100:
                    return 1
                elif BVC == 7:
                    return 11
                elif BVC == 11:
                    return 12
                elif BVC == 13:
                    return 13
                elif BVC == 15:
                    return 14
                else:
                    PC.ServerRCon(f"say Couldn't find matching index in master table - Error #3")
                    return 666
        
        def assignMasterTable():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor

            weaponList = unrealsdk.FindAll("WeaponBalanceDefinition")

            #Collects all the rarities
            veryCommonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_0_VeryCommon")
            commonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common")
            commonRareModObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_RareMod")
            uncommonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            uncommonerObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3_Uncommoner")
            rareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
            veryRareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
            legendaryObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary")
        
            '''
            The Master Table:
            Index: BaseValueConstant, BaseValueAttribute, InitializationDefinition, BaseValueScaleConstant
            0: 1, None, None, 1
            1: 100, None, None, 1
            2: 0, None, None, 1
            3: 0, None, veryCommonObject, 1
            4: 0, None, commonObject, 1
            5: 0, None, commonRareModObject, 1
            6: 0, None, uncommonObject, 1
            7: 0, None, uncommonerObject, 1
            8: 0, None, rareObject, 1
            9: 0, None, veryRareObject, 1
            10: 0, None, legendaryObject, 1
            11: 7, None, None, 1
            12: 11, None, None, 1
            13: 13, None, None, 1
            14: 15, None, None, 1
            15: 25, None, None, 1
            '''
            
            for weapon in weaponList:
                if weapon.Name != "Default__WeaponBalanceDefinition":
                    #Body
                    if weapon.RuntimePartListCollection.BodyPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.BodyPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Grip
                    if weapon.RuntimePartListCollection.GripPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.GripPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Barrel
                    if weapon.RuntimePartListCollection.BarrelPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.BarrelPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Sight
                    if weapon.RuntimePartListCollection.SightPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.SightPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Stock
                    if weapon.RuntimePartListCollection.StockPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.StockPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Elemental
                    if weapon.RuntimePartListCollection.ElementalPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.ElementalPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Accessory1
                    if weapon.RuntimePartListCollection.Accessory1PartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.Accessory1PartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Accessory2
                    if weapon.RuntimePartListCollection.Accessory2PartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.Accessory2PartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    #Material
                    if weapon.RuntimePartListCollection.MaterialPartData.bEnabled == True:
                        for part in weapon.RuntimePartListCollection.MaterialPartData.WeightedParts:
                            part.DefaultWeightIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.DefaultWeightIndex].InitializationDefinition)
                            part.MinGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MinGameStageIndex].InitializationDefinition)
                            part.MaxGameStageIndex = checkIndexAgainstMasterTable(weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].BaseValueConstant, weapon.RuntimePartListCollection.ConsolidatedAttributeInitData[part.MaxGameStageIndex].InitializationDefinition)
                    
                    PC.ServerRCon(f"set {PC.PathName(weapon.RuntimePartListCollection)} ConsolidatedAttributeInitData ((BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=100.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(veryCommonObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(commonObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(commonRareModObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(uncommonObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(uncommonerObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(rareObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(veryRareObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(legendaryObject)},BaseValueScaleConstant=1.000000),(BaseValueConstant=7.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=11.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=13.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=15.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=25.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                
        #Assigns the master table to all the weapons
        if self.hasBeenEnabled == False:
            assignMasterTable()

        def makeWeaponDependenciesActuallyWorkLikeTheyShouldHaveInTheFirstPlaceGodDamnit():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            weaponList = unrealsdk.FindAll("WeaponBalanceDefinition")
            for weapon in weaponList:
                if weapon.BaseDefinition == None:
                    continue
                #Element
                pointingObject = weapon.BaseDefinition
                if weapon.WeaponPartListCollection.ElementalPartData.bEnabled == False:
                    broken = False
                    while pointingObject.WeaponPartListCollection.ElementalPartData.bEnabled == False:
                        if pointingObject.BaseDefinition == None:
                            broken = True
                            break
                        else:
                            pointingObject = pointingObject.BaseDefinition
                    if broken == False:
                        partCount = 0
                        for part in weapon.RuntimePartListCollection.ElementalPartData.WeightedParts:
                            part.DefaultWeightIndex = pointingObject.RuntimePartListCollection.ElementalPartData.WeightedParts[partCount].DefaultWeightIndex
                            part.MinGameStageIndex = pointingObject.RuntimePartListCollection.ElementalPartData.WeightedParts[partCount].MinGameStageIndex
                            part.MaxGameStageIndex = pointingObject.RuntimePartListCollection.ElementalPartData.WeightedParts[partCount].MaxGameStageIndex
                            partCount += 1
                #Grip
                pointingObject = weapon.BaseDefinition
                if weapon.WeaponPartListCollection.GripPartData.bEnabled == False:
                    broken = False
                    while pointingObject.WeaponPartListCollection.GripPartData.bEnabled == False:
                        if pointingObject.BaseDefinition == None:
                            broken = True
                            break
                        else:
                            pointingObject = pointingObject.BaseDefinition
                    if broken == False:
                        partCount = 0
                        for part in weapon.RuntimePartListCollection.GripPartData.WeightedParts:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = pointingObject.RuntimePartListCollection.GripPartData.WeightedParts[partCount].DefaultWeightIndex
                            part.MinGameStageIndex = pointingObject.RuntimePartListCollection.GripPartData.WeightedParts[partCount].MinGameStageIndex
                            part.MaxGameStageIndex = pointingObject.RuntimePartListCollection.GripPartData.WeightedParts[partCount].MaxGameStageIndex
                            partCount += 1
                #Accessories
                pointingObject = weapon.BaseDefinition
                if weapon.WeaponPartListCollection.Accessory1PartData.bEnabled == False:
                    broken = False
                    while pointingObject.WeaponPartListCollection.Accessory1PartData.bEnabled == False:
                        if pointingObject.BaseDefinition == None:
                            broken = True
                            break
                        else:
                            pointingObject = pointingObject.BaseDefinition
                    if broken == False:
                        partCount = 0
                        for part in weapon.RuntimePartListCollection.Accessory1PartData.WeightedParts:
                            part.DefaultWeightIndex = pointingObject.RuntimePartListCollection.Accessory1PartData.WeightedParts[partCount].DefaultWeightIndex
                            part.MinGameStageIndex = pointingObject.RuntimePartListCollection.Accessory1PartData.WeightedParts[partCount].MinGameStageIndex
                            part.MaxGameStageIndex = pointingObject.RuntimePartListCollection.Accessory1PartData.WeightedParts[partCount].MaxGameStageIndex
                            partCount += 1
                #Barrel
                pointingObject = weapon.BaseDefinition
                if weapon.WeaponPartListCollection.BarrelPartData.bEnabled == False:
                    broken = False
                    while pointingObject.WeaponPartListCollection.BarrelPartData.bEnabled == False:
                        if pointingObject.BaseDefinition == None:
                            broken = True
                            break
                        else:
                            pointingObject = pointingObject.BaseDefinition
                    if broken == False:
                        partCount = 0
                        for part in weapon.RuntimePartListCollection.BarrelPartData.WeightedParts:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = pointingObject.RuntimePartListCollection.BarrelPartData.WeightedParts[partCount].DefaultWeightIndex
                            part.MinGameStageIndex = pointingObject.RuntimePartListCollection.BarrelPartData.WeightedParts[partCount].MinGameStageIndex
                            part.MaxGameStageIndex = pointingObject.RuntimePartListCollection.BarrelPartData.WeightedParts[partCount].MaxGameStageIndex
                            partCount += 1
                #Stock
                pointingObject = weapon.BaseDefinition
                if weapon.WeaponPartListCollection.StockPartData.bEnabled == False:
                    broken = False
                    while pointingObject.WeaponPartListCollection.StockPartData.bEnabled == False:
                        if pointingObject.BaseDefinition == None:
                            broken = True
                            break
                        else:
                            pointingObject = pointingObject.BaseDefinition
                    if broken == False:
                        partCount = 0
                        for part in weapon.RuntimePartListCollection.StockPartData.WeightedParts:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = pointingObject.RuntimePartListCollection.StockPartData.WeightedParts[partCount].DefaultWeightIndex
                            part.MinGameStageIndex = pointingObject.RuntimePartListCollection.StockPartData.WeightedParts[partCount].MinGameStageIndex
                            part.MaxGameStageIndex = pointingObject.RuntimePartListCollection.StockPartData.WeightedParts[partCount].MaxGameStageIndex
                            partCount += 1
        
        #Balances element weighting on weapons
        def makeAllElementsEqual(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[0].DefaultWeightIndex = 0
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[1].DefaultWeightIndex = 0
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[2].DefaultWeightIndex = 0
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[3].DefaultWeightIndex = 0
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[4].DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.ElementalPartData.bEnabled = True
        
        #Balances element weighting on lauchers to prefer elements over non-elemental
        def balanceElementsForLaunchers(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[0].DefaultWeightIndex = 3
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[1].DefaultWeightIndex = 4
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[2].DefaultWeightIndex = 4
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[3].DefaultWeightIndex = 4
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[4].DefaultWeightIndex = 4
            weaponObject.WeaponPartListCollection.ElementalPartData.bEnabled = True
        
        #Weighs grip chance in favour of bandit
        def weighGripForBandit(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            banditObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Bandit")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == banditObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of tediore
        def weighGripForTediore(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            tedioreObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Tediore")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == tedioreObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of vladof
        def weighGripForVladof(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            vladofObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Vladof")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == vladofObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of dahl
        def weighGripForDahl(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            dahlObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Dahl")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == dahlObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of torgue
        def weighGripForTorgue(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            torgueObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Torgue")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == torgueObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of maliwan
        def weighGripForMaliwan(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            maliwanObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Maliwan")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == maliwanObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of jakobs
        def weighGripForJakobs(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            jakobsObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Jakobs")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == jakobsObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Weighs grip chance in favour of hyperion
        def weighGripForHyperion(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            hyperionObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Hyperion")
            j = 0
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.Manufacturers = ((None, 1), )
                if grip.Part.ManufacturerDefinitionForScopeMovie == hyperionObject:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.GripPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True
        
        #Balances accessory1 weighting on weapons
        def makeAllAccessory1Equal(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            for part in weaponObject.RuntimePartListCollection.Accessory1PartData.WeightedParts:
                part.DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.Accessory1PartData.bEnabled = True
        
        #Weighs barrel chance in favour of bandit
        def weighBarrelForBandit(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            banditObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Bandit")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == banditObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of tediore
        def weighBarrelForTediore(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            tedioreObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Tediore")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == tedioreObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of vladof
        def weighBarrelForVladof(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            vladofObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Vladof")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == vladofObject and barrel.Part.Name != "AR_Barrel_Vladof_Minigun":
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of dahl
        def weighBarrelForDahl(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            dahlObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Dahl")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == dahlObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of torgue
        def weighBarrelForTorgue(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            torgueObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Torgue")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == torgueObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of maliwan
        def weighBarrelForMaliwan(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            maliwanObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Maliwan")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == maliwanObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of jakobs
        def weighBarrelForJakobs(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            jakobsObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Jakobs")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == jakobsObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs barrel chance in favour of hyperion
        def weighBarrelForHyperion(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            hyperionObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Hyperion")
            j = 0
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.Manufacturers = ((None, 1), )
                if barrel.Part.ManufacturerDefinitionForScopeMovie == hyperionObject:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 3
                else:
                    weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
        
        #Weighs stock chance against jakobs
        def weighStockAgainstJakobs(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            jakobsObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Jakobs")
            j = 0
            for stock in weaponObject.RuntimePartListCollection.StockPartData.WeightedParts:
                stock.Manufacturers = ((None, 1), )
                if stock.Part.ManufacturerDefinitionForScopeMovie == jakobsObject:
                    weaponObject.RuntimePartListCollection.StockPartData.WeightedParts[j].DefaultWeightIndex = 15
                else:
                    weaponObject.RuntimePartListCollection.StockPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.StockPartData.bEnabled = True
            
        #Weighs stock chance against tediore
        def weighStockAgainstTediore(weaponBalanceDefinition):
            PC = GetEngine().GamePlayers[0].Actor
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            tedioreObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Tediore")
            j = 0
            for stock in weaponObject.RuntimePartListCollection.StockPartData.WeightedParts:
                stock.Manufacturers = ((None, 1), )
                if stock.Part.ManufacturerDefinitionForScopeMovie == tedioreObject:
                    weaponObject.RuntimePartListCollection.StockPartData.WeightedParts[j].DefaultWeightIndex = 15
                else:
                    weaponObject.RuntimePartListCollection.StockPartData.WeightedParts[j].DefaultWeightIndex = 4
                j += 1
            weaponObject.WeaponPartListCollection.StockPartData.bEnabled = True
        
        #Resets the element chances to normal
        def undoElements(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[0].DefaultWeightIndex = 4
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[1].DefaultWeightIndex = 6
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[2].DefaultWeightIndex = 6
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[3].DefaultWeightIndex = 6
            weaponObject.RuntimePartListCollection.ElementalPartData.WeightedParts[4].DefaultWeightIndex = 6
            weaponObject.WeaponPartListCollection.ElementalPartData.bEnabled = True

        #Resets the grip chances of a weapon to even
        def undoGrip(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            for grip in weaponObject.RuntimePartListCollection.GripPartData.WeightedParts:
                grip.DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.GripPartData.bEnabled = True

        #Resets the accessory chances of a weapon to default
        def undoAccessory1(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            i = 0
            for part in weaponObject.RuntimePartListCollection.Accessory1PartData.WeightedParts:
                if i == 0:
                    part.DefaultWeightIndex = 3
                else:
                    part.DefaultWeightIndex = 6
                i += 1
            weaponObject.WeaponPartListCollection.Accessory1PartData.bEnabled = True

        #Assigns non-screwed up values the stock chances of a weapon to even
        def fixStock(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            for stock in weaponObject.RuntimePartListCollection.StockPartData.WeightedParts:
                stock.DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.StockPartData.bEnabled = True

        #Resets the barrel chances of a weapon to even
        def undoBarrel(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            for barrel in weaponObject.RuntimePartListCollection.BarrelPartData.WeightedParts:
                barrel.DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.BarrelPartData.bEnabled = True
            
        #Resets the stock chances of a weapon to even
        def undoStock(weaponBalanceDefinition):
            weaponObject = unrealsdk.FindObject("WeaponBalanceDefinition", weaponBalanceDefinition)
            for stock in weaponObject.RuntimePartListCollection.StockPartData.WeightedParts:
                stock.DefaultWeightIndex = 0
            weaponObject.WeaponPartListCollection.StockPartData.bEnabled = True

        #Scales boss uniques, boss unique rares, and boss uniques rare spawn monster off of your current playthrough and OP level
        def ScaleDropRates():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            
            #BossUniques and BossUniqueRares value resovlers
            rateObject = unrealsdk.FindObject(
                "ConstantAttributeValueResolver",
                "GD_Itempools.DropWeights.DropODDS_BossUniques:ConstantAttributeValueResolver_0"
            )
            rareRateObject = unrealsdk.FindObject(
                "ConstantAttributeValueResolver",
                "GD_Itempools.DropWeights.DropODDS_BossUniqueRares:ConstantAttributeValueResolver_0"
            )
            monsterRateObject = unrealsdk.FindObject(
                "ConstantAttributeValueResolver",
                "GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster:ConstantAttributeValueResolver_0"
            )

            #Scales the drop rates
            playthrough = PC.GetCurrentPlaythrough()
            
            OPLevel = GetOPLevel(PC)
                
            if self.bossDropsTestingOverride == False:
                rateObject.ConstantValue = ((playthrough + 1) * self.bossUnqiuesIncreasePerPlaythrough) + (OPLevel * self.bossUnqiuesIncreasePerOPLevel)
                rareRateObject.ConstantValue = ((playthrough + 1) * self.bossUnqiueRaresIncreasePerPlaythrough) + (OPLevel * self.bossUnqiueRaresIncreasePerOPLevel)
                monsterRateObject.ConstantValue = ((playthrough + 1) * self.bossUnqiueRareSpawnMonsterIncreasePerPlaythrough) + (OPLevel * self.bossUnqiueRareSpawnMonsterIncreasePerOPLevel)
            elif self.bossDropsTestingOverride == True:
                rateObject.ConstantValue = 1
                rareRateObject.ConstantValue = 1
                monsterRateObject.ConstantValue = 1
        
        #Scales prices for ammo, health, and skill point resets off your current playthrough
        def ScaleCosts():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            playthrough = PC.GetCurrentPlaythrough()

            if unrealsdk.FindObject("ConstantAttributeValueResolver", "GD_Economy.BaseCost.Att_BaseCost_Ammo_AssaultRifleAmmo:ConstantAttributeValueResolver_0"):
                ARAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_AssaultRifleAmmo:ConstantAttributeValueResolver_0"
                )
                SMGAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_SMGAmmo:ConstantAttributeValueResolver_0"
                )
                pistolAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_PistolAmmo:ConstantAttributeValueResolver_0"
                )
                shotgunAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_ShotgunAmmo:ConstantAttributeValueResolver_0"
                )
                sniperAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_SniperRifleAmmo:ConstantAttributeValueResolver_0"
                )
                grenadeAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_GrenadeAmmo:ConstantAttributeValueResolver_0"
                )
                ARAmmoObject.ConstantValue = (0.9 - (playthrough * self.cheapAmmoCostReductionPerPlaythrough))
                SMGAmmoObject.ConstantValue = (0.9 - (playthrough * self.cheapAmmoCostReductionPerPlaythrough))
                pistolAmmoObject.ConstantValue = (0.9 - (playthrough * self.cheapAmmoCostReductionPerPlaythrough))
                shotgunAmmoObject.ConstantValue = (0.9 - (playthrough * self.cheapAmmoCostReductionPerPlaythrough))
                sniperAmmoObject.ConstantValue = (0.9 - (playthrough * self.cheapAmmoCostReductionPerPlaythrough))
                grenadeAmmoObject.ConstantValue = (5 - (playthrough * self.grenadeCostReductionPerPlaythrough))
            
            if unrealsdk.FindObject("ConstantAttributeValueResolver", "GD_Economy.BaseCost.Att_BaseCost_Ammo_LauncherAmmo:ConstantAttributeValueResolver_0"):
                launcherAmmoObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_Ammo_LauncherAmmo:ConstantAttributeValueResolver_0"
                )
                launcherAmmoObject.ConstantValue = (10 - (playthrough * self.rocketAmmoCostReductionPerPlaythrough))
            
            if unrealsdk.FindObject("ConstantAttributeValueResolver", "GD_Economy.BaseCost.Att_BaseCost_HealthItem:ConstantAttributeValueResolver_0"):
                healthItemObject = unrealsdk.FindObject(
                    "ConstantAttributeValueResolver",
                    "GD_Economy.BaseCost.Att_BaseCost_HealthItem:ConstantAttributeValueResolver_0"
                )
                healthItemObject.ConstantValue = (3 - (playthrough * self.healthItemCostReductionPerPlaythrough))
                
            if unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Globals.Skills.CostToResetSkillPoints"):
                pointResetObject = unrealsdk.FindObject(
                    "AttributeInitializationDefinition",
                    "GD_Globals.Skills.CostToResetSkillPoints"
                )
                pointResetObject.ValueFormula.Level.BaseValueConstant = self.skillResetCostIncreasePerLevel
                pointResetObject.ValueFormula.Level.BaseValueAttribute = None
                
            #Torgue vendor prices
            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Iris_TorgueTokenVendor.CommerceMarkup") and unrealsdk.FindObject("PopulationFactoryVendingMachine","GD_Iris_TorgueTokenVendor.Population.PopDef_TorgueTokenVendor:PopulationFactoryVendingMachine_0"):
                markupObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Iris_TorgueTokenVendor.CommerceMarkup")
                markupObject.ValueFormula.Multiplier.BaseValueScaleConstant = self.torgueVendorPriceScale
                torgueVendorObject = unrealsdk.FindObject("PopulationFactoryVendingMachine","GD_Iris_TorgueTokenVendor.Population.PopDef_TorgueTokenVendor:PopulationFactoryVendingMachine_0")
                torgueVendorObject.FixedFeaturedItemCost = int(613 * self.torgueIOTDPriceScale)

            #Adjusts the prices of seraph crystal items
            seraphVendorList = [
                "GD_Aster_SeraphCrystalVendor.Population.PopDef_SeraphCrystalVendor:PopulationFactoryVendingMachine_0",
                "GD_Iris_SeraphCrystalVendor.Population.PopDef_SeraphCrystalVendor:PopulationFactoryVendingMachine_0",
                "GD_Orchid_SeraphCrystalVendor.Population.PopDef_SeraphCrystalVendor:PopulationFactoryVendingMachine_0",
                "GD_Sage_SeraphCrystalVendor.Population.PopDef_SeraphCrystalVendor:PopulationFactoryVendingMachine_0"
            ]
            for vendor in seraphVendorList:
                if unrealsdk.FindObject("PopulationFactoryVendingMachine",vendor):
                    vendorObject = unrealsdk.FindObject("PopulationFactoryVendingMachine",vendor)
                    vendorObject.FixedItemCost = self.seraphStandardItemCost
                    vendorObject.FixedFeaturedItemCost = self.seraphIOTDCost

        #Scales EXP rates from enemies off your playthrough
        def ScaleEXPRates():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            globalsObject = unrealsdk.FindObject("GlobalsDefinition","GD_Globals.General.Globals")
            
            #NVHM
            if PC.GetCurrentPlaythrough() == 0:
                PC.ServerRCon(f"set AttributeInitializationDefinition'GD_Balance_Experience.Formulas.Init_EnemyExperience_PerPlaythrough' ConditionalInitialization (bEnabled=True,ConditionalExpressionList=((BaseValueIfTrue=(BaseValueConstant={self.expInNVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=1.000000))),(BaseValueIfTrue=(BaseValueConstant={self.expInTVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=2.000000)))),DefaultBaseValue=(BaseValueConstant=10,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                i = 0
                while i <= 5:
                    globalsObject.ExpScaleByLevelDifference[i].HigherLevelEnemyExpScale = self.expOverlevelMultiplierInNVHM[i]
                    globalsObject.ExpScaleByLevelDifference[i].LowerLevelEnemyExpScale = self.expUnderlevelMultiplierInNVHM[i]
                    i += 1
            
            #TVHM
            if PC.GetCurrentPlaythrough() == 1:
                PC.ServerRCon(f"set AttributeInitializationDefinition'GD_Balance_Experience.Formulas.Init_EnemyExperience_PerPlaythrough' ConditionalInitialization (bEnabled=True,ConditionalExpressionList=((BaseValueIfTrue=(BaseValueConstant={self.expInNVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=1.000000))),(BaseValueIfTrue=(BaseValueConstant={self.expInTVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=2.000000)))),DefaultBaseValue=(BaseValueConstant=10,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                i = 0
                while i <= 5:
                    globalsObject.ExpScaleByLevelDifference[i].HigherLevelEnemyExpScale = self.expOverlevelMultiplierInTVHM[i]
                    globalsObject.ExpScaleByLevelDifference[i].LowerLevelEnemyExpScale = self.expUnderlevelMultiplierInTVHM[i]
                    i += 1
            
            #UVHM
            if PC.GetCurrentPlaythrough() == 2:
                PC.ServerRCon(f"set AttributeInitializationDefinition'GD_Balance_Experience.Formulas.Init_EnemyExperience_PerPlaythrough' ConditionalInitialization (bEnabled=True,ConditionalExpressionList=((BaseValueIfTrue=(BaseValueConstant={self.expInNVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=1.000000))),(BaseValueIfTrue=(BaseValueConstant={self.expInUVHM},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),Expressions=((AttributeOperand1=AttributeDefinition'D_Attributes.Balance.PlayThroughCount',ComparisonOperator=OPERATOR_EqualTo,Operand2Usage=OPERAND_PreferAttribute,AttributeOperand2=None,ConstantOperand2=2.000000)))),DefaultBaseValue=(BaseValueConstant=10,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                i = 0
                while i <= 5:
                    globalsObject.ExpScaleByLevelDifference[i].HigherLevelEnemyExpScale = self.expOverlevelMultiplierInUVHM[i]
                    globalsObject.ExpScaleByLevelDifference[i].LowerLevelEnemyExpScale = self.expUnderlevelMultiplierInUVHM[i]
                    i += 1
            
        #Increase all tubby chances and Vermi chance by 50% but only in UVHM+
        def ScaleTubbySpawnRates():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor

            #Enemy mix, index in actor archetype list
            skags1 = ["GD_Population_Skag.Population.PopDef_SkagMix_Regular", 5] #base of 0.002
            skags2 = ["GD_Population_Skag.Population.PopDef_SkagMix_PandoraPark", 5] #base of 0.002
            skeletons1 = ["GD_Aster_Pop_Skeletons.Population.PopDef_SkeletonsDen_Regular", 12] #base of 0.002
            skeletons2 = ["GD_Aster_Pop_Skeletons.Population.PopDef_SkeletonsDen_CastleKeep", 12] #base of 0.002
            skeletons3 = ["GD_Aster_Pop_Skeletons.Population.PopDef_SkeletonsDen_Docks", 7] #base of 0.002
            spiderants1 = ["GD_Population_SpiderAnt.Population.PopDef_SpiderantMix_Regular", 9] #base of 0.002
            spiderants2 = ["GD_Population_SpiderAnt.Population.PopDef_SpiderantMix_Interlude", 5] #base of 0.001
            spiderants3 = ["GD_Population_SpiderAnt.Population.PopDef_SpiderantMix_IceCanyon", 5] #base of 0.001
            spiderants4 = ["GD_Population_SpiderAnt.Population.PopDef_SpiderantMix_Caverns", 6] #base of 0.001
            rakks = ["GD_Population_Rakk.Population.PopDef_RakkMix_Regular", 2] #base of 0.002
            stalkers1 = ["GD_Population_Stalker.Population.PopDef_StalkerMix_Spring", 2] #base of 0.001
            stalkers2 = ["GD_Population_Stalker.Population.PopDef_StalkerMix_Needle", 2] #base of 0.001
            stalkers3 = ["GD_Population_Stalker.Population.PopDef_StalkerMix_Cyclone", 2] #base of 0.0005
            stalkers4 = ["GD_Population_Stalker.Population.PopDef_StalkerMix_Ambush", 2] #base of 0.0005
            varkids = ["GD_Population_BugMorph.Population.PopDef_BugMorphBadass", 1] #base of 0.05
            
            tubbies = [skags1, skags2, skeletons1, skeletons2, skeletons3, spiderants1, spiderants2, spiderants3, spiderants4, rakks, stalkers1, stalkers2, stalkers3, stalkers4, varkids]
            
            #Set all the rates to normal
            if PC.GetCurrentPlaythrough() == 0 or PC.GetCurrentPlaythrough() == 1:
                for tubby in tubbies:
                    if unrealsdk.FindObject("WillowPopulationDefinition",tubby[0]):
                        tubbyObject = unrealsdk.FindObject("WillowPopulationDefinition",tubby[0])
                        tubbyObject.ActorArchetypeList[tubby[1]].Probability.BaseValueScaleConstant = self.normalTubbyRate
                if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.BugmorphCocoon_PerPlayers_Phase5"):
                    vermi = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.BugmorphCocoon_PerPlayers_Phase5") #Base of 0, 0, 0, 0, 0.1, 0.1, 0.11, 0.12
                    vermi.ConditionalInitialization.ConditionalExpressionList[4].BaseValueIfTrue.BaseValueScaleConstant = self.normalVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[5].BaseValueIfTrue.BaseValueScaleConstant = self.normalVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[6].BaseValueIfTrue.BaseValueScaleConstant = self.normalVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[7].BaseValueIfTrue.BaseValueScaleConstant = self.normalVermiRate
                    
            #Increase rates in UVHM+
            elif PC.GetCurrentPlaythrough() == 2:
                for tubby in tubbies:
                    if unrealsdk.FindObject("WillowPopulationDefinition",tubby[0]):
                        tubbyObject = unrealsdk.FindObject("WillowPopulationDefinition",tubby[0])
                        tubbyObject.ActorArchetypeList[tubby[1]].Probability.BaseValueScaleConstant = self.UVHMTubbyRate
                if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.BugmorphCocoon_PerPlayers_Phase5"):
                    vermi = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.BugmorphCocoon_PerPlayers_Phase5") #Base of 0, 0, 0, 0, 0.1, 0.1, 0.11, 0.12
                    vermi.ConditionalInitialization.ConditionalExpressionList[4].BaseValueIfTrue.BaseValueScaleConstant = self.UVHMVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[5].BaseValueIfTrue.BaseValueScaleConstant = self.UVHMVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[6].BaseValueIfTrue.BaseValueScaleConstant = self.UVHMVermiRate
                    vermi.ConditionalInitialization.ConditionalExpressionList[7].BaseValueIfTrue.BaseValueScaleConstant = self.UVHMVermiRate
        
        #Makes OOO spawn more frequently:
        def ScaleOOOSpawnRates():
            if unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Native_Badass.WeightingPlayerCount.FireGod_PerPlayers"):
                OOORateObject = unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Native_Badass.WeightingPlayerCount.FireGod_PerPlayers")
                
                i = 0
                while i < 4:
                    OOORateObject.ConditionalInitialization.ConditionalExpressionList[i].BaseValueIfTrue.BaseValueConstant = self.normalOOOChance
                    i += 1
                
                i = 0
                while i < 4:
                    OOORateObject.ConditionalInitialization.ConditionalExpressionList[i + 4].BaseValueIfTrue.BaseValueConstant = self.TVHMAndUpOOOChance
                    OOORateObject.ConditionalInitialization.ConditionalExpressionList[i + 4].BaseValueIfTrue.BaseValueScaleConstant = 1 + (i * self.perPlayerOOOScaleIncreaseForTVHMAndUp)
                    i += 1
        
        def CreateCustomWeight(name, baseValue):
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
        
            weightToCopyObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common")
            
            #Checks to see if the custom weight already exists
            customWeightObject = unrealsdk.FindObject(
                "AttributeInitializationDefinition", 
                f"GD_Balance.Weighting.Weight_{name}"
            )
            
            #Create new weight if it doesn't exist
            if customWeightObject is None:
                customWeightObject = unrealsdk.ConstructObject(
                    Class=weightToCopyObject.Class,
                    Outer=weightToCopyObject.Outer,
                    Name=f"Weight_{name}",
                    Template=weightToCopyObject
                )
            
            customWeightObject.ValueFormula.Multiplier.BaseValueConstant = baseValue
            
            unrealsdk.KeepAlive(customWeightObject)
        
        if self.hasBeenEnabled == False:
            for weight in self.customWeightList:
                CreateCustomWeight(weight[0], weight[1])

        def UpdateCustomWeights():
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            playthrough = PC.GetCurrentPlaythrough()
            numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers
            
            #OP Level
            OPLevel = GetOPLevel(PC)
                
            for weight in self.customWeightList:
                desiredMultiplier = 0
                if playthrough == 0:
                    desiredMultiplier = weight[2]
                elif playthrough == 1:
                    desiredMultiplier = weight[3]
                else:
                    desiredMultiplier = weight[4]
                    if OPLevel > 0:
                        desiredMultiplier = weight[4] + (((weight[5] - weight[4]) / 8) * OPLevel)
                if numPlayers > 1:
                    desiredMultiplier *= weight[5 + (numPlayers - 1)]
                if len(weight) > 9:
                    if self.numItemsOnGround >= weight[9]:
                        desiredMultiplier *= weight[10]
                customWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_{weight[0]}")
                customWeightObject.ValueFormula.Multiplier.BaseValueScaleConstant = desiredMultiplier
                
        #Creates the gearbox_doodoobrain launcher pool
        def CreateGearboxDoodooBrain():
            oldPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.WeaponPools.Pool_Weapons_Launchers")
            #Checks to see if the custom pool already exists
            newPoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                "GD_Itempools.WeaponPools.Pool_Weapons_Launchers_Gearbox_Doodoobrain"
            )
            
            #Create new loot pool if it doesn't exist
            if newPoolObject is None:
                newPoolObject = unrealsdk.ConstructObject(
                    Class=oldPoolObject.Class,
                    Outer=oldPoolObject.Outer,
                    Name="Pool_Weapons_Launchers_Gearbox_Doodoobrain",
                    Template=oldPoolObject
                )
            
            unrealsdk.KeepAlive(newPoolObject)
            newPoolObject.BalancedItems[0].bDropOnDeath = False
            newPoolObject.BalancedItems[5].Probability.BaseValueScaleConstant = 0
        
        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            CreateGearboxDoodooBrain()
        
        #Causes enemies to drop their weapons if the quality is blue or purple and gives enemies the aility to wield legendaries (which will also drop)
        def EnableEnemyWeaponDropping():
            uncommonWeight = rareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            rareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
            veryRareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
            legendaryWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary")
            
            pistolPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Pistols_EnemyUse"
            ARPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_AssaultRifles_EnemyUse"
            SMGPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_SMG_EnemyUse"
            shotgunPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Shotguns_EnemyUse"
            sniperPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_SniperRifles_EnemyUse"
            launcherPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Launchers_EnemyUse"
            torgueGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_Pistols_EnemyUse"
            torgueGangARPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_AR_EnemyUse"
            torgueGangShotgunPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_Shotguns_EnemyUse"
            angelGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_Pistols_EnemyUse"
            angelGangShotgunPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_Shotguns_EnemyUse"
            angelGangSMGPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_SMG_EnemyUse"
            angelGangSniperPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_SniperRifles_EnemyUse"
            dragonGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_Pistols_EnemyUse"
            dragonGangSMGPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_SMG_EnemyUse"
            dragonGangSniperPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_SniperRifles_EnemyUse"
            
            #Fixes rocket launcher pool shenanigans
            if unrealsdk.FindObject("ItemPoolDefinition",launcherPool) and unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_Launchers_Gearbox_Doodoobrain"):
                poolObject = unrealsdk.FindObject("ItemPoolDefinition",launcherPool)
                gearboxDoodooBrainObject = unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_Launchers_Gearbox_Doodoobrain")
                poolObject.BalancedItems[0].ItmPoolDefinition = gearboxDoodooBrainObject
                poolObject.BalancedItems[0].bDropOnDeath = True
            
            poolList = [pistolPool, ARPool, SMGPool, shotgunPool, sniperPool, launcherPool, torgueGangPistolPool, torgueGangARPool, torgueGangShotgunPool, angelGangPistolPool, angelGangSMGPool, angelGangShotgunPool, angelGangSniperPool, dragonGangPistolPool, dragonGangSMGPool, dragonGangSniperPool]
            
            legendaryItemPools = [
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Pistols_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SMG_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Shotguns_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SniperRifles_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Launchers_07_LegendaryPlusPearl",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_AR_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Shotguns_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Shotguns_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SMG_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SniperRifles_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SMG_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SniperRifles_06_Legendary"
            ]
            
            j = 0
            for pool in poolList:
                if unrealsdk.FindObject("ItemPoolDefinition",pool):
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                    numItems = 0
                    for item in poolObject.BalancedItems:
                        numItems += 1
                        
                    for item in poolObject.BalancedItems:
                        if item.Probability.InitializationDefinition == rareWeight or item.Probability.InitializationDefinition == veryRareWeight or item.Probability.InitializationDefinition == uncommonWeight or item.Probability.InitializationDefinition == legendaryWeight:
                            item.bDropOnDeath = True
                            
                j += 1
            
            #Other enemy use pools
            allButLaunchers = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_All_ButLaunchers"
            noLaunchersSnipers1 = "GD_Orchid_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_EnemyUse_NoLaunchersSnipers"
            pistolSMG = "GD_Orchid_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_EnemyUse_Pistol_SMG"
            noLaunchersSnipers2 = "GD_Sage_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_EnemyUse_NoLaunchersSnipers"
            angelGangAllButLaunchers = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_AngelGang_All_ButLaunchers_Use"
            dragonGangAllButLaunchers = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_DragonGang_All_ButLaunchers_Use"
            torgueGangAllButLaunchers = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_TorgueGangWeapons_All_ButLaunchers_Use"
            jacksBodyDouble = "GD_JacksBodyDouble.WeaponPools.Pool_Weapons_JackBodyDouble_EnemyUse"
            sageNoLaunchersSnipers = "GD_Sage_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_EnemyUse_NoLaunchersSnipers"
            
            poolList = [allButLaunchers, noLaunchersSnipers1, pistolSMG, noLaunchersSnipers2, angelGangAllButLaunchers, dragonGangAllButLaunchers, torgueGangAllButLaunchers, jacksBodyDouble, sageNoLaunchersSnipers]
            
            for pool in poolList:
                if unrealsdk.FindObject("ItemPoolDefinition",pool):
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                    for item in poolObject.BalancedItems:
                        item.bDropOnDeath = True
            
            #Fixes weird weights in zaford pistolssmgs
            zafordPistolsSMGs = "GD_Population_Marauder.ItemPools.ItemPool_ZafordClan_PistolsSMGs_EnemyUse"
            if unrealsdk.FindObject("ItemPoolDefinition",zafordPistolsSMGs):
                poolObject = unrealsdk.FindObject("ItemPoolDefinition",zafordPistolsSMGs)
                weightList = [
                    "GD_Balance.Weighting.Weight_1_Common",
                    "GD_Balance.Weighting.Weight_2_Uncommon",
                    "GD_Balance.Weighting.Weight_4_Rare",
                    "GD_Balance.Weighting.Weight_5_VeryRare"
                ]
                i = 0
                while i < 4:
                    poolObject.BalancedItems[i].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition", weightList[i])
                    poolObject.BalancedItems[i + 4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition", weightList[i])
                    if i > 0:
                       poolObject.BalancedItems[i].bDropOnDeath = True
                       poolObject.BalancedItems[i + 4].bDropOnDeath = True
                    i += 1
                
                if self.legendaryGunsForEnemiesOption.CurrentValue == True:
                    poolObject.BalancedItems[8].bDropOnDeath = True
                    poolObject.BalancedItems[9].bDropOnDeath = True

        #Allows enemies to wield legendary weapons
        def EnableEnemyLegendaries():
            uncommonWeight = rareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            rareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
            veryRareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
            legendaryWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary")
            
            pistolPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Pistols_EnemyUse"
            ARPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_AssaultRifles_EnemyUse"
            SMGPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_SMG_EnemyUse"
            shotgunPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Shotguns_EnemyUse"
            sniperPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_SniperRifles_EnemyUse"
            launcherPool = "GD_ItempoolsEnemyUse.WeaponPools.Pool_Weapons_Launchers_EnemyUse"
            torgueGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_Pistols_EnemyUse"
            torgueGangARPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_AR_EnemyUse"
            torgueGangShotgunPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_TorgueGang_Shotguns_EnemyUse"
            angelGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_Pistols_EnemyUse"
            angelGangShotgunPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_Shotguns_EnemyUse"
            angelGangSMGPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_SMG_EnemyUse"
            angelGangSniperPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_AngelGang_SniperRifles_EnemyUse"
            dragonGangPistolPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_Pistols_EnemyUse"
            dragonGangSMGPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_SMG_EnemyUse"
            dragonGangSniperPool = "GD_Iris_ItemPoolsEnemyUse.WeaponPools.Pool_Weapons_DragonGang_SniperRifles_EnemyUse"
            
            poolList = [pistolPool, ARPool, SMGPool, shotgunPool, sniperPool, launcherPool, torgueGangPistolPool, torgueGangARPool, torgueGangShotgunPool, angelGangPistolPool, angelGangSMGPool, angelGangShotgunPool, angelGangSniperPool, dragonGangPistolPool, dragonGangSMGPool, dragonGangSniperPool]
            
            legendaryItemPools = [
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Pistols_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SMG_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Shotguns_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SniperRifles_07_LegendaryPlusPearl",
                "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Launchers_07_LegendaryPlusPearl",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_AR_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Shotguns_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Shotguns_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SMG_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SniperRifles_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_Pistols_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SMG_06_Legendary",
                "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SniperRifles_06_Legendary"
            ]
            
            j = 0
            for pool in poolList:
                if unrealsdk.FindObject("ItemPoolDefinition",pool):
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                    numItems = 0
                    for item in poolObject.BalancedItems:
                        numItems += 1
                        
                    i = 0
                    for item in poolObject.BalancedItems:
                        if ((i == numItems - 2 and item.Probability.InitializationDefinition != legendaryWeight and (j > 0 and j < 5)) or (i == numItems - 1 and item.Probability.InitializationDefinition != legendaryWeight and (j == 0 or j > 4))) and unrealsdk.FindObject("ItemPoolDefinition",legendaryItemPools[j]):
                            ExpandPoolByAmount(pool, 1)
                            poolObject.BalancedItems[numItems].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition",legendaryItemPools[j])
                            poolObject.BalancedItems[numItems].Probability.InitializationDefinition = legendaryWeight
                        i += 1
                j += 1
            
            #Fixes weird weights in zaford pistolssmgs
            zafordPistolsSMGs = "GD_Population_Marauder.ItemPools.ItemPool_ZafordClan_PistolsSMGs_EnemyUse"
            if unrealsdk.FindObject("ItemPoolDefinition",zafordPistolsSMGs):
                poolObject = unrealsdk.FindObject("ItemPoolDefinition",zafordPistolsSMGs)

                numItems = 0
                for item in poolObject.BalancedItems:
                    numItems += 1
                    
                if numItems == 8:
                    ExpandPoolByAmount(zafordPistolsSMGs, 2)
                    poolObject.BalancedItems[8].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition", "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Pistols_07_LegendaryPlusPearl")
                    poolObject.BalancedItems[8].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_6_Legendary")
                    poolObject.BalancedItems[9].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition", "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SMG_07_LegendaryPlusPearl")
                    poolObject.BalancedItems[9].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_6_Legendary")

        #Adjusts general loot rates
        def AdjustGeneralLoot(fromHook = False):
            if fromHook == False:
                #Reduces the rate of legendary pools rolling a pearl
                #Item pool definition, pearl index, modifier
                legendaryPistols = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Pistols_07_LegendaryPlusPearl", 8, self.pearlPistolandARChance]
                legendaryARs = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_07_LegendaryPlusPearl", 5, self.pearlPistolandARChance]
                legendaryShotguns = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Shotguns_07_LegendaryPlusPearl", 5, self.pearlEverythingElseChance]
                legendarySMGs = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SMG_07_LegendaryPlusPearl", 5, self.pearlEverythingElseChance]
                legendarySnipers = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SniperRifles_07_LegendaryPlusPearl", 5, self.pearlEverythingElseChance]
                legendaryLaunchers = ["GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Launchers_07_LegendaryPlusPearl", 5, self.pearlEverythingElseChance]
                lootMidgetLegendaryOrPearl = ["GD_Gladiolus_Itempools.EnemyDropPools.Pool_All_LegendaryPlusPearl_MinLevel51", 1, self.lootMidgetLegendaryOrPearlChance]
                
                legendaryPools = [legendaryPistols, legendaryARs, legendaryShotguns, legendarySMGs, legendarySnipers, legendaryLaunchers, lootMidgetLegendaryOrPearl]
                
                for pool in legendaryPools:
                    if unrealsdk.FindObject("ItemPoolDefinition",pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool[0])
                        poolObject.BalancedItems[pool[1]].Probability.BaseValueScaleConstant = pool[2]
                        
                #Replaces certain set rarities with the custom rarities
                pistolPool = "GD_Itempools.WeaponPools.Pool_Weapons_Pistols"
                ARPool = "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles"
                SMGPool = "GD_Itempools.WeaponPools.Pool_Weapons_SMG"
                shotgunPool = "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns"
                sniperPool = "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles"
                launcherPool = "GD_Itempools.WeaponPools.Pool_Weapons_Launchers"
                allWeaponPool = "GD_Itempools.WeaponPools.Pool_Weapons_All"
                allShieldPool = "GD_Itempools.ShieldPools.Pool_Shields_All"
                allGrenadeModePool = "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All"
                allClassModPool = "GD_Itempools.ClassModPools.Pool_ClassMod_All"
                torgueGangPistolPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Pistols"
                torgueGangARPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_AR"
                torgueGangShotgunPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_TorgueGang_Shotguns"
                angelGangPistolPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Pistols"
                angelGangShotgunPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_Shotguns"
                angelGangSMGPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SMG"
                angelGangSniperPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_AngelGang_SniperRifles"
                dragonGangPistolPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_Pistols"
                dragonGangSMGPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SMG"
                dragonGangSniperPool = "GD_Iris_ItemPools.WeaponPools.Pool_Weapons_DragonGang_SniperRifles"
                
                poolList = [pistolPool, ARPool, SMGPool, shotgunPool, sniperPool, launcherPool, allWeaponPool, allShieldPool, allGrenadeModePool, allClassModPool, torgueGangPistolPool, torgueGangARPool, torgueGangShotgunPool, angelGangPistolPool, angelGangSMGPool, angelGangShotgunPool, angelGangSniperPool, dragonGangPistolPool, dragonGangSMGPool, dragonGangSniperPool]
                
                customCommonWeightMinus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Minus2")
                customUncommonWeightMinus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Minus2")
                customRareWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Plus2")
                customVeryRareWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Plus2")
                customLegendaryWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Plus2")
                
                veryRareWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
                
                for pool in poolList:
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                    i = 0
                    j = 0
                    for item in poolObject.BalancedItems:
                        i += 1
                    while j < i:
                        if j == 0:
                            poolObject.BalancedItems[j].Probability.InitializationDefinition = customCommonWeightMinus2
                        elif j == 1:
                            poolObject.BalancedItems[j].Probability.InitializationDefinition = customUncommonWeightMinus2
                        elif j == 2:
                            poolObject.BalancedItems[j].Probability.InitializationDefinition = customRareWeightPlus2
                        elif j == 3:
                            poolObject.BalancedItems[j].Probability.InitializationDefinition = customVeryRareWeightPlus2
                        elif j == 4:
                            if poolObject.BalancedItems[j].Probability.InitializationDefinition == veryRareWeight:
                                poolObject.BalancedItems[j].Probability.InitializationDefinition = customVeryRareWeightPlus2
                                #Makes the ratio of ETechs to purples correct
                                temp = (((poolObject.BalancedItems[j].Probability.BaseValueScaleConstant + poolObject.BalancedItems[j-1].Probability.BaseValueScaleConstant)/2)+((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                                poolObject.BalancedItems[j].Probability.BaseValueScaleConstant *= (((poolObject.BalancedItems[j].Probability.BaseValueScaleConstant + poolObject.BalancedItems[j-1].Probability.BaseValueScaleConstant)/2)-((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                                poolObject.BalancedItems[j-1].Probability.BaseValueScaleConstant *= temp
                            else:
                                poolObject.BalancedItems[j].Probability.InitializationDefinition = customLegendaryWeightPlus2
                        else:
                            poolObject.BalancedItems[j].Probability.InitializationDefinition = customLegendaryWeightPlus2
                        j += 1
            
                #Triples the scaling of legendaries in these pools to conform with other pools
                pistolPool = "GD_Itempools.WeaponPools.Pool_Weapons_Pistols"
                ARPool = "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles"
                SMGPool = "GD_Itempools.WeaponPools.Pool_Weapons_SMG"
                shotgunPool = "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns"
                sniperPool = "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles"
                launcherPool = "GD_Itempools.WeaponPools.Pool_Weapons_Launchers"
                
                poolList = [pistolPool, ARPool, SMGPool, shotgunPool, sniperPool, launcherPool]
                
                for pool in poolList:
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                    poolObject.BalancedItems[5].Probability.BaseValueScaleConstant = self.weaponPoolLegendaryScaleConstant

            #Removes legendary rate tripling in certain general item pools
            #pool, legendary index
            weaponPool = ["GD_Itempools.WeaponPools.Pool_Weapons_All", 5]
            shieldPool = ["GD_Itempools.ShieldPools.Pool_Shields_All", 4]
            grenadeModPool = ["GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", 4]

            poolList = [weaponPool, shieldPool, grenadeModPool]
            for pool in poolList:
                if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                    poolObject.BalancedItems[pool[1]].Probability.BaseValueScaleConstant = self.generalPoolLegendaryScaleConstant

        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            AdjustGeneralLoot()
        
        #Makes standard enemies drop gunsandgear loot more often
        def UpdateGunsAndGear():
            gunsandgearObject = unrealsdk.FindObject("ConditionalAttributeValueResolver","GD_Itempools.DropWeights.DropODDS_GunsAndGear:ConditionalAttributeValueResolver_0")
            PC = GetEngine().GamePlayers[0].Actor
            playthrough = PC.GetCurrentPlaythrough()
            mapname = PC.WorldInfo.GetMapName()
            
            gunsAndGearRate = 1
            applicableMultiplier = 1
            
            if mapname == "TestingZone_P":
                applicableMultiplier = self.digistructPeakGunsAndGearMultiplier
            
            OPLevel = GetOPLevel(PC)
            
            if playthrough == 0:
                gunsAndGearRate = self.NVHMGunsAndGearRate
            elif playthrough == 1:
                gunsAndGearRate = self.TVHMGunsAndGearRate
            else:
                gunsAndGearRate = (self.UVHMGunsAndGearRate + (((self.OP8GunsAndGearRate - self.UVHMGunsAndGearRate) / 8) * OPLevel)) * applicableMultiplier
            
            for expression in gunsandgearObject.ValueExpressions.ConditionalExpressionList:
                expression.BaseValueIfTrue.BaseValueScaleConstant = gunsAndGearRate
        
        #Assigns custom weights to all the relic part lists
        def ScaleRelics(fromHook = False):
            if fromHook == False:
                #Ones with uncommoner also go here
                standardRelicList = [
                    "GD_Artifacts.PartLists.Parts_Vitality",
                    "GD_Artifacts.PartLists.Parts_Stockpile",
                    "GD_Artifacts.PartLists.Parts_Protection",
                    "GD_Artifacts.PartLists.Parts_Strength",
                    "GD_Artifacts.PartLists.Parts_Resistance",
                    "GD_Artifacts.PartLists.Parts_Elemental",
                    "GD_Artifacts.PartLists.Parts_Tenacity",
                    "GD_Artifacts.PartLists.Parts_Proficiency",
                    "GD_Artifacts.PartLists.Parts_AggressionA",
                    "GD_Artifacts.PartLists.Parts_AggressionB",
                    "GD_Artifacts.PartLists.Parts_AggressionC",
                    "GD_Artifacts.PartLists.Parts_AggressionD",
                    "GD_Artifacts.PartLists.Parts_AggressionE",
                    "GD_Artifacts.PartLists.Parts_AggressionF",
                    "GD_Artifacts.PartLists.Parts_AllegianceA",
                    "GD_Artifacts.PartLists.Parts_AllegianceB",
                    "GD_Artifacts.PartLists.Parts_AllegianceC",
                    "GD_Artifacts.PartLists.Parts_AllegianceD",
                    "GD_Artifacts.PartLists.Parts_AllegianceE",
                    "GD_Artifacts.PartLists.Parts_AllegianceF",
                    "GD_Artifacts.PartLists.Parts_AllegianceG",
                    "GD_Artifacts.PartLists.Parts_AllegianceH",
                    "GD_Artifacts.PartLists.Parts_Elemental_Status",
                    "GD_Aster_Artifacts.PartLists.Parts_SeraphShadow",
                    "GD_Sage_Artifacts.PartLists.Parts_SeraphBreath"
                ]

                rareRelicList = [
                    "GD_Artifacts.PartLists.Parts_Vitality_Rare",
                    "GD_Artifacts.PartLists.Parts_Stockpile_Rare",
                    "GD_Artifacts.PartLists.Parts_Protection_Rare",
                    "GD_Artifacts.PartLists.Parts_Strength_Rare",
                    "GD_Artifacts.PartLists.Parts_Resistance_Rare",
                    "GD_Artifacts.PartLists.Parts_Elemental_Rare",
                    "GD_Artifacts.PartLists.Parts_Tenacity_Rare",
                    "GD_Artifacts.PartLists.Parts_Proficiency_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionA_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionB_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionC_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionD_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionE_Rare",
                    "GD_Artifacts.PartLists.Parts_AggressionF_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceA_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceB_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceC_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceD_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceE_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceF_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceG_Rare",
                    "GD_Artifacts.PartLists.Parts_AllegianceH_Rare",
                    "GD_Artifacts.PartLists.Parts_Elemental_Status_Rare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacityAssault_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacityLauncher_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacityPistol_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacitySMG_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacityShotgun_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_AggressionTenacitySniper_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_ResistanceProtection_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_VitalityStockpile_VeryRare",
                    "GD_Gladiolus_Artifacts.PartLists.Parts_ElementalProficiency_VeryRare",
                    "GD_Iris_SeraphItems.Might.Iris_Seraph_Artifact_Might_PartListCollection"
                ]
                
                thatOneMessedUpRelic = "GD_Artifacts.PartLists_Unique.Parts_Opportunity"
                
                #Collects all the rarities
                commonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common")
                uncommonObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
                uncommonerObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3_Uncommoner")
                rareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
                veryRareObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare")
                
                #Custom rarities
                commonWeightMinus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Minus2")
                uncommonWeightMinus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Minus2")
                uncommonWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Plus2")
                rareWeightMinus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Minus2")
                rareWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Plus2")
                veryRareWeightPlus2 = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Plus2")
                
                for relic in standardRelicList:
                    if unrealsdk.FindObject("ItemPartListCollectionDefinition",relic):
                        relicObject = unrealsdk.FindObject("ItemPartListCollectionDefinition",relic)
                        for weight in relicObject.ConsolidatedAttributeInitData:
                            if weight.InitializationDefinition == commonObject:
                                weight.InitializationDefinition = commonWeightMinus2
                            elif weight.InitializationDefinition == uncommonObject:
                                weight.InitializationDefinition = uncommonWeightMinus2
                            elif weight.InitializationDefinition == uncommonerObject:
                                weight.InitializationDefinition = uncommonWeightPlus2
                                weight.BaseValueScaleConstant = 0.5
                            elif weight.InitializationDefinition == rareObject:
                                weight.InitializationDefinition = rareWeightPlus2
                            elif weight.InitializationDefinition == veryRareObject:
                                weight.InitializationDefinition = veryRareWeightPlus2
                            
                for relic in rareRelicList:
                    if unrealsdk.FindObject("ItemPartListCollectionDefinition",relic):
                        relicObject = unrealsdk.FindObject("ItemPartListCollectionDefinition",relic)
                        for weight in relicObject.ConsolidatedAttributeInitData:
                            if weight.InitializationDefinition == commonObject:
                                weight.InitializationDefinition = commonWeightMinus2
                            elif weight.InitializationDefinition == uncommonObject:
                                weight.InitializationDefinition = uncommonWeightMinus2
                            elif weight.InitializationDefinition == rareObject:
                                weight.InitializationDefinition = rareWeightMinus2
                            elif weight.InitializationDefinition == veryRareObject:
                                weight.InitializationDefinition = veryRareWeightPlus2
                
                if unrealsdk.FindObject("ItemPartListCollectionDefinition",thatOneMessedUpRelic):
                    relicObject = unrealsdk.FindObject("ItemPartListCollectionDefinition",thatOneMessedUpRelic)
                    relicObject.ConsolidatedAttributeInitData[3].InitializationDefinition = rareWeightMinus2
                    relicObject.ConsolidatedAttributeInitData[4].InitializationDefinition = rareWeightPlus2
                    relicObject.ConsolidatedAttributeInitData[4].BaseValueScaleConstant = 0.5
                
            else:
                artifactPoolList = [
                    "GD_Itempools.ArtifactPools.Pool_ArtifactsAll",
                    "GD_Itempools.ArtifactPools.Pool_Artifacts_01_Common",
                    "GD_Itempools.ArtifactPools.Pool_Artifacts_02_Uncommon",
                    "GD_Itempools.ArtifactPools.Pool_Artifacts_03_Rare",
                    "GD_Itempools.ArtifactPools.Pool_Artifacts_04_VeryRare",
                    "GD_Itempools.ArtifactPools.Pool_Artifacts_05_Legendary",
                    "GD_Itempools.ArtifactPools.Pool_ArtifactsReward"
                ]
                
                standardAllegianceList = [
                    "GD_Artifacts.A_Item.A_AllegianceA",
                    "GD_Artifacts.A_Item.A_AllegianceB",
                    "GD_Artifacts.A_Item.A_AllegianceC",
                    "GD_Artifacts.A_Item.A_AllegianceD",
                    "GD_Artifacts.A_Item.A_AllegianceE",
                    "GD_Artifacts.A_Item.A_AllegianceF",
                    "GD_Artifacts.A_Item.A_AllegianceG",
                    "GD_Artifacts.A_Item.A_AllegianceH"
                ]
                
                rareAllegianceList = [
                    "GD_Artifacts.A_Item.A_AllegianceA_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceB_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceC_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceD_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceE_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceF_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceG_Rare",
                    "GD_Artifacts.A_Item.A_AllegianceH_Rare"
                ]
                
                stockpileList = [
                    unrealsdk.FindObject("InventoryBalanceDefinition","GD_Artifacts.A_Item.A_Stockpile"),
                    unrealsdk.FindObject("InventoryBalanceDefinition","GD_Artifacts.A_Item.A_Stockpile_Rare")
                ]
                
                PC = GetEngine().GamePlayers[0].Actor
                playthrough = PC.GetCurrentPlaythrough()
                
                for pool in artifactPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition",pool):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition",pool)
                        poolObject.BalancedItems[0].Probability.BaseValueConstant = self.vitalityRate
                        poolObject.BalancedItems[1].Probability.BaseValueConstant = self.stockpileRate
                        poolObject.BalancedItems[2].Probability.BaseValueConstant = self.protectionRate
                        poolObject.BalancedItems[3].Probability.BaseValueConstant = self.strengthRate
                        poolObject.BalancedItems[4].Probability.BaseValueConstant = self.resistanceRate
                        poolObject.BalancedItems[5].Probability.BaseValueConstant = self.elementalRate
                        poolObject.BalancedItems[6].Probability.BaseValueConstant = self.tenacityRate
                        poolObject.BalancedItems[7].Probability.BaseValueConstant = self.proficiencyRate
                        poolObject.BalancedItems[8].Probability.BaseValueConstant = self.aggressionRate
                        poolObject.BalancedItems[9].Probability.BaseValueConstant = self.allegianceRate
                        if playthrough == 2:
                            poolObject.BalancedItems[0].Probability.BaseValueScaleConstant = self.UVHMVitalityScale
                            poolObject.BalancedItems[1].Probability.BaseValueScaleConstant = self.UVHMStockpileScale
                            poolObject.BalancedItems[2].Probability.BaseValueScaleConstant = self.UVHMProtectionScale
                            poolObject.BalancedItems[3].Probability.BaseValueScaleConstant = self.UVHMStrengthScale
                            poolObject.BalancedItems[4].Probability.BaseValueScaleConstant = self.UVHMResistanceScale
                            poolObject.BalancedItems[5].Probability.BaseValueScaleConstant = self.UVHMElementalScale
                            poolObject.BalancedItems[6].Probability.BaseValueScaleConstant = self.UVHMTenacityScale
                            poolObject.BalancedItems[7].Probability.BaseValueScaleConstant = self.UVHMProficiencyScale
                            poolObject.BalancedItems[8].Probability.BaseValueScaleConstant = self.UVHMAggressionScale
                            poolObject.BalancedItems[9].Probability.BaseValueScaleConstant = self.UVHMAllegianceScale
                        else:
                            for item in poolObject.BalancedItems:
                                item.Probability.BaseValueScaleConstant = 1
                
                if playthrough == 2:
                    OPLevel = GetOPLevel(PC)
                        
                    standardAllegianceValue1 = self.allegianceType1[2] + (((self.allegianceType1[3] - self.allegianceType1[2]) / 8) * OPLevel)
                    standardAllegianceValue2 = self.allegianceType2[2] + (((self.allegianceType2[3] - self.allegianceType2[2]) / 8) * OPLevel)
                    rareAllegianceValue1 = self.allegianceRareType1[2] + (((self.allegianceRareType1[3] - self.allegianceRareType1[2]) / 8) * OPLevel)
                    rareAllegianceValue2 = self.allegianceRareType2[2] + (((self.allegianceRareType2[3] - self.allegianceRareType2[2]) / 8) * OPLevel)
                    stockpileValue1 = self.stockpileType1[2] + (((self.stockpileType1[3] - self.stockpileType1[2]) / 8) * OPLevel)
                    stockpileValue2 = self.stockpileType2[2] + (((self.stockpileType2[3] - self.stockpileType2[2]) / 8) * OPLevel)
                    stockpileValue3 = self.stockpileType3[2] + (((self.stockpileType3[3] - self.stockpileType3[2]) / 8) * OPLevel)
                    
                else:
                    standardAllegianceValue1 = self.allegianceType1[playthrough]
                    standardAllegianceValue2 = self.allegianceType2[playthrough]
                    rareAllegianceValue1 = self.allegianceRareType1[playthrough]
                    rareAllegianceValue2 = self.allegianceRareType2[playthrough]
                    stockpileValue1 = self.stockpileType1[playthrough]
                    stockpileValue2 = self.stockpileType2[playthrough]
                    stockpileValue3 = self.stockpileType3[playthrough]
                    
                for relic in standardAllegianceList:
                    if unrealsdk.FindObject("InventoryBalanceDefinition",relic):
                        relicObject = unrealsdk.FindObject("InventoryBalanceDefinition",relic)
                        i = 0
                        while i < 6:
                            if i < 3:
                                relicObject.Manufacturers[i].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = standardAllegianceValue1
                                relicObject.Manufacturers[i].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = standardAllegianceValue1
                            else:
                                relicObject.Manufacturers[i].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = standardAllegianceValue2
                                relicObject.Manufacturers[i].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = standardAllegianceValue2
                            i += 1
                            
                for relic in rareAllegianceList:
                    if unrealsdk.FindObject("InventoryBalanceDefinition",relic):
                        relicObject = unrealsdk.FindObject("InventoryBalanceDefinition",relic)
                        i = 0
                        while i < 6:
                            if i < 3:
                                relicObject.Manufacturers[i].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = rareAllegianceValue1
                                relicObject.Manufacturers[i].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = rareAllegianceValue1
                            else:
                                relicObject.Manufacturers[i].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = rareAllegianceValue2
                                relicObject.Manufacturers[i].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = rareAllegianceValue2
                            i += 1
                
                for stockpile in stockpileList:
                    stockpile.Manufacturers[0].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = stockpileValue1
                    stockpile.Manufacturers[0].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = stockpileValue1
                    stockpile.Manufacturers[1].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = stockpileValue2
                    stockpile.Manufacturers[1].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = stockpileValue2
                    stockpile.Manufacturers[2].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = stockpileValue3
                    stockpile.Manufacturers[2].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = stockpileValue3

        if self.hasBeenEnabled == False and self.relicPartsOption.CurrentValue == True:
            ScaleRelics()
        
        def CopyGunsAndGear():
            poolsToCopyList = [
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_UncommonsRaid",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_RaresRaid",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare",
                "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary"
            ]
            
            for pool in poolsToCopyList:
                if unrealsdk.FindObject("ItemPoolDefinition", pool):
                    poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool)
                    newPoolObject = unrealsdk.FindObject("ItemPoolDefinition", f"{pool}_Modded")
                    if newPoolObject is None:
                        newPoolObject = unrealsdk.ConstructObject(
                            Class=poolObject.Class,
                            Outer=poolObject.Outer,
                            Name=f"{poolObject.Name}_Modded",
                            Template=poolObject
                        )
                        unrealsdk.KeepAlive(newPoolObject)
                        
        if self.hasBeenEnabled == False:
            CopyGunsAndGear()
        
        def ReplacePoolWithCopyWithCustomRarity(outerPool, index, poolToCopy, rarity, minusOrPlus, scalingSeverity, isPawn = False, playthrough = 0, listIndex = 0):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor
            
            outerPoolObject = unrealsdk.UObject
            
            if isPawn == False:
                outerPoolObject = unrealsdk.FindObject(
                    "ItemPoolDefinition",
                    outerPool
                )
            elif isPawn == True:
                if unrealsdk.FindObject("AIPawnBalanceDefinition",outerPool):
                    outerPoolObject = unrealsdk.FindObject(
                        "AIPawnBalanceDefinition",
                        outerPool
                    )
                else:
                    return
            
            poolToCopyObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                poolToCopy
            )
            
            #Checks to see if the custom pool already exists
            newPoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"{poolToCopyObject.Outer}.{poolToCopyObject.Name}_{rarity}_Plus"
            )
            
            #Create new loot pool if it doesn't exist
            if newPoolObject is None:
                newPoolObject = unrealsdk.ConstructObject(
                    Class=poolToCopyObject.Class,
                    Outer=poolToCopyObject.Outer,
                    Name=f"{poolToCopyObject.Name}_{rarity}_Plus",
                    Template=poolToCopyObject
                )
            
            unrealsdk.KeepAlive(newPoolObject)

            rarityIndex = 0
            testPool = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Alien")
            
            if rarity == "Common":
                rarityIndex = 0
                
            elif rarity == "Uncommon":
                rarityIndex = 1
                
            elif rarity == "Rare":
                rarityIndex = 2
                
            elif rarity == "VeryRare":
                rarityIndex = 3
            
            elif rarity == "VeryRare_Alien":
                rarityIndex = 4
                
            elif rarity == "Legendary":
                if newPoolObject.BalancedItems[4].ItmPoolDefinition == testPool:
                    rarityIndex = 5
                else:
                    rarityIndex = 4
                
            #Custom weights
            commonWeight = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_1_Common_{minusOrPlus}{scalingSeverity}")
            uncommonWeight = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_2_Uncommon_{minusOrPlus}{scalingSeverity}")
            rareWeight = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_4_Rare_{minusOrPlus}{scalingSeverity}")
            veryRareWeight = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_5_VeryRare_{minusOrPlus}{scalingSeverity}")
            legendaryWeight = unrealsdk.FindObject("AttributeInitializationDefinition",f"GD_Balance.Weighting.Weight_6_Legendary_{minusOrPlus}{scalingSeverity}")
            
            uncommonPlus1Weight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Plus1")
            rarePlus1Weight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Plus1")
            veryRarePlus1Weight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Plus1")
            legendaryPlus1Weight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Plus1")
                
            i = rarityIndex
            j = 0
            while i >= 0:
                encounteredETech = False
                if rarityIndex - i - j == 0:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = commonWeight
                elif rarityIndex - i - j == 1:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = uncommonWeight
                elif rarityIndex - i - j == 2:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = rareWeight
                elif rarityIndex - i - j == 3:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = veryRareWeight
                elif rarityIndex - i - j == 4:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = legendaryWeight
                     
                if j == 0:
                    if newPoolObject.BalancedItems[i - j].ItmPoolDefinition == testPool:
                        j += 1
                        encounteredETech = True
                if encounteredETech == False:
                    i -= 1
                
            i = rarityIndex
            j = 0
            numPools = 0
            for pool in newPoolObject.BalancedItems:
                numPools += 1
            
            while i < numPools:
                encounteredETech = False
                if i - rarityIndex - j == 1:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = uncommonPlus1Weight
                elif i - rarityIndex - j == 2:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = rarePlus1Weight
                elif i - rarityIndex - j == 3:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = veryRarePlus1Weight
                elif i - rarityIndex - j == 4:
                    newPoolObject.BalancedItems[i].Probability.InitializationDefinition = legendaryPlus1Weight
                    
                if j == 0:
                    if newPoolObject.BalancedItems[i + j].ItmPoolDefinition == testPool:
                        j += 1
                        encounteredETech = True
                if encounteredETech == False:
                    i += 1
            
            if isPawn == False:
                outerPoolObject.BalancedItems[index].ItmPoolDefinition = newPoolObject
            elif isPawn == True:
                outerPoolObject.PlayThroughs[playthrough].CustomItemPoolList[listIndex].ItemPool = newPoolObject
        
        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            #Adjusts rarity-specific guns and gear pools to be able to roll above and below
            #Guns
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "Common", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_UncommonsRaid", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_RaresRaid", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare", 0, "GD_Itempools.WeaponPools.Pool_Weapons_All", "VeryRare", "Minus", 1)
            #Shields
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Common", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_UncommonsRaid", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_RaresRaid", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "VeryRare", "Minus", 1)
            #Grenade Mods
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Common", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_UncommonsRaid", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_RaresRaid", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "VeryRare", "Minus", 1)
            #Class Mods
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Common", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_UncommonsRaid", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Uncommon", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_RaresRaid", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Rare", "Minus", 1)
            ReplacePoolWithCopyWithCustomRarity("GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "VeryRare", "Minus", 1)
            
        #Makes vendor loto able to roll above and below rarity
        def FixVendorLoot():
            #Ammo dump IOTD
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.AmmoShop.Shoppool_FeaturedItem_GrenadeMachine"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.AmmoShop.Shoppool_FeaturedItem_GrenadeMachine", 0, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.AmmoShop.Shoppool_FeaturedItem_GrenadeMachine", 1, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.AmmoShop.Shoppool_FeaturedItem_GrenadeMachine", 2, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "VeryRare", "Minus", 1)
                
            #Ammo dump standard items
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.AmmoShop.VendingMachinePool_GrenadeMods"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.AmmoShop.VendingMachinePool_GrenadeMods", 1, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.AmmoShop.VendingMachinePool_GrenadeMods", 0, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_All", "Uncommon", "Minus", 1)
                
            #Health now IOTD
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 0, "GD_Itempools.ShieldPools.Pool_Shields_All", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 2, "GD_Itempools.ShieldPools.Pool_Shields_All", "VeryRare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 4, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 5, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_FeaturedItem", 6, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "VeryRare", "Minus", 1)
                
            #Health now standard items
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.HealthShop.HealthShop_Items"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_Items", 0, "GD_Itempools.ShieldPools.Pool_Shields_All", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_Items", 1, "GD_Itempools.ShieldPools.Pool_Shields_All", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_Items", 2, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.HealthShop.HealthShop_Items", 3, "GD_Itempools.ClassModPools.Pool_ClassMod_All", "Uncommon", "Minus", 1)
                
            #GUNS GUNS GUNS IOTD
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 0, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 2, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols", "VeryRare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 4, "GD_Itempools.WeaponPools.Pool_Weapons_SMG", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 5, "GD_Itempools.WeaponPools.Pool_Weapons_SMG", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_SmallGuns", 6, "GD_Itempools.WeaponPools.Pool_Weapons_SMG", "VeryRare", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 0, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 1, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 2, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles", "VeryRare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 4, "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 5, "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 6, "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns", "VeryRare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 8, "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 9, "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Rifles", 10, "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles", "VeryRare", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Launchers"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Launchers", 0, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers", "Uncommon", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Launchers", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers", "Rare", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.Shoppool_FeaturedItem_WeaponMachine_Launchers", 2, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers", "VeryRare", "Minus", 1)
                
            #GUNS GUNS GUNS standard items
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Pistols"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Pistols", 0, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Pistols", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols", "Uncommon", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_AssaultRifles"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_AssaultRifles", 0, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_AssaultRifles", 1, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles", "Uncommon", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SMG"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SMG", 0, "GD_Itempools.WeaponPools.Pool_Weapons_SMG", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SMG", 1, "GD_Itempools.WeaponPools.Pool_Weapons_SMG", "Uncommon", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Shotguns"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Shotguns", 0, "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Shotguns", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns", "Uncommon", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SniperRifles"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SniperRifles", 0, "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_SniperRifles", 1, "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles", "Uncommon", "Minus", 1)
            if unrealsdk.FindObject("ItemPoolDefinition","GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Launchers"):
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Launchers", 0, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers", "Common", "Minus", 1)
                ReplacePoolWithCopyWithCustomRarity("GD_ItemPools_Shop.WeaponPools.ShopPool_Weapons_Launchers", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers", "Uncommon", "Minus", 1)
            
            #Doubles the quantities of seraph vendors
            seraphVendorChangeList = [
                ["GD_Aster_ItemPools.SeraphCrystalVendor.ShopPool_AsterSeraphGear", 16],
                ["GD_Iris_ItemPools.SeraphCrystalVendor.ShopPool_SeraphCrystalVendorPool1", 16],
                ["GD_Orchid_ItemPools.SeraphCrystalVendor.ShopPool_AllSeraphGear", 16],
                ["GD_Sage_ItemPools.SeraphCrystalVendor.ShopPool_AllSeraphGear", 8],
            ]
            for vendorPool in seraphVendorChangeList:
                if unrealsdk.FindObject("ItemPoolDefinition",vendorPool[0]):
                    vendorObject = unrealsdk.FindObject("ItemPoolDefinition",vendorPool[0])
                    vendorObject.Quantity.BaseValueConstant = vendorPool[1]
            
            additionalSeraphVendorsList = [
                ["GD_Gladiolus_Itempools.SeraphCrystalVendor.ShopPool_SeraphGear_Iris_Revised", 16],
                ["GD_Gladiolus_Itempools.SeraphCrystalVendor.ShopPool_SeraphGear_Orchid_Revised", 8],
                ["GD_Gladiolus_Itempools.SeraphCrystalVendor.ShopPool_SeraphGear_Sage_Revised", 8]
            ]
            for vendorPool in additionalSeraphVendorsList:
                if unrealsdk.FindObject("CrossDLCItemPoolDefinition",vendorPool[0]):
                    vendorObject = unrealsdk.FindObject("CrossDLCItemPoolDefinition",vendorPool[0])
                    vendorObject.Quantity.BaseValueConstant = vendorPool[1]
            
        def ExpandPoolByAmount(targetPool, numNewPools):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                targetPool
            )

            savedPoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"{poolObject.Outer}.{poolObject.Name}Saved"
            )
            
            if savedPoolObject is None:
                savedPoolObject = unrealsdk.ConstructObject(
                    Class=poolObject.Class,
                    Outer=poolObject.Outer,
                    Name=f"{poolObject.Name}Saved",
                    Template=poolObject
                )
            
            j = 0
            for item in poolObject.BalancedItems:
                j += 1
            
            bigString = "("
            littleString = "(ItmPoolDefinition=None,InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=False)"
            
            p = 0
            while p < j + numNewPools:
                bigString = bigString + littleString
                if p != j + numNewPools - 1:
                    bigString = bigString + ","
                p += 1
            bigString = bigString + ")"
            
            PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems " + bigString)

            i = 0
            while i < j:
                poolObject.BalancedItems[i].ItmPoolDefinition=savedPoolObject.BalancedItems[i].ItmPoolDefinition
                poolObject.BalancedItems[i].InvBalanceDefinition=savedPoolObject.BalancedItems[i].InvBalanceDefinition
                poolObject.BalancedItems[i].Probability.BaseValueAttribute=savedPoolObject.BalancedItems[i].Probability.BaseValueAttribute
                poolObject.BalancedItems[i].Probability.InitializationDefinition=savedPoolObject.BalancedItems[i].Probability.InitializationDefinition
                poolObject.BalancedItems[i].Probability.BaseValueScaleConstant=savedPoolObject.BalancedItems[i].Probability.BaseValueScaleConstant
                poolObject.BalancedItems[i].bDropOnDeath=savedPoolObject.BalancedItems[i].Probability.bDropOnDeath
                i += 1
                
        #Rebalances chest loot
        def FixChestLoot(fromHook = False):
            #Pool, number of new indecies to add, new pools to add
            epicPistols = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_Pistols", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Pistols_01_Common"]
            epicLongGuns = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_LongGuns", 4, "GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_01_Common", "GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_01_Common", "GD_Itempools.WeaponPools.Pool_Weapons_SMG_01_Common", "GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles_01_Common"]
            epicLaunchers = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_Launchers", 1, "GD_Itempools.WeaponPools.Pool_Weapons_Launchers_01_Common"]
            epicItems = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Items", 2, "GD_Itempools.ShieldPools.Pool_Shields_All_01_Common", "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_01_Common"]
            epicShields = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Shields", 1, "GD_Itempools.ShieldPools.Pool_Shields_All_01_Common"]
            epicGrenadeMods = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_GrenadeMods", 1, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_01_Common"]
            epicClassMods = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_ClassMods", 1, "GD_Itempools.ClassModPools.Pool_ClassMod_01_Common"]
            epicArtifacts = ["GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Artifacts", 1, "GD_Itempools.ArtifactPools.Pool_Artifacts_01_Common"]
            
            standardPistols = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Weapons_Pistols", 1, "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Pistols_07_LegendaryPlusPearl"]
            standardLongGuns = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Weapons_LongGuns", 4, "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_07_LegendaryPlusPearl", "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Shotguns_07_LegendaryPlusPearl", "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SMG_07_LegendaryPlusPearl", "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_SniperRifles_07_LegendaryPlusPearl"]
            standardLaunchers = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Weapons_Launchers", 1, "GD_Gladiolus_Itempools.WeaponPools.Pool_Weapons_Launchers_07_LegendaryPlusPearl"]
            standardItems = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Items", 3, "GD_Itempools.ShieldPools.Pool_Shields_All_06_Legendary", "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_06_Legendary", "GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary"]
            standardShields = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Shields", 1, "GD_Itempools.ShieldPools.Pool_Shields_All_06_Legendary"]
            standardGrenadeMods = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_GrenadeMods", 1, "GD_Itempools.GrenadeModPools.Pool_GrenadeMods_06_Legendary"]
            standardClassMods = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_ClassMods", 1, "GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary"]
            standardArtifacts = ["GD_Itempools.Treasure_ChestPools.Pool_WeaponChest_Artifacts", 1, "GD_Itempools.ArtifactPools.Pool_Artifacts_05_Legendary"]
            
            hyperionEndGamePistols = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_Pistols"]
            hyperionEndGameLongGuns = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_LongGuns"]
            hyperionEndGameLaunchers = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_Launchers"]
            hyperionEndGameShields = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_Shields"]
            hyperionEndGameGrenadeMods = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_GrenadeMods"]
            hyperionEndGameClassMods = ["GD_Sage_ItemPools.EndGame.Pool_HyperionChest_EndGame_ClassMods"]
            
            pirateEndGamePistols = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_Pistols"]
            pirateEndGameLongGuns = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_LongGuns"]
            pirateEndGameLaunchers = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_Launchers"]
            pirateEndGameShields = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_Shields"]
            pirateEndGameGrenadeMods = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_GrenadeMods"]
            pirateEndGameClassMods = ["GD_Orchid_ItemPools.EndGame.Pool_PirateChest_EndGame_ClassMods"]
            
            epicPoolList = [epicPistols, epicLongGuns, epicLaunchers, epicItems, epicShields, epicGrenadeMods, epicClassMods, epicArtifacts]
            standardPoolList = [standardPistols, standardLongGuns, standardLaunchers, standardItems, standardShields, standardGrenadeMods, standardClassMods, standardArtifacts]
            hyperionEndGamePoolList = [hyperionEndGamePistols, hyperionEndGameLongGuns, hyperionEndGameLaunchers, hyperionEndGameShields, hyperionEndGameGrenadeMods, hyperionEndGameClassMods]
            pirateEndGamePoolList = [pirateEndGamePistols, pirateEndGameLongGuns, pirateEndGameLaunchers, pirateEndGameShields, pirateEndGameGrenadeMods, pirateEndGameClassMods]
            
            if fromHook == False:
                #Expands the pools to be able to accomodate new entries
                for pool in epicPoolList + standardPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        ExpandPoolByAmount(pool[0], pool[1])
                
                #Adds legendaries to standard chests and whites to epic chests
                for pool in epicPoolList + standardPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        i = 0
                        j = -1
                        for item in poolObject.BalancedItems:
                            j += 1
                        while i < len(pool) - 2:
                            if unrealsdk.FindObject("ItemPoolDefinition",pool[2+i]):
                                itemObject = unrealsdk.FindObject("ItemPoolDefinition",pool[2+i])
                                poolObject.BalancedItems[j - i].ItmPoolDefinition = itemObject
                            i += 1

                #Assigns custom weights to the chest pools
                commonMinus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Minus3")
                uncommonMinus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Minus3")
                uncommonPlus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Plus3")
                rareMinus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Minus3")
                rarePlus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Plus3")
                veryRarePlus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Plus3")
                legendaryPlus3Object = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Plus3")
                
                for pool in epicPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        for item in poolObject.BalancedItems:
                            i = 0
                            while item.ItmPoolDefinition.Name[len(item.ItmPoolDefinition.Name)-(i+1)] != "_":
                                i += 1
                            rarity = item.ItmPoolDefinition.Name[-i:len(item.ItmPoolDefinition.Name)]
                            if rarity == "Common":
                                item.Probability.InitializationDefinition = commonMinus3Object
                            elif rarity == "Uncommon":
                                item.Probability.InitializationDefinition = uncommonMinus3Object
                            elif rarity == "Rare":
                                item.Probability.InitializationDefinition = rareMinus3Object
                            elif rarity == "VeryRare":
                                item.Probability.InitializationDefinition = veryRarePlus3Object
                            elif rarity == "Alien":
                                item.Probability.InitializationDefinition = veryRarePlus3Object
                            elif rarity == "Legendary" or rarity == "LegendaryPlusPearl":
                                item.Probability.InitializationDefinition = legendaryPlus3Object
                                
                for pool in standardPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        for item in poolObject.BalancedItems:
                            i = 0
                            while item.ItmPoolDefinition.Name[len(item.ItmPoolDefinition.Name)-(i+1)] != "_":
                                i += 1
                            rarity = item.ItmPoolDefinition.Name[-i:len(item.ItmPoolDefinition.Name)]
                            if rarity == "Common":
                                item.Probability.InitializationDefinition = commonMinus3Object
                            elif rarity == "Uncommon":
                                item.Probability.InitializationDefinition = uncommonMinus3Object
                            elif rarity == "Rare":
                                item.Probability.InitializationDefinition = rarePlus3Object
                            elif rarity == "VeryRare":
                                item.Probability.InitializationDefinition = veryRarePlus3Object
                            elif rarity == "Alien":
                                item.Probability.InitializationDefinition = veryRarePlus3Object
                            elif rarity == "Legendary" or rarity == "LegendaryPlusPearl":
                                item.Probability.InitializationDefinition = legendaryPlus3Object
                                
                for pool in hyperionEndGamePoolList + pirateEndGamePoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        for item in poolObject.BalancedItems:
                            i = 0
                            while item.ItmPoolDefinition.Name[len(item.ItmPoolDefinition.Name)-(i+1)] != "_":
                                i += 1
                            rarity = item.ItmPoolDefinition.Name[-i:len(item.ItmPoolDefinition.Name)]
                            if rarity == "Rare":
                                item.Probability.InitializationDefinition = commonMinus3Object
                            elif rarity == "VeryRare":
                                item.Probability.InitializationDefinition = uncommonPlus3Object
                            elif rarity == "Alien":
                                item.Probability.InitializationDefinition = uncommonPlus3Object
                            elif rarity == "Legendary" or rarity == "LegendaryPlusPearl":
                                item.Probability.InitializationDefinition = rarePlus3Object
                
                #Applies the gamestage sheduling for uncommon class mods to the class mod pool for epic chests
                classModPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Treasure_ChestPools.Pool_EpicChest_ClassMods")
                scheduleObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.Scheduling.LootSchedule_ClassMod_02_Uncommon")
                classModPoolObject.MinGameStageRequirement = scheduleObject
            
            else:
                #Sets all the probability scaling constants
                for pool in standardPoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        j = 0
                        for item in poolObject.BalancedItems:
                            item.Probability.BaseValueScaleConstant = 1
                            i = 0
                            while item.ItmPoolDefinition.Name[len(item.ItmPoolDefinition.Name)-(i+1)] != "_":
                                i += 1
                            rarity = item.ItmPoolDefinition.Name[-i:len(item.ItmPoolDefinition.Name)]
                            if rarity == "Common":
                                item.Probability.BaseValueScaleConstant = self.weaponChestCommonScale
                            elif rarity == "Uncommon":
                                item.Probability.BaseValueScaleConstant = self.weaponChestUncommonScale
                            elif rarity == "Alien":
                                item.Probability.BaseValueScaleConstant = (1-((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                                poolObject.BalancedItems[j - 1].Probability.BaseValueScaleConstant = (1+((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                            j += 1
                
                for pool in epicPoolList + hyperionEndGamePoolList + pirateEndGamePoolList:
                    if unrealsdk.FindObject("ItemPoolDefinition", pool[0]):
                        poolObject = unrealsdk.FindObject("ItemPoolDefinition", pool[0])
                        j = 0
                        for item in poolObject.BalancedItems:
                            item.Probability.BaseValueScaleConstant = 1
                            i = 0
                            while item.ItmPoolDefinition.Name[len(item.ItmPoolDefinition.Name)-(i+1)] != "_":
                                i += 1
                            rarity = item.ItmPoolDefinition.Name[-i:len(item.ItmPoolDefinition.Name)]
                            if rarity == "Alien":
                                item.Probability.BaseValueScaleConstant = (1-((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                                poolObject.BalancedItems[j - 1].Probability.BaseValueScaleConstant = (1+((1/(self.numOfPurplesPerETech+1))*(self.numOfPurplesPerETech-1)))/2
                            j += 1
        
        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            FixChestLoot()
        
        #Creates and assigns a new loot pool to a behavior_spawnitems
        def AssignNewLootPoolBehavior(behavior, basePool, itemClass, item, index, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
            #Sets the custom pool to have the item as its item
            itemObject = unrealsdk.FindObject(itemClass,item)
            PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
            if itemClass == "WeaponBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "InventoryBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "KeyedItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                
            elif itemClass == "ItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
            
            behaviorObject.ItemPoolList[index].ItemPool = poolObject
            
        #Creates and assigns a new loot pool to a behavior_spawnitems 
        def AssignNewLootPoolBehaviorForMultiplayer(behavior, basePool, itemClass, item, index, indexOffset, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
            #Sets the custom pool to have the item as its item
            itemObject = unrealsdk.FindObject(itemClass,item)
            PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
            if itemClass == "WeaponBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "InventoryBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "KeyedItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                
            elif itemClass == "ItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
            
            behaviorObject.ItemPoolList[index].ItemPool = poolObject
            behaviorObject.ItemPoolList[index + indexOffset].ItemPool = poolObject
            behaviorObject.ItemPoolList[index + (indexOffset * 2)].ItemPool = poolObject
            behaviorObject.ItemPoolList[index + (indexOffset * 3)].ItemPool = poolObject
            
        #Creates and assigns a new loot pool to an aipawn
        def AssignNewLootPoolPawn(pawn, basePool, itemClass, item, index, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
            #Sets the custom pool to have the item as its item
            itemObject = unrealsdk.FindObject(itemClass,item)
            PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
            if itemClass == "WeaponBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "InventoryBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "KeyedItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                
            elif itemClass == "ItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
            
            pawnObject.DefaultItemPoolList[index].ItemPool = poolObject
        
        #Creates and assigns a new loot pool to a behavior_spawnitems 
        def AssignNewLootPoolPawnForMultiplayer(pawn, basePool, itemClass, item, index, indexOffset, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
            #Sets the custom pool to have the item as its item
            itemObject = unrealsdk.FindObject(itemClass,item)
            PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
            if itemClass == "WeaponBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "InventoryBalanceDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                poolObject.BalancedItems[0].ItmPoolDefinition = None
                
            elif itemClass == "KeyedItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                
            elif itemClass == "ItemPoolDefinition":
                poolObject.BalancedItems[0].InvBalanceDefinition = None
                poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
            
            pawnObject.DefaultItemPoolList[index].ItemPool = poolObject
            pawnObject.DefaultItemPoolList[index + indexOffset].ItemPool = poolObject
            pawnObject.DefaultItemPoolList[index + (indexOffset * 2)].ItemPool = poolObject
            pawnObject.DefaultItemPoolList[index + (indexOffset * 3)].ItemPool = poolObject
        
        #Creates and assigns a new loot pool to a loot pool list
        def AssignNewLootPoolList(targetList, basePool, itemClass, item, index, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
                #Sets the custom pool to have the item as its item
                itemObject = unrealsdk.FindObject(itemClass,item)
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
                if itemClass == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                    
                elif itemClass == "ItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                    
                unrealsdk.KeepAlive(poolObject)
            
            listObject.ItemPools[index].ItemPool = poolObject
            
        #Creates and assigns a new loot pool to a loot pool list
        def AssignNewLootPoolList3Items(targetList, basePool, itemClass1, item1, itemClass2, item2, itemClass3, item3, index, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
                #Sets the custom pool to have the items as its items
                itemObject1 = unrealsdk.FindObject(itemClass1,item1)
                itemObject2 = unrealsdk.FindObject(itemClass2,item2)
                itemObject3 = unrealsdk.FindObject(itemClass3,item3)
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True),(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True),(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
                if itemClass1 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject1
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass1 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject1
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass1 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject1
                    
                elif itemClass1 == "ItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject1
                
                if itemClass2 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = itemObject2
                    poolObject.BalancedItems[1].ItmPoolDefinition = None
                    
                elif itemClass2 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = itemObject2
                    poolObject.BalancedItems[1].ItmPoolDefinition = None
                    
                elif itemClass2 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = None
                    poolObject.BalancedItems[1].ItmPoolDefinition = itemObject2
                    
                elif itemClass2 == "ItemPoolDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = None
                    poolObject.BalancedItems[1].ItmPoolDefinition = itemObject2
                
                if itemClass3 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = itemObject3
                    poolObject.BalancedItems[2].ItmPoolDefinition = None
                    
                elif itemClass3 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = itemObject3
                    poolObject.BalancedItems[2].ItmPoolDefinition = None
                    
                elif itemClass3 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = None
                    poolObject.BalancedItems[2].ItmPoolDefinition = itemObject3
                    
                elif itemClass3 == "ItemPoolDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = None
                    poolObject.BalancedItems[2].ItmPoolDefinition = itemObject3
                    
                unrealsdk.KeepAlive(poolObject)
            
            listObject.ItemPools[index].ItemPool = poolObject
        
        #Creates and assigns a new loot pool to a behavior_spawnitems 
        def AssignNewLootPoolListForMultiplayer(targetList, basePool, itemClass, item, index, indexOffset, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
                #Sets the custom pool to have the item as its item
                itemObject = unrealsdk.FindObject(itemClass,item)
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
                if itemClass == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                    
                elif itemClass == "ItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject
                
                unrealsdk.KeepAlive(poolObject)
            
            listObject.ItemPools[index].ItemPool = poolObject
            listObject.ItemPools[index + indexOffset].ItemPool = poolObject
            listObject.ItemPools[index + (indexOffset * 2)].ItemPool = poolObject
            listObject.ItemPools[index + (indexOffset * 3)].ItemPool = poolObject
        
        #Creates and assigns a new loot pool to a loot pool list
        def AssignNewLootPoolList3ItemsForMultiplayer(targetList, basePool, itemClass1, item1, itemClass2, item2, itemClass3, item3, index, indexOffset, nameOverride = "notOverridden"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )
            basePoolObject = unrealsdk.FindObject(
                "ItemPoolDefinition",
                basePool
            )
            
            #Checks to see if the custom pool already exists
            poolObject = unrealsdk.FindObject(
                "ItemPoolDefinition", 
                f"GD_Itempools.Runnables.{basePoolObject.Name}Custom{index}{nameOverride}"
            )
            
            #Create new loot pool if it doesn't exist
            if poolObject is None:
                poolObject = unrealsdk.ConstructObject(
                    Class=basePoolObject.Class,
                    Outer=basePoolObject.Outer,
                    Name=f"{basePoolObject.Name}Custom{index}{nameOverride}",
                    Template=basePoolObject
                )
            
                #Sets the custom pool to have the items as its items
                itemObject1 = unrealsdk.FindObject(itemClass1,item1)
                itemObject2 = unrealsdk.FindObject(itemClass2,item2)
                itemObject3 = unrealsdk.FindObject(itemClass3,item3)
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems ((ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True),(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True),(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True))")
                if itemClass1 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject1
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass1 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = itemObject1
                    poolObject.BalancedItems[0].ItmPoolDefinition = None
                    
                elif itemClass1 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject1
                    
                elif itemClass1 == "ItemPoolDefinition":
                    poolObject.BalancedItems[0].InvBalanceDefinition = None
                    poolObject.BalancedItems[0].ItmPoolDefinition = itemObject1
                
                if itemClass2 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = itemObject2
                    poolObject.BalancedItems[1].ItmPoolDefinition = None
                    
                elif itemClass2 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = itemObject2
                    poolObject.BalancedItems[1].ItmPoolDefinition = None
                    
                elif itemClass2 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = None
                    poolObject.BalancedItems[1].ItmPoolDefinition = itemObject2
                    
                elif itemClass2 == "ItemPoolDefinition":
                    poolObject.BalancedItems[1].InvBalanceDefinition = None
                    poolObject.BalancedItems[1].ItmPoolDefinition = itemObject2
                
                if itemClass3 == "WeaponBalanceDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = itemObject3
                    poolObject.BalancedItems[2].ItmPoolDefinition = None
                    
                elif itemClass3 == "InventoryBalanceDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = itemObject3
                    poolObject.BalancedItems[2].ItmPoolDefinition = None
                    
                elif itemClass3 == "KeyedItemPoolDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = None
                    poolObject.BalancedItems[2].ItmPoolDefinition = itemObject3
                    
                elif itemClass3 == "ItemPoolDefinition":
                    poolObject.BalancedItems[2].InvBalanceDefinition = None
                    poolObject.BalancedItems[2].ItmPoolDefinition = itemObject3
                    
                unrealsdk.KeepAlive(poolObject)
            
            listObject.ItemPools[index].ItemPool = poolObject
            listObject.ItemPools[index + indexOffset].ItemPool = poolObject
            listObject.ItemPools[index + (indexOffset * 2)].ItemPool = poolObject
            listObject.ItemPools[index + (indexOffset * 3)].ItemPool = poolObject

        #Expands the array of loot pools in a behavior to have 3 indecies
        def ExpandPoolArrayBehavior3Indecies(behavior, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )

            savedBehaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems", 
                f"{self.behaviorObject.Outer}.{self.behaviorObject.Name}Saved"
            )
            
            if savedBehaviorObject is None:
                savedBehaviorObject = unrealsdk.ConstructObject(
                    Class=self.behaviorObject.Class,
                    Outer=self.behaviorObject.Outer,
                    Name=f"{self.behaviorObject.Name}Saved",
                    Template=self.behaviorObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.behaviorObject)} ItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.behaviorObject.ItemPoolList[i].ItemPool=savedBehaviorObject.ItemPoolList[i].ItemPool
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute
                self.behaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition=savedBehaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
                
        #Expands the array of loot pools in a behavior to have 8 indecies
        def ExpandPoolArrayBehavior8Indecies(behavior, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )

            savedBehaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems", 
                f"{self.behaviorObject.Outer}.{self.behaviorObject.Name}Saved"
            )
            
            if savedBehaviorObject is None:
                savedBehaviorObject = unrealsdk.ConstructObject(
                    Class=self.behaviorObject.Class,
                    Outer=self.behaviorObject.Outer,
                    Name=f"{self.behaviorObject.Name}Saved",
                    Template=self.behaviorObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.behaviorObject)} ItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.behaviorObject.ItemPoolList[i].ItemPool=savedBehaviorObject.ItemPoolList[i].ItemPool
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute
                self.behaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition=savedBehaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
                
        #Expands the array of loot pools in a behavior to have 9 indecies
        def ExpandPoolArrayBehavior9Indecies(behavior, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )

            savedBehaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems", 
                f"{self.behaviorObject.Outer}.{self.behaviorObject.Name}Saved"
            )
            
            if savedBehaviorObject is None:
                savedBehaviorObject = unrealsdk.ConstructObject(
                    Class=self.behaviorObject.Class,
                    Outer=self.behaviorObject.Outer,
                    Name=f"{self.behaviorObject.Name}Saved",
                    Template=self.behaviorObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.behaviorObject)} ItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.behaviorObject.ItemPoolList[i].ItemPool=savedBehaviorObject.ItemPoolList[i].ItemPool
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute
                self.behaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition=savedBehaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition
                self.behaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in an AIPawn to have 2 indecies
        def ExpandPoolArrayPawn2Indecies(pawn, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{self.pawnObject.Outer}.{self.pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=self.pawnObject.Class,
                    Outer=self.pawnObject.Outer,
                    Name=f"{self.pawnObject.Name}Saved",
                    Template=self.pawnObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.pawnObject)} DefaultItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in an AIPawn to have 3 indecies
        def ExpandPoolArrayPawn3Indecies(pawn, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{self.pawnObject.Outer}.{self.pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=self.pawnObject.Class,
                    Outer=self.pawnObject.Outer,
                    Name=f"{self.pawnObject.Name}Saved",
                    Template=self.pawnObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.pawnObject)} DefaultItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in an AIPawn to have 4 indecies
        def ExpandPoolArrayPawn4Indecies(pawn, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{self.pawnObject.Outer}.{self.pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=self.pawnObject.Class,
                    Outer=self.pawnObject.Outer,
                    Name=f"{self.pawnObject.Name}Saved",
                    Template=self.pawnObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.pawnObject)} DefaultItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in an AIPawn to have 5 indecies
        def ExpandPoolArrayPawn5Indecies(pawn, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{self.pawnObject.Outer}.{self.pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=self.pawnObject.Class,
                    Outer=self.pawnObject.Outer,
                    Name=f"{self.pawnObject.Name}Saved",
                    Template=self.pawnObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.pawnObject)} DefaultItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in an AIPawn to have 6 indecies
        def ExpandPoolArrayPawn6Indecies(pawn, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{self.pawnObject.Outer}.{self.pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=self.pawnObject.Class,
                    Outer=self.pawnObject.Outer,
                    Name=f"{self.pawnObject.Name}Saved",
                    Template=self.pawnObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.pawnObject)} DefaultItemPoolList ((ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                self.pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in a item pool list to have 22 indecies
        def ExpandPoolArrayList22Indecies(targetList, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )

            savedListObject = unrealsdk.FindObject(
                "ItemPoolListDefinition", 
                f"{self.listObject.Outer}.{self.listObject.Name}Saved"
            )
            
            if savedListObject is None:
                savedListObject = unrealsdk.ConstructObject(
                    Class=self.listObject.Class,
                    Outer=self.listObject.Outer,
                    Name=f"{self.listObject.Name}Saved",
                    Template=self.listObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.listObject)} ItemPools ((ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.listObject.ItemPools[i].ItemPool=savedListObject.ItemPools[i].ItemPool
                self.listObject.ItemPools[i].PoolProbability.BaseValueConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueConstant
                self.listObject.ItemPools[i].PoolProbability.BaseValueAttribute=savedListObject.ItemPools[i].PoolProbability.BaseValueAttribute
                self.listObject.ItemPools[i].PoolProbability.InitializationDefinition=savedListObject.ItemPools[i].PoolProbability.InitializationDefinition
                self.listObject.ItemPools[i].PoolProbability.BaseValueScaleConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Expands the array of loot pools in a item pool list to have 23 indecies
        def ExpandPoolArrayList23Indecies(targetList, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )

            savedListObject = unrealsdk.FindObject(
                "ItemPoolListDefinition", 
                f"{self.listObject.Outer}.{self.listObject.Name}Saved"
            )
            
            if savedListObject is None:
                savedListObject = unrealsdk.ConstructObject(
                    Class=self.listObject.Class,
                    Outer=self.listObject.Outer,
                    Name=f"{self.listObject.Name}Saved",
                    Template=self.listObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.listObject)} ItemPools ((ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.listObject.ItemPools[i].ItemPool=savedListObject.ItemPools[i].ItemPool
                self.listObject.ItemPools[i].PoolProbability.BaseValueConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueConstant
                self.listObject.ItemPools[i].PoolProbability.BaseValueAttribute=savedListObject.ItemPools[i].PoolProbability.BaseValueAttribute
                self.listObject.ItemPools[i].PoolProbability.InitializationDefinition=savedListObject.ItemPools[i].PoolProbability.InitializationDefinition
                self.listObject.ItemPools[i].PoolProbability.BaseValueScaleConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueScaleConstant
                i += 1
                
        #Expands the array of loot pools in a item pool list to have 37 indecies
        def ExpandPoolArrayList37Indecies(targetList, originalLength):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            self.listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )

            savedListObject = unrealsdk.FindObject(
                "ItemPoolListDefinition", 
                f"{self.listObject.Outer}.{self.listObject.Name}Saved"
            )
            
            if savedListObject is None:
                savedListObject = unrealsdk.ConstructObject(
                    Class=self.listObject.Class,
                    Outer=self.listObject.Outer,
                    Name=f"{self.listObject.Name}Saved",
                    Template=self.listObject
                )
            
            PC.ServerRCon(f"set {PC.PathName(self.listObject)} ItemPools ((ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_ChubbieUniques',PoolProbability=(BaseValueConstant=0.200000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)))")
            
            i = 0
            while i < originalLength:
                self.listObject.ItemPools[i].ItemPool=savedListObject.ItemPools[i].ItemPool
                self.listObject.ItemPools[i].PoolProbability.BaseValueConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueConstant
                self.listObject.ItemPools[i].PoolProbability.BaseValueAttribute=savedListObject.ItemPools[i].PoolProbability.BaseValueAttribute
                self.listObject.ItemPools[i].PoolProbability.InitializationDefinition=savedListObject.ItemPools[i].PoolProbability.InitializationDefinition
                self.listObject.ItemPools[i].PoolProbability.BaseValueScaleConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Special pools are ones like skins that come out of the crowded pools and will have their own set drop rates
        def AutoExpandPoolArrayBehaviorForMultiplayer(behavior, numNewPools, numSpecialPools):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )

            savedBehaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems", 
                f"{behaviorObject.Outer}.{behaviorObject.Name}Saved"
            )
            
            if savedBehaviorObject is None:
                savedBehaviorObject = unrealsdk.ConstructObject(
                    Class=behaviorObject.Class,
                    Outer=behaviorObject.Outer,
                    Name=f"{behaviorObject.Name}Saved",
                    Template=behaviorObject
                )
            
            j = 0
            for pool in behaviorObject.ItemPoolList:
                j += 1
            
            bigString = "("
            littleString = "(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
            
            p = 0
            while p < ((j - (-numSpecialPools + 1)) + (numNewPools * 4)):
                bigString = bigString + littleString
                if p != (((j - (-numSpecialPools + 1)) + (numNewPools * 4)) - 1):
                    bigString = bigString + ","
                p += 1
            bigString = bigString + ")"
            
            PC.ServerRCon(f"set {PC.PathName(behaviorObject)} ItemPoolList " + bigString)

            i = 0
            while i < j:
                behaviorObject.ItemPoolList[i].ItemPool=savedBehaviorObject.ItemPoolList[i].ItemPool
                behaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant
                behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute
                behaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition=savedBehaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition
                behaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
                
        #Special pools are ones like skins that come out of the crowded pools and will have their own set drop rates
        def AutoExpandPoolArrayPawnForMultiplayer(pawn, numNewPools, numSpecialPools):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )

            savedPawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition", 
                f"{pawnObject.Outer}.{pawnObject.Name}Saved"
            )
            
            if savedPawnObject is None:
                savedPawnObject = unrealsdk.ConstructObject(
                    Class=pawnObject.Class,
                    Outer=pawnObject.Outer,
                    Name=f"{pawnObject.Name}Saved",
                    Template=pawnObject
                )
            
            j = 0
            for pool in pawnObject.DefaultItemPoolList:
                j += 1
            
            bigString = "("
            littleString = "(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
            
            p = 0
            while p < ((j - (-numSpecialPools + 1)) + (numNewPools * 4)):
                bigString = bigString + littleString
                if p != (((j - (-numSpecialPools + 1)) + (numNewPools * 4)) - 1):
                    bigString = bigString + ","
                p += 1
            bigString = bigString + ")"
            
            PC.ServerRCon(f"set {PC.PathName(pawnObject)} DefaultItemPoolList " + bigString)

            i = 0
            while i < j:
                pawnObject.DefaultItemPoolList[i].ItemPool=savedPawnObject.DefaultItemPoolList[i].ItemPool
                pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition=savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant=savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        #Special pools are ones like skins that come out of the crowded pools and will have their own set drop rates
        def AutoExpandPoolArrayListForMultiplayer(targetList, numNewPools, numSpecialPools):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )

            savedListObject = unrealsdk.FindObject(
                "ItemPoolListDefinition", 
                f"{listObject.Outer}.{listObject.Name}Saved"
            )
            
            if savedListObject is None:
                savedListObject = unrealsdk.ConstructObject(
                    Class=listObject.Class,
                    Outer=listObject.Outer,
                    Name=f"{listObject.Name}Saved",
                    Template=listObject
                )
            
            j = 0
            for pool in listObject.ItemPools:
                j += 1
            
            bigString = "("
            littleString = "(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
            
            p = 0
            while p < ((j - (-numSpecialPools + 1)) + (numNewPools * 4)):
                bigString = bigString + littleString
                if p != (((j - (-numSpecialPools + 1)) + (numNewPools * 4)) - 1):
                    bigString = bigString + ","
                p += 1
            bigString = bigString + ")"
            
            PC.ServerRCon(f"set {PC.PathName(listObject)} ItemPools " + bigString)

            i = 0
            while i < j:
                listObject.ItemPools[i].ItemPool=savedListObject.ItemPools[i].ItemPool
                listObject.ItemPools[i].PoolProbability.BaseValueConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueConstant
                listObject.ItemPools[i].PoolProbability.BaseValueAttribute=savedListObject.ItemPools[i].PoolProbability.BaseValueAttribute
                listObject.ItemPools[i].PoolProbability.InitializationDefinition=savedListObject.ItemPools[i].PoolProbability.InitializationDefinition
                listObject.ItemPools[i].PoolProbability.BaseValueScaleConstant=savedListObject.ItemPools[i].PoolProbability.BaseValueScaleConstant
                i += 1
        
        def ApplyMultiplayerScalingBehavior(behavior, startingIndex, numItems, rate = "GD_Itempools.DropWeights.DropODDS_BossUniques"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor
            numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers

            behaviorObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                behavior
            )
            
            rateObject = unrealsdk.FindObject(
                "AttributeDefinition",
                rate
            )
            
            i = startingIndex
            while i < (startingIndex + (numItems * 4)):
                behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute = rateObject
                i += 1
                
            j = (startingIndex + numItems)
            while j < (startingIndex + (numItems * 4)):
                behaviorObject.ItemPoolList[j].PoolProbability.BaseValueScaleConstant = 0
                j += 1
                
            if numPlayers >= 2:
                k = (startingIndex + numItems)
                while k < (startingIndex + (numItems * 2)):
                    behaviorObject.ItemPoolList[k].PoolProbability.BaseValueScaleConstant = 1
                    k += 1
                
            if numPlayers >= 3:
                l = (startingIndex + (numItems * 2))
                while l < (startingIndex + (numItems * 3)):
                    behaviorObject.ItemPoolList[l].PoolProbability.BaseValueScaleConstant = 1
                    l += 1
                
            if numPlayers >= 4:
                m = (startingIndex + (numItems * 3))
                while m < (startingIndex + (numItems * 4)):
                    behaviorObject.ItemPoolList[m].PoolProbability.BaseValueScaleConstant = 1
                    m += 1
                    
        def ApplyMultiplayerScalingPawn(pawn, startingIndex, numItems, rate = "GD_Itempools.DropWeights.DropODDS_BossUniques"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor
            numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers

            pawnObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                pawn
            )
            
            rateObject = unrealsdk.FindObject(
                "AttributeDefinition",
                rate
            )
            
            i = startingIndex
            while i < (startingIndex + (numItems * 4)):
                pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute = rateObject
                i += 1
                
            j = (startingIndex + numItems)
            while j < (startingIndex + (numItems * 4)):
                pawnObject.DefaultItemPoolList[j].PoolProbability.BaseValueScaleConstant = 0
                j += 1
                
            if numPlayers >= 2:
                k = (startingIndex + numItems)
                while k < (startingIndex + (numItems * 2)):
                    pawnObject.DefaultItemPoolList[k].PoolProbability.BaseValueScaleConstant = 1
                    k += 1
                
            if numPlayers >= 3:
                l = (startingIndex + (numItems * 2))
                while l < (startingIndex + (numItems * 3)):
                    pawnObject.DefaultItemPoolList[l].PoolProbability.BaseValueScaleConstant = 1
                    l += 1
                
            if numPlayers >= 4:
                m = (startingIndex + (numItems * 3))
                while m < (startingIndex + (numItems * 4)):
                    pawnObject.DefaultItemPoolList[m].PoolProbability.BaseValueScaleConstant = 1
                    m += 1
        
        def ApplyMultiplayerScalingList(targetList, startingIndex, numItems, rate = "GD_Itempools.DropWeights.DropODDS_BossUniques"):
            #The player controller
            PC = GetEngine().GamePlayers[0].Actor
            numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers

            listObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                targetList
            )
            
            rateObject = unrealsdk.FindObject(
                "AttributeDefinition",
                rate
            )
            
            i = startingIndex
            while i < (startingIndex + (numItems * 4)):
                listObject.ItemPools[i].PoolProbability.BaseValueAttribute = rateObject
                i += 1
                
            j = (startingIndex + numItems)
            while j < (startingIndex + (numItems * 4)):
                listObject.ItemPools[j].PoolProbability.BaseValueScaleConstant = 0
                j += 1
                
            if numPlayers >= 2:
                k = (startingIndex + numItems)
                while k < (startingIndex + (numItems * 2)):
                    listObject.ItemPools[k].PoolProbability.BaseValueScaleConstant = 1
                    k += 1
                
            if numPlayers >= 3:
                l = (startingIndex + (numItems * 2))
                while l < (startingIndex + (numItems * 3)):
                    listObject.ItemPools[l].PoolProbability.BaseValueScaleConstant = 1
                    l += 1
                
            if numPlayers >= 4:
                m = (startingIndex + (numItems * 3))
                while m < (startingIndex + (numItems * 4)):
                    listObject.ItemPools[m].PoolProbability.BaseValueScaleConstant = 1
                    m += 1
        
        #Fixes Bunker's loot by uncrowding the pool while maintaining the drop rate of the head
        def FixBunkerLoot():
            bunkerObject = unrealsdk.FindObject("Behavior_SpawnItems", "GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4")
            if bunkerObject.ItemPoolList[0].PoolProbability.BaseValueConstant == 0:
                AutoExpandPoolArrayBehaviorForMultiplayer("GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4", 2, 1)
                AssignNewLootPoolBehavior("GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4", "GD_Itempools.Runnables.Pool_Bunker", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Head2", 0)
                AssignNewLootPoolBehaviorForMultiplayer("GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4", "GD_Itempools.Runnables.Pool_Bunker", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Hyperion_5_Bitch", 1, 2)
                AssignNewLootPoolBehaviorForMultiplayer("GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4", "GD_Itempools.Runnables.Pool_Bunker", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal", 2, 2)
            
            bunkerObject.ItemPoolList[0].PoolProbability.BaseValueConstant = 0.033333
            bunkerObject.ItemPoolList[0].PoolProbability.BaseValueAttribute = None
            
            ApplyMultiplayerScalingBehavior("GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_4", 1, 2)

            bunkerObject.ItemScatterOffset = (50, 50, 0,)
        
        #Fixes the sheriff's loot by uncrowding the badge and the law 
        def FixSheriffLoot():
            sheriffObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Sheriff.Balance.PawnBalance_Sheriff")
            if sheriffObject.DefaultItemPoolList[2].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Sheriff"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Sheriff.Balance.PawnBalance_Sheriff", 2, 0)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Sheriff.Balance.PawnBalance_Sheriff", "GD_Itempools.Runnables.Pool_Sheriff", "InventoryBalanceDefinition", "GD_Artifacts.A_Item_Unique.A_Sheriff", 2, 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Sheriff.Balance.PawnBalance_Sheriff", "GD_Itempools.Runnables.Pool_Sheriff", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Unique.Pistol_Jakobs_3_Law", 3, 2)
            
            ApplyMultiplayerScalingPawn("GD_Population_Sheriff.Balance.PawnBalance_Sheriff", 2, 2, "GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

        #Fixes Wilhelm's loot by uncrowding the logan's gun and the rolling thunder
        def FixWilhelmLoot():
            wilhelmObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm")
            if wilhelmObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Wilhelm"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm", 2, 0)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm", "GD_Itempools.Runnables.Pool_Wilhelm", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Hyperion_5_LogansGun", 1, 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm", "GD_Itempools.Runnables.Pool_Wilhelm", "InventoryBalanceDefinition", "GD_GrenadeMods.A_Item_Legendary.GM_RollingThunder", 2, 2)
                
            ApplyMultiplayerScalingPawn("GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm", 1, 2)
        
        #Fixes the Black Queen's loot by moving the nukem from boss uniques chances to boss uniques rare spawn monster chances
        def FixBlackQueenLoot():
            blackQueenObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantBlackQueen")
            if blackQueenObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_BlackQueen"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantBlackQueen", 1, 0)
                AssignNewLootPoolPawn("GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantBlackQueen", "GD_Itempools.Runnables.Pool_SpiderantSkin", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.RedPattern", 0)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantBlackQueen", "GD_Itempools.Runnables.Pool_BlackQueen", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Torgue_5_Nukem", 1, 1)
            
            ApplyMultiplayerScalingPawn("GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantBlackQueen", 1, 1, "GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
            
            rareSkinRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_RareDropSkin")
            blackQueenObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = rareSkinRateObject
        
        #Fixes Captain Flynt's loot by decrowding the thunderball fists and his cosmetic
        def FixFlyntLoot():
            captFlyntObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Nomad.Balance.Unique.PawnBalance_Flynt")
            if captFlyntObject.DefaultItemPoolList[2].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_CaptFlynt"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_Flynt", 1, 1)
                AssignNewLootPoolPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_Flynt", "GD_Itempools.Runnables.Pool_CaptFlynt", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.OrangePattern", 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_Flynt", "GD_Itempools.Runnables.Pool_CaptFlynt", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Maliwan_5_ThunderballFists", 4, 1)
            
            ApplyMultiplayerScalingPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_Flynt", 4, 1)
            
            captFlyntObject.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.05
            captFlyntObject.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
        
        #Fixes Flynt's Son's loot by decrowding the thunderball fists and his cosmetic
        def FixFlyntSonLoot():
            flyntSonObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_FlyntSon.Population.PawnBalance_FlyntSon")
            if flyntSonObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_CaptFlynt"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_FlyntSon.Population.PawnBalance_FlyntSon", 1, 1)
                AssignNewLootPoolPawn("GD_FlyntSon.Population.PawnBalance_FlyntSon", "GD_Itempools.Runnables.Pool_CaptFlynt", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.OrangePattern", 1)
                AssignNewLootPoolPawnForMultiplayer("GD_FlyntSon.Population.PawnBalance_FlyntSon", "GD_Itempools.Runnables.Pool_CaptFlynt", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Maliwan_5_ThunderballFists", 3, 1)
            
            ApplyMultiplayerScalingPawn("GD_FlyntSon.Population.PawnBalance_FlyntSon", 3, 1)
            
            flyntSonObject.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.05
            flyntSonObject.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
            
            flyntSonObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_FlyntSon.Population.PawnBalance_FlyntSon_Run")
            if flyntSonObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_CaptFlynt"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_FlyntSon.Population.PawnBalance_FlyntSon_Run", 1, 1)
                AssignNewLootPoolPawn("GD_FlyntSon.Population.PawnBalance_FlyntSon_Run", "GD_Itempools.Runnables.Pool_CaptFlynt", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.OrangePattern", 1)
                AssignNewLootPoolPawnForMultiplayer("GD_FlyntSon.Population.PawnBalance_FlyntSon_Run", "GD_Itempools.Runnables.Pool_CaptFlynt", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Maliwan_5_ThunderballFists", 4, 1)
            
            ApplyMultiplayerScalingPawn("GD_FlyntSon.Population.PawnBalance_FlyntSon_Run", 4, 1)
            
            flyntSonObject.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.05
            flyntSonObject.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
            
        #Fixes Saturn's and Digi Saturn's loot by decrowding the hive, invader, and their cosmetics
        def FixSaturnLoot(isDigi):
            if isDigi == False:
                saturnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant")
                if saturnObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Talos"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", 2, 1)
                    AssignNewLootPoolPawn("GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", "GD_Itempools.Runnables.Pool_Talos", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.YellowPattern", 1)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", "GD_Itempools.Runnables.Pool_Talos", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_3_TheHive", 2, 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", "GD_Itempools.Runnables.Pool_Talos", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Hyperion_5_Invader", 3, 2)
                    
                ApplyMultiplayerScalingPawn("GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", 2, 2)

                saturnObject.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.033333
                saturnObject.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
            
            elif isDigi == True:
                saturnDigiObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi")
                if saturnDigiObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Talos"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi", 2, 1)
                    AssignNewLootPoolPawn("GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi", "GD_Itempools.Runnables.Pool_Talos", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.YellowPattern", 1)
                    AssignNewLootPoolPawnForMultiplayer("GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi", "GD_Itempools.Runnables.Pool_Talos", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_3_TheHive", 2, 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi", "GD_Itempools.Runnables.Pool_Talos", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Hyperion_5_Invader", 3, 2)
                    
                ApplyMultiplayerScalingPawn("GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi", 2, 2)

                saturnDigiObject.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.033333
                saturnDigiObject.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
            
        #Fixes Ultimate Badass Varkid's loot by decrowding the quasar and its cosmetics
        def FixUltimateBadassVarkidLoot():
            ultimateBadassVarkidObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass")
            if ultimateBadassVarkidObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_UltimateBadassVarkid"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass", 1, 1)
                AssignNewLootPoolPawn("GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass", "GD_Itempools.Runnables.Pool_UltimateBadassVarkid", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.YellowNinja", 0)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass", "GD_Itempools.Runnables.Pool_UltimateBadassVarkid", "InventoryBalanceDefinition", "GD_GrenadeMods.A_Item_Legendary.GM_Quasar", 1, 1)
                
            ApplyMultiplayerScalingPawn("GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass", 1, 1, "GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
            
            ultimateBadassVarkidObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.0099
            ultimateBadassVarkidObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
            
        #Fixes Son of Mothrakk's and Rakkanoth's loot by decrowding the skullmasher and their cosmetic
        def FixSonOfMothrakkLoot(isRakkanoth):
            if isRakkanoth == False:
                sonOfMothrakkObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk")
                if sonOfMothrakkObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_SonOfMothrakk"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk", 1, 1)
                    AssignNewLootPoolPawn("GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk", "GD_Itempools.Runnables.Pool_SonOfMothrakk", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.BlueNinja", 0)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk", "GD_Itempools.Runnables.Pool_SonOfMothrakk", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Jakobs_5_Skullmasher", 1, 1)
                
                ApplyMultiplayerScalingPawn("GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk", 1, 1)
                sonOfMothrakkObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.05
                sonOfMothrakkObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
            
            elif isRakkanoth == True:
                rakkanothObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Sage_SM_DahliaMurderData.Population.PawnBalance_Sage_DahliaMurder_Creature")
                if rakkanothObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_SonOfMothrakk"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Sage_SM_DahliaMurderData.Population.PawnBalance_Sage_DahliaMurder_Creature", 1, 1)
                    AssignNewLootPoolPawn("GD_Sage_SM_DahliaMurderData.Population.PawnBalance_Sage_DahliaMurder_Creature", "GD_Itempools.Runnables.Pool_SonOfMothrakk", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.BlueNinja", 0)
                    AssignNewLootPoolPawnForMultiplayer("GD_Sage_SM_DahliaMurderData.Population.PawnBalance_Sage_DahliaMurder_Creature", "GD_Itempools.Runnables.Pool_SonOfMothrakk", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Jakobs_5_Skullmasher", 1, 1)
                
                ApplyMultiplayerScalingPawn("GD_Sage_SM_DahliaMurderData.Population.PawnBalance_Sage_DahliaMurder_Creature", 1, 1, "GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
                rakkanothObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.05
                rakkanothObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
                
        #Fixes Dukino's Mom's and Digi Dukino's Mom's loot by decrowding the mongol and her cosmetics
        def FixDukinosMomLoot(isDigi):
            if isDigi == False:
                dukinosMomObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla")
                if dukinosMomObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_SkagzillaMom"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla", 1, 1)
                    AssignNewLootPoolPawn("GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla", "GD_Itempools.Runnables.Pool_SkagzillaMom", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.CyanNinja", 0)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla", "GD_Itempools.Runnables.Pool_SkagzillaMom", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Vladof_5_Mongol", 2, 1)
                
                ApplyMultiplayerScalingPawn("GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla", 2, 1)
                dukinosMomObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.05
                dukinosMomObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
            
            elif isDigi == True:
                dukinosMomDigiObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi")
                if dukinosMomDigiObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_SkagzillaMom"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi", 1, 1)
                    AssignNewLootPoolPawn("GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi", "GD_Itempools.Runnables.Pool_SkagzillaMom", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.CyanNinja", 0)
                    AssignNewLootPoolPawnForMultiplayer("GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi", "GD_Itempools.Runnables.Pool_SkagzillaMom", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Vladof_5_Mongol", 3, 1)
                
                ApplyMultiplayerScalingPawn("GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi", 3, 1)
                dukinosMomDigiObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.05
                dukinosMomDigiObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
        
        #Fixes The Warrior's loot by uncrowding the pool
        def FixWarriorLoot():
            warriorObject = unrealsdk.FindObject("Behavior_SpawnItems", "Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6")
            if warriorObject.ItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Warrior"):
                AutoExpandPoolArrayBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", 6, 2)
                AssignNewLootPoolBehavior("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Head3", 0, "Overridden")
                AssignNewLootPoolBehavior("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Handsome", 1, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Maliwan_5_Volcano", 2, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Spike_Acid_05_Legendary", 3, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "ItemPoolDefinition", "GD_Itempools.ArtifactPools.Pool_Artifacts_05_Legendary", 4, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "InventoryBalanceDefinition", "GD_GrenadeMods.A_Item_Legendary.GM_Leech", 5, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Legendary.SG_Torgue_5_Flakker", 6, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Legendary.SG_Hyperion_5_ConferenceCall", 7, 6, "Overridden")
            
            ApplyMultiplayerScalingBehavior("Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31.Behavior_SpawnItems_6", 2, 6)
            
            warriorObject.ItemPoolList[0].PoolProbability.BaseValueConstant = 0.0125
            warriorObject.ItemPoolList[0].PoolProbability.BaseValueAttribute = None
            warriorObject.ItemPoolList[1].PoolProbability.BaseValueConstant = 0.0125
            warriorObject.ItemPoolList[1].PoolProbability.BaseValueAttribute = None
            warriorObject.ItemScatterOffset = (50, 50, 0,)

        #Fixes King Mong's loot by decrowding the badaboom and his cosmetic
        def FixKingMongLoot():
            kingMongObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong")
            PC = GetEngine().GamePlayers[0].Actor
            playthrough = PC.GetCurrentPlaythrough()
            playerLevel = 0
            if PC and PC.Pawn:
                pawn = PC.Pawn
                playerLevel = pawn.GetExpLevel()
            if kingMongObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_KingMong"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", 3, 0)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.OrangeNinja", 0)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 1, 1)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 5)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 6)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 7)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 8)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 9)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 10)
                AssignNewLootPoolPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", "GD_Itempools.Runnables.Pool_KingMong", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Bandit_5_BadaBoom", 11)
                
            ApplyMultiplayerScalingPawn("GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KingMong", 1, 1)
            
            kingMongObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0.05
            kingMongObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = None
            
            rareSpawnMonsterRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
            i = 0
            while i < 11:
                kingMongObject.DefaultItemPoolList[1 + i].PoolProbability.BaseValueAttribute = rareSpawnMonsterRateObject
                i += 1
            
            if playerLevel > 29 and playthrough == 0:
                kingMongObject.DefaultItemPoolList[5].PoolProbability.BaseValueScaleConstant = 1
            else:
                kingMongObject.DefaultItemPoolList[5].PoolProbability.BaseValueScaleConstant = 0
                
            if playerLevel > 49 and playthrough == 0:
                kingMongObject.DefaultItemPoolList[6].PoolProbability.BaseValueScaleConstant = 1
                kingMongObject.DefaultItemPoolList[7].PoolProbability.BaseValueScaleConstant = 1
            else:
                kingMongObject.DefaultItemPoolList[6].PoolProbability.BaseValueScaleConstant = 0
                kingMongObject.DefaultItemPoolList[7].PoolProbability.BaseValueScaleConstant = 0
                
            if playerLevel > 71 and playthrough == 0:
                kingMongObject.DefaultItemPoolList[8].PoolProbability.BaseValueScaleConstant = 1
                kingMongObject.DefaultItemPoolList[9].PoolProbability.BaseValueScaleConstant = 1
                kingMongObject.DefaultItemPoolList[10].PoolProbability.BaseValueScaleConstant = 1
                kingMongObject.DefaultItemPoolList[11].PoolProbability.BaseValueScaleConstant = 1
            else:
                kingMongObject.DefaultItemPoolList[8].PoolProbability.BaseValueScaleConstant = 0
                kingMongObject.DefaultItemPoolList[9].PoolProbability.BaseValueScaleConstant = 0
                kingMongObject.DefaultItemPoolList[10].PoolProbability.BaseValueScaleConstant = 0
                kingMongObject.DefaultItemPoolList[11].PoolProbability.BaseValueScaleConstant = 0

        #Fixes the Four Assassins' loot by decrowding their pools
        def FixAssassinsLoot(isDigi):
            if isDigi == False:
                assassin1Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1")
                if assassin1Object.DefaultItemPoolList[3].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1", 2, 0)
                    AssignNewLootPoolPawn("GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 3, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1", "GD_Itempools.Runnables.Pool_AssassinWot", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Unique.SMG_Hyperion_3_Commerce", 4, 2)
                
                ApplyMultiplayerScalingPawn("GD_Population_Marauder.Balance.Unique.PawnBalance_Assassin1", 3, 2)
                
                assassin1Object.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.05
                assassin1Object.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin1Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                
                assassin2Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2")
                if assassin2Object.DefaultItemPoolList[4].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2", 2, 0)
                    AssignNewLootPoolPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 3)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 4, 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2", "GD_Itempools.Runnables.Pool_AssassinOney", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Unique.Pistol_Jakobs_3_Judge", 5, 2)
                
                ApplyMultiplayerScalingPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_Assassin2", 4, 2)
                
                assassin2Object.DefaultItemPoolList[3].PoolProbability.BaseValueConstant = 0.05
                assassin2Object.DefaultItemPoolList[3].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin2Object.DefaultItemPoolList[((i * 2) + 5)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                
                assassin3Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3")
                if assassin3Object.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3", 2, 0)
                    AssignNewLootPoolPawn("GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 1)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 2, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3", "GD_Itempools.Runnables.Pool_AssassinReeth", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Hyperion_3_FremingtonsEdge", 3, 2)
                
                ApplyMultiplayerScalingPawn("GD_Population_Psycho.Balance.Unique.PawnBalance_Assassin3", 2, 2)
                
                assassin3Object.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.05
                assassin3Object.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin3Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                
                assassin4Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4")
                if assassin4Object.DefaultItemPoolList[3].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4", 2, 0)
                    AssignNewLootPoolPawn("GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 3, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4", "GD_Itempools.Runnables.Pool_AssassinRouf", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Unique.SG_Bandit_3_Dog", 4, 2)
                
                ApplyMultiplayerScalingPawn("GD_Population_Rat.Balance.Unique.PawnBalance_Assassin4", 3, 2)
                
                assassin4Object.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.05
                assassin4Object.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin4Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                
            elif isDigi == True:
                assassin1Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi")
                if assassin1Object.DefaultItemPoolList[3].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi", 2, 0)
                    AssignNewLootPoolPawn("GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 3, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi", "GD_Itempools.Runnables.Pool_AssassinWot", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Unique.SMG_Hyperion_3_Commerce", 4, 2)
                
                ApplyMultiplayerScalingPawn("GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi", 3, 2)
                
                assassin1Object.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.0125
                assassin1Object.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin1Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                
                assassin1Object.DefaultItemPoolList[3].PoolProbability.BaseValueScaleConstant = 0.25
                
                i = 1
                while i < 4:
                    if assassin1Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant != 0.25:
                        assassin1Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant *= 0.25
                    i += 1
                
                assassin2Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi")
                if assassin2Object.DefaultItemPoolList[4].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi", 2, 0)
                    AssignNewLootPoolPawn("GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 3)
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 4, 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi", "GD_Itempools.Runnables.Pool_AssassinOney", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Unique.Pistol_Jakobs_3_Judge", 5, 2)
                
                ApplyMultiplayerScalingPawn("GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi", 4, 2)
                
                assassin2Object.DefaultItemPoolList[3].PoolProbability.BaseValueConstant = 0.0125
                assassin2Object.DefaultItemPoolList[3].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin2Object.DefaultItemPoolList[((i * 2) + 5)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                    
                assassin2Object.DefaultItemPoolList[4].PoolProbability.BaseValueScaleConstant = 0.25
                
                i = 1
                while i < 4:
                    if assassin2Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueScaleConstant != 0.25:
                        assassin2Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueScaleConstant *= 0.25
                    i += 1
                
                assassin3Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi")
                if assassin3Object.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi", 2, 0)
                    AssignNewLootPoolPawn("GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 1)
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 2, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi", "GD_Itempools.Runnables.Pool_AssassinReeth", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Hyperion_3_FremingtonsEdge", 3, 2)
                
                ApplyMultiplayerScalingPawn("GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi", 2, 2)
                
                assassin3Object.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.0125
                assassin3Object.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin3Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                    
                assassin3Object.DefaultItemPoolList[2].PoolProbability.BaseValueScaleConstant = 0.25
                
                i = 1
                while i < 4:
                    if assassin3Object.DefaultItemPoolList[((i * 2) + 2)].PoolProbability.BaseValueScaleConstant != 0.25:
                        assassin3Object.DefaultItemPoolList[((i * 2) + 2)].PoolProbability.BaseValueScaleConstant *= 0.25
                    i += 1
                
                assassin4Object = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi")
                if assassin4Object.DefaultItemPoolList[3].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_FourAssassins"):
                    AutoExpandPoolArrayPawnForMultiplayer("GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi", 2, 0)
                    AssignNewLootPoolPawn("GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Black", 2)
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi", "GD_Itempools.Runnables.Pool_FourAssassins", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor", 3, 2, "Overridden")
                    AssignNewLootPoolPawnForMultiplayer("GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi", "GD_Itempools.Runnables.Pool_AssassinRouf", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Unique.SG_Bandit_3_Dog", 4, 2)
                
                ApplyMultiplayerScalingPawn("GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi", 3, 2)
                
                assassin4Object.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.0125
                assassin4Object.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
                
                rareRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniqueRares")

                i = 0
                while i < 4:
                    assassin4Object.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueAttribute = rareRateObject
                    i += 1
                    
                assassin4Object.DefaultItemPoolList[3].PoolProbability.BaseValueScaleConstant = 0.25
                
                i = 1
                while i < 4:
                    if assassin4Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant != 0.25:
                        assassin4Object.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant *= 0.25
                    i += 1
                
        #does absolutely nothing 
        def FixDocMercyLoot():
            docmercyObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Nomad.Balance.Unique.PawnBalance_MrMercy")
            if docmercyObject.DefaultItemPoolList[2].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_MrMercy"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_MrMercy", 1, 1)
                AssignNewLootPoolPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_MrMercy", "GD_Itempools.Runnables.Pool_MrMercy", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity", 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Nomad.Balance.Unique.PawnBalance_MrMercy", "GD_Itempools.Runnables.Pool_MrMercy", "WeaponBalanceDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity", 3, 1)
            
            ApplyMultiplayerScalingPawn("GD_Population_Nomad.Balance.Unique.PawnBalance_MrMercy", 3, 1)
            
            docmercyObject.DefaultItemPoolList[2].PoolProbability.BaseValueConstant = 0.001
            docmercyObject.DefaultItemPoolList[2].PoolProbability.BaseValueAttribute = None
            docmercyPoolObject = unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.Runnables.Pool_MrMercyCustom2notOverridden")
            docmercyPoolObject.Quantity.BaseValueConstant = 200

        #Fixes Spider Angel's loot by decrowding her pools
        def FixSpiderAngelLoot():
            angelObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss")
            if angelObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_AngelBoss.LootPools.Pool_AngelBossRunnable"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", 4, 0)
                angelObject.DefaultItemPoolList[0].ItemPool = unrealsdk.FindObject("ItemPoolDefinition","GD_Aster_ItemPools.ClassModPools.Pool_ClassMod_00_Aster")
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", "GD_AngelBoss.LootPools.Pool_AngelBossRunnable", "ItemPoolDefinition", "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary", 1, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", "GD_AngelBoss.LootPools.Pool_AngelBossRunnable", "ItemPoolDefinition", "GD_AngelBoss.LootPools.Pool_Bitch", 2, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", "GD_AngelBoss.LootPools.Pool_AngelBossRunnable", "ItemPoolDefinition", "GD_Itempools.Runnables.Pool_TectorHodunk", 3, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", "GD_AngelBoss.LootPools.Pool_AngelBossRunnable", "ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Mobley", 4, 4)
                
            ApplyMultiplayerScalingPawn("GD_Aster_Pop_Spiders.Unique.PawnBalance_AngelBoss", 1, 4)
            
            angelObject.DefaultItemPoolList[1].PoolProbability.BaseValueScaleConstant = 1.7
            angelObject.DefaultItemPoolList[2].PoolProbability.BaseValueScaleConstant = 0.8
            angelObject.DefaultItemPoolList[3].PoolProbability.BaseValueScaleConstant = 0.8
            angelObject.DefaultItemPoolList[4].PoolProbability.BaseValueScaleConstant = 0.8
            
            i = 1
            while i < 4:
                if angelObject.DefaultItemPoolList[((i * 4) + 1)].PoolProbability.BaseValueScaleConstant != 1.7:
                    angelObject.DefaultItemPoolList[((i * 4) + 1)].PoolProbability.BaseValueScaleConstant *= 1.7
                if angelObject.DefaultItemPoolList[((i * 4) + 2)].PoolProbability.BaseValueScaleConstant != 0.8:
                    angelObject.DefaultItemPoolList[((i * 4) + 2)].PoolProbability.BaseValueScaleConstant *= 0.8
                if angelObject.DefaultItemPoolList[((i * 4) + 3)].PoolProbability.BaseValueScaleConstant != 0.8:
                    angelObject.DefaultItemPoolList[((i * 4) + 3)].PoolProbability.BaseValueScaleConstant *= 0.8
                if angelObject.DefaultItemPoolList[((i * 4) + 4)].PoolProbability.BaseValueScaleConstant != 0.8:
                    angelObject.DefaultItemPoolList[((i * 4) + 4)].PoolProbability.BaseValueScaleConstant *= 0.8
                i += 1
        
            bitchPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_AngelBoss.LootPools.Pool_Bitch")
            bitchPoolObject.BalancedItems[0].bDropOnDeath = True

        #Fixes Gold Golem's loot by decrowding its pools
        def FixGoldGolemLoot():
            goldGolemObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold")
            if goldGolemObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_GolemGold.LootPools.Pool_GoldGolemRunnable"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", 4, 0)
                goldGolemObject.DefaultItemPoolList[0].ItemPool = unrealsdk.FindObject("ItemPoolDefinition","GD_Aster_ItemPools.ClassModPools.Pool_ClassMod_00_Aster")
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", "GD_GolemGold.LootPools.Pool_GoldGolemRunnable", "ItemPoolDefinition", "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary", 1, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", "GD_GolemGold.LootPools.Pool_GoldGolemRunnable", "ItemPoolDefinition", "GD_Itempools.Runnables.Pool_MrMercy", 2, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", "GD_GolemGold.LootPools.Pool_GoldGolemRunnable", "ItemPoolDefinition", "GD_Itempools.Runnables.Pool_BigBoy", 3, 4)
                AssignNewLootPoolPawnForMultiplayer("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", "GD_GolemGold.LootPools.Pool_GoldGolemRunnable", "ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Tumba", 4, 4)
                
            ApplyMultiplayerScalingPawn("GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", 1, 4)
            
            goldGolemObject.DefaultItemPoolList[1].PoolProbability.BaseValueScaleConstant = 1.7
            goldGolemObject.DefaultItemPoolList[2].PoolProbability.BaseValueScaleConstant = 0.8
            goldGolemObject.DefaultItemPoolList[3].PoolProbability.BaseValueScaleConstant = 0.8
            goldGolemObject.DefaultItemPoolList[4].PoolProbability.BaseValueScaleConstant = 0.8
            
            i = 1
            while i < 4:
                if goldGolemObject.DefaultItemPoolList[((i * 4) + 1)].PoolProbability.BaseValueScaleConstant != 1.7:
                    goldGolemObject.DefaultItemPoolList[((i * 4) + 1)].PoolProbability.BaseValueScaleConstant *= 1.7
                if goldGolemObject.DefaultItemPoolList[((i * 4) + 2)].PoolProbability.BaseValueScaleConstant != 0.8:
                    goldGolemObject.DefaultItemPoolList[((i * 4) + 2)].PoolProbability.BaseValueScaleConstant *= 0.8
                if goldGolemObject.DefaultItemPoolList[((i * 4) + 3)].PoolProbability.BaseValueScaleConstant != 0.8:
                    goldGolemObject.DefaultItemPoolList[((i * 4) + 3)].PoolProbability.BaseValueScaleConstant *= 0.8
                if goldGolemObject.DefaultItemPoolList[((i * 4) + 4)].PoolProbability.BaseValueScaleConstant != 0.8:
                    goldGolemObject.DefaultItemPoolList[((i * 4) + 4)].PoolProbability.BaseValueScaleConstant *= 0.8
                i += 1

        #Fixes the badass creeper's loot by decrowding its pool
        def FixCreeperLoot():
            creeperObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Creeper.Balance.PawnBalance_CreeperBadass")
            if creeperObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.WeaponPools.Pool_Weapons_Minecraft"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Creeper.Balance.PawnBalance_CreeperBadass", 2, 1)
                creeperObject.DefaultItemPoolList[0].ItemPool = None
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Creeper.Balance.PawnBalance_CreeperBadass", "GD_Itempools.WeaponPools.Pool_Weapons_Minecraft", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Unique.SG_Tediore_3_Blockhead", 3, 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Creeper.Balance.PawnBalance_CreeperBadass", "GD_Itempools.WeaponPools.Pool_Weapons_Minecraft", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Hyperion_3_Longbow", 4, 2)
                
            ApplyMultiplayerScalingPawn("GD_Population_Creeper.Balance.PawnBalance_CreeperBadass", 3, 2)
            
            creeperObject.DefaultItemPoolList[3].PoolProbability.BaseValueScaleConstant = 1.25
            creeperObject.DefaultItemPoolList[4].PoolProbability.BaseValueScaleConstant = 1.25
            
            i = 1
            while i < 4:
                if creeperObject.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant != 1.25:
                    creeperObject.DefaultItemPoolList[((i * 2) + 3)].PoolProbability.BaseValueScaleConstant *= 1.25
                if creeperObject.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueScaleConstant != 1.25:
                    creeperObject.DefaultItemPoolList[((i * 2) + 4)].PoolProbability.BaseValueScaleConstant *= 1.25
                i += 1

        #Halves the drop chances for each pool of the bonus package
        def FixBoomBoomLoot():
            boomObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Marauder.Balance.PawnBalance_Boom")
            boomboomObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Marauder.Balance.PawnBalance_BoomBoom")
            
            boomObject.DefaultItemPoolList[5].PoolProbability.BaseValueScaleConstant = 0.5
            boomboomObject.DefaultItemPoolList[5].PoolProbability.BaseValueScaleConstant = 0.5

        #increases some of the drop rates of items from loot midgets
        def FixLootMidgetLoot(exception = "None"):
            lootMidgetPoolObject = unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.LootMidgetLoot")
            perPlayerRateObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer")
            uniqueRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniques")
            rareSpawnMonsterRateObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
            ancientArtifactObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Gladiolus_Itempools.ArtifactPools.Pool_Artifacts_Ancient_All")
            legendaryPlusPearlObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Gladiolus_Itempools.EnemyDropPools.Pool_All_LegendaryPlusPearl_MinLevel51")
            if exception != "None":
                oldMix = None
                offendingObject = None
                if exception == "PandoraPark":
                    oldMix = unrealsdk.FindObject("WillowPopulationDefinition","GD_Population_Midget.Population.LootMidget.PopDef_LootMidget_HyperionMix")
                    offendingObject = unrealsdk.FindObject("PopulationFactoryPopulationDefinition","GD_Balance_Treasure.InteractiveObjectsTrap.MidgetHyperion.InteractiveObj_CardboardBox_MidgetHyperion:BehaviorProviderDefinition_1.Behavior_SpawnFromPopulationSystem_5.PopulationFactoryPopulationDefinition_11")
                elif exception == "OldDust":
                    oldMix = unrealsdk.FindObject("WillowPopulationDefinition","GD_Population_Midget.Population.LootMidget.PopDef_LootMidget_BanditMix")
                    offendingObject = unrealsdk.FindObject("PopulationOpportunityDen","OldDust_Mission_Side.TheWorld:PersistentLevel.PopulationOpportunityDen_12")
                
                newMix = unrealsdk.FindObject("WillowPopulationDefinition", "GD_Population_Midget.Population.LootMidget.PopDef_LootMidget_HyperionMix_New")
                if newMix is None:
                    newMix = unrealsdk.ConstructObject(
                        Class=oldMix.Class,
                        Outer=oldMix.Outer,
                        Name=f"{oldMix.Name}_New",
                        Template=oldMix
                    )
                unrealsdk.KeepAlive(newMix)
                offendingObject.PopulationDef = newMix

                newPoolObject = unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.LootMidgetLoot_Custom")
                if newPoolObject is None:
                    newPoolObject = unrealsdk.ConstructObject(
                        Class=lootMidgetPoolObject.Class,
                        Outer=lootMidgetPoolObject.Outer,
                        Name=f"{lootMidgetPoolObject.Name}_Custom",
                        Template=lootMidgetPoolObject
                    )
                    unrealsdk.KeepAlive(newPoolObject)
                
                actorCount = 0
                for actorArchetype in newMix.ActorArchetypeList:
                    oldFactory = actorArchetype.SpawnFactory
                    
                    oldFactoryNameLength = len(oldFactory.Name)
                    oldFactoryNameEnding = ""
                    i = 7
                    while i > 0:
                        oldFactoryNameEnding += oldFactory.Name[oldFactoryNameLength - i]
                        i -= 1

                    if oldFactoryNameEnding != "_Custom":
                        newFactory = unrealsdk.ConstructObject(
                            Class=oldFactory.Class,
                            Outer=oldFactory.Outer,
                            Name=f"{oldFactory.Name}_{actorCount}_Custom",
                            Template=oldFactory
                        )
                        actorArchetype.SpawnFactory = newFactory
                        unrealsdk.KeepAlive(newFactory)
                    
                    oldPawn = actorArchetype.SpawnFactory.PawnBalanceDefinition
                    oldPawnNameLength = len(oldPawn.Name)
                    oldPawnNameEnding = ""
                    i = 7
                    while i > 0:
                        oldPawnNameEnding += oldPawn.Name[oldPawnNameLength - i]
                        i -= 1

                    if oldPawnNameEnding != "_Custom":
                        newPawn = unrealsdk.ConstructObject(
                            Class=oldPawn.Class,
                            Outer=oldPawn.Outer,
                            Name=f"{oldPawn.Name}_Custom",
                            Template=oldPawn
                        )
                        actorArchetype.SpawnFactory.PawnBalanceDefinition = newPawn
                        unrealsdk.KeepAlive(newPawn)
                        actorArchetype.SpawnFactory.PawnBalanceDefinition.DefaultItemPoolIncludedLists[0] = newPoolObject
                    actorCount += 1

                ExpandPoolArrayList23Indecies("GD_Itempools.ListDefs.LootMidgetLoot_Custom", 18)
                newPoolObject.ItemPools[5].PoolProbability.BaseValueConstant = 1
                i = 0
                while i < 3:
                    newPoolObject.ItemPools[18 + i].ItemPool = ancientArtifactObject
                    newPoolObject.ItemPools[18 + i].PoolProbability.BaseValueConstant = 0
                    newPoolObject.ItemPools[18 + i].PoolProbability.BaseValueAttribute = None
                    newPoolObject.ItemPools[18 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                    newPoolObject.ItemPools[18 + i].PoolProbability.BaseValueScaleConstant = 3
                    i += 1
                newPoolObject.ItemPools[6].PoolProbability.BaseValueConstant = 0
                newPoolObject.ItemPools[6].PoolProbability.BaseValueAttribute = uniqueRateObject
                i = 0
                while i < 2:
                    newPoolObject.ItemPools[21 + i].ItemPool = ancientArtifactObject
                    newPoolObject.ItemPools[21 + i].PoolProbability.BaseValueConstant = 0
                    newPoolObject.ItemPools[21 + i].PoolProbability.BaseValueAttribute = uniqueRateObject
                    newPoolObject.ItemPools[21 + i].PoolProbability.InitializationDefinition = None
                    newPoolObject.ItemPools[21 + i].PoolProbability.BaseValueScaleConstant = 1
                    i += 1

            uncommonGunsAndGearObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon")
            rareGunsAndGearObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare")
            veryRareGunsAndGearObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare")
            gunsAndGearNumPlayersPlusOneObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_GunsAndGearDropNumPlayersPlusOne")
            ExpandPoolArrayList37Indecies("GD_Itempools.ListDefs.LootMidgetLoot", 18)
            lootMidgetPoolObject.ItemPools[5].PoolProbability.BaseValueConstant = 1
            i = 0
            while i < 3:
                lootMidgetPoolObject.ItemPools[18 + i].ItemPool = ancientArtifactObject
                lootMidgetPoolObject.ItemPools[18 + i].PoolProbability.BaseValueConstant = 0
                lootMidgetPoolObject.ItemPools[18 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[18 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                lootMidgetPoolObject.ItemPools[18 + i].PoolProbability.BaseValueScaleConstant = 3
                i += 1
            lootMidgetPoolObject.ItemPools[6].PoolProbability.BaseValueConstant = 0
            lootMidgetPoolObject.ItemPools[6].PoolProbability.BaseValueAttribute = uniqueRateObject
            i = 0
            while i < 2:
                lootMidgetPoolObject.ItemPools[21 + i].ItemPool = veryRareGunsAndGearObject
                lootMidgetPoolObject.ItemPools[21 + i].PoolProbability.BaseValueConstant = 0
                lootMidgetPoolObject.ItemPools[21 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[21 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                lootMidgetPoolObject.ItemPools[21 + i].PoolProbability.BaseValueScaleConstant = 2
                i += 1
            lootMidgetPoolObject.ItemPools[23].ItemPool = rareGunsAndGearObject
            lootMidgetPoolObject.ItemPools[23].PoolProbability.BaseValueConstant = 1
            lootMidgetPoolObject.ItemPools[23].PoolProbability.BaseValueAttribute = None
            lootMidgetPoolObject.ItemPools[23].PoolProbability.InitializationDefinition = None
            lootMidgetPoolObject.ItemPools[23].PoolProbability.BaseValueScaleConstant = 1
            i = 0
            while i < 3:
                lootMidgetPoolObject.ItemPools[24 + i].ItemPool = rareGunsAndGearObject
                lootMidgetPoolObject.ItemPools[24 + i].PoolProbability.BaseValueConstant = 0
                lootMidgetPoolObject.ItemPools[24 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[24 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                lootMidgetPoolObject.ItemPools[24 + i].PoolProbability.BaseValueScaleConstant = 2
                i += 1
            i = 0
            while i < 2:
                lootMidgetPoolObject.ItemPools[27 + i].ItemPool = uncommonGunsAndGearObject
                lootMidgetPoolObject.ItemPools[27 + i].PoolProbability.BaseValueConstant = 1
                lootMidgetPoolObject.ItemPools[27 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[27 + i].PoolProbability.InitializationDefinition = None
                lootMidgetPoolObject.ItemPools[27 + i].PoolProbability.BaseValueScaleConstant = 1
                i += 1
            i = 0
            while i < 3:
                lootMidgetPoolObject.ItemPools[29 + i].ItemPool = uncommonGunsAndGearObject
                lootMidgetPoolObject.ItemPools[29 + i].PoolProbability.BaseValueConstant = 1
                lootMidgetPoolObject.ItemPools[29 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[29 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                lootMidgetPoolObject.ItemPools[29 + i].PoolProbability.BaseValueScaleConstant = 2
                i += 1
            lootMidgetPoolObject.ItemPools[32].ItemPool = gunsAndGearNumPlayersPlusOneObject
            lootMidgetPoolObject.ItemPools[32].PoolProbability.BaseValueConstant = 1
            lootMidgetPoolObject.ItemPools[32].PoolProbability.BaseValueAttribute = None
            lootMidgetPoolObject.ItemPools[32].PoolProbability.InitializationDefinition = None
            lootMidgetPoolObject.ItemPools[32].PoolProbability.BaseValueScaleConstant = 1
            i = 0
            while i < 2:
                lootMidgetPoolObject.ItemPools[33 + i].ItemPool = gunsAndGearNumPlayersPlusOneObject
                lootMidgetPoolObject.ItemPools[33 + i].PoolProbability.BaseValueConstant = 1
                lootMidgetPoolObject.ItemPools[33 + i].PoolProbability.BaseValueAttribute = None
                lootMidgetPoolObject.ItemPools[33 + i].PoolProbability.InitializationDefinition = perPlayerRateObject
                lootMidgetPoolObject.ItemPools[33 + i].PoolProbability.BaseValueScaleConstant = 2
                i += 1
            i = 0
            while i < 2:
                lootMidgetPoolObject.ItemPools[35 + i].ItemPool = ancientArtifactObject
                lootMidgetPoolObject.ItemPools[35 + i].PoolProbability.BaseValueConstant = 0
                lootMidgetPoolObject.ItemPools[35 + i].PoolProbability.BaseValueAttribute = uniqueRateObject
                lootMidgetPoolObject.ItemPools[35 + i].PoolProbability.InitializationDefinition = None
                lootMidgetPoolObject.ItemPools[35 + i].PoolProbability.BaseValueScaleConstant = 1
                i += 1
            
        #Fixes the loot pools for chubbies
        def FixChubbyLoot():
            chubbyPoolObject = unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear")
            if chubbyPoolObject.ItemPools[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_ChubbieUniques"):
                AutoExpandPoolArrayListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", 8, 1)
                AssignNewLootPoolList("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.RedNinja", 0)
                AssignNewLootPoolList3ItemsForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Tediore_5_Bunny", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Booster_05_Legendary", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Standard_CrackedSash", 16, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "WeaponBalanceDefinition", "GD_Weap_Launchers.A_Weapons_Legendary.RL_Tediore_5_Bunny", 17, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Booster_05_Legendary", 18, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Standard_CrackedSash", 19, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "ItemPoolDefinition", "GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All", 20, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "ItemPoolDefinition", "GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All", 21, 8)
                AssignNewLootPoolListForMultiplayer("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", "GD_Itempools.Runnables.Pool_ChubbieUniques", "ItemPoolDefinition", "GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All", 22, 8)
                #Puts in pearl pools
                i = 0
                while i < 4:
                    chubbyPoolObject.ItemPools[((i * 8) + 23)].ItemPool = unrealsdk.FindObject("CrossDLCItemPoolDefinition","GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All")
                    chubbyPoolObject.ItemPools[((i * 8) + 23)].PoolProbability.BaseValueConstant = 1.000000
                    chubbyPoolObject.ItemPools[((i * 8) + 23)].PoolProbability.BaseValueAttribute = None
                    chubbyPoolObject.ItemPools[((i * 8) + 23)].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies")
                    i += 1
            
            ApplyMultiplayerScalingList("GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear", 16, 8)
            
            chubbyPoolObject.ItemPools[0].PoolProbability.BaseValueConstant = 0.05
            
            #Removes the original pearl pool
            chubbyPoolObject.ItemPools[9].PoolProbability.BaseValueConstant = 0.000000
            chubbyPoolObject.ItemPools[9].PoolProbability.BaseValueAttribute = None
            chubbyPoolObject.ItemPools[9].PoolProbability.InitializationDefinition = None
            chubbyPoolObject.ItemPools[9].PoolProbability.BaseValueScaleConstant = 0.000000
            
            i = 0
            while i < 4:
                chubbyPoolObject.ItemPools[((i * 8) + 16)].PoolProbability.BaseValueConstant = 1
                chubbyPoolObject.ItemPools[((i * 8) + 16)].PoolProbability.BaseValueAttribute = None
                chubbyPoolObject.ItemPools[((i * 8) + 20)].PoolProbability.BaseValueConstant = 1
                chubbyPoolObject.ItemPools[((i * 8) + 20)].PoolProbability.BaseValueAttribute = None
                chubbyPoolObject.ItemPools[((i * 8) + 21)].PoolProbability.BaseValueConstant = 0
                chubbyPoolObject.ItemPools[((i * 8) + 21)].PoolProbability.BaseValueAttribute = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
                chubbyPoolObject.ItemPools[((i * 8) + 22)].PoolProbability.BaseValueConstant = 0
                chubbyPoolObject.ItemPools[((i * 8) + 22)].PoolProbability.BaseValueAttribute = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
                chubbyPoolObject.ItemPools[((i * 8) + 23)].PoolProbability.BaseValueAttribute = None
                i += 1
                
            #Increases pearl chance and gen 2 pearl chance
            pearlPoolObject = unrealsdk.FindObject(
                "CrossDLCItemPoolDefinition",
                "GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All"
            )
            i = 0
            while i <= 3: 
                pearlPoolObject.BalancedItems[i].Probability.BaseValueScaleConstant = 3
                i += 1
            
            pearlWeightsObject = unrealsdk.FindObject(
                "AttributeInitializationDefinition",
                "GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies"
            )
            for value in pearlWeightsObject.ConditionalInitialization.ConditionalExpressionList:
                value.BaseValueIfTrue.BaseValueScaleConstant = 3
            
            #Applies multiplayer scaling to chubby bones' infinity
            if unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonChubby"):
                ExpandSinglePoolForMultiplayerPawn("GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonChubby", 0, "All", "Doesn't matter lmao")
        
        def FixMimicLoot():
            PC = GetEngine().GamePlayers[0].Actor
            mimicObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Aster_Pop_Mimic.Balance.PawnBalance_Mimic")
            classModPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Aster_ItemPools.ClassModPools.Pool_ClassMod_00_Aster")
            rareSpawnMonsterObject = unrealsdk.FindObject("AttributeDefinition","GD_Itempools.DropWeights.DropODDS_BossUniquesRareSpawnMonster")
            perPlayerRateObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer")
            PC.ServerRCon(f"set {PC.PathName(mimicObject)} DefaultItemPoolList ((ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute={PC.PathName(rareSpawnMonsterObject)},InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute={PC.PathName(rareSpawnMonsterObject)},InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute={PC.PathName(rareSpawnMonsterObject)},InitializationDefinition=None,BaseValueScaleConstant=1.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(perPlayerRateObject)},BaseValueScaleConstant=2.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(perPlayerRateObject)},BaseValueScaleConstant=2.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(perPlayerRateObject)},BaseValueScaleConstant=2.000000)),(ItemPool={PC.PathName(classModPoolObject)},PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition={PC.PathName(perPlayerRateObject)},BaseValueScaleConstant=2.000000)))")
        
        #Fixes Henry's loot by decrowding the cradle and his cosmetic
        def FixHenryLoot():
            henryObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Stalker.Balance.Unique.PawnBalance_Henry")
            if henryObject.DefaultItemPoolList[1].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Henry"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", 1, 1)
                AssignNewLootPoolPawn("GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", "GD_Itempools.Runnables.Pool_Henry", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Head8", 1)
                AssignNewLootPoolPawnForMultiplayer("GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", "GD_Itempools.Runnables.Pool_Henry", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Standard_05_Legendary", 3, 1)
                
            ApplyMultiplayerScalingPawn("GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", 3, 1)
            
            henryObject.DefaultItemPoolList[1].PoolProbability.BaseValueConstant = 0.05
            henryObject.DefaultItemPoolList[1].PoolProbability.BaseValueAttribute = None
        
        #Fixes Sully's loot by scaling the hellfire and the chimera for multiplayer
        def FixSullyLoot():
            sullyObject = unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Spycho.Population.PawnBalance_Spycho")
            if sullyObject.DefaultItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_MonsterMash"):
                AutoExpandPoolArrayPawnForMultiplayer("GD_Spycho.Population.PawnBalance_Spycho", 2, -1)
                AssignNewLootPoolPawnForMultiplayer("GD_Spycho.Population.PawnBalance_Spycho", "GD_Itempools.Runnables.Pool_MonsterMash", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Chimera_05_Legendary", 0, 2)
                AssignNewLootPoolPawnForMultiplayer("GD_Spycho.Population.PawnBalance_Spycho", "GD_Itempools.Runnables.Pool_Scorch", "WeaponBalanceDefinition", "GD_Weap_SMG.A_Weapons_Legendary.SMG_Maliwan_5_HellFire", 1, 2)
                
            ApplyMultiplayerScalingPawn("GD_Spycho.Population.PawnBalance_Spycho", 0, 2)
        
        #Fixes Handsome Sorcerer's loot by scaling his warrior loot for multiplayer
        def FixHandsomeSorcererLoot():
            handsomeSorcererObject = unrealsdk.FindObject("Behavior_SpawnItems", "GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32")
            if handsomeSorcererObject.ItemPoolList[0].ItemPool == unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.Runnables.Pool_Warrior"):
                AutoExpandPoolArrayBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", 6, 2)
                AssignNewLootPoolBehavior("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Head3", 0, "Overridden")
                AssignNewLootPoolBehavior("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "KeyedItemPoolDefinition", "GD_CustomItemPools_MainGame.Rewards.Handsome", 1, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Maliwan_5_Volcano", 2, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "InventoryBalanceDefinition", "GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Spike_Acid_05_Legendary", 3, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "ItemPoolDefinition", "GD_Itempools.ArtifactPools.Pool_Artifacts_05_Legendary", 4, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "InventoryBalanceDefinition", "GD_GrenadeMods.A_Item_Legendary.GM_Leech", 5, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Legendary.SG_Torgue_5_Flakker", 6, 6, "Overridden")
                AssignNewLootPoolBehaviorForMultiplayer("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", "GD_Itempools.Runnables.Pool_Warrior", "WeaponBalanceDefinition", "GD_Weap_Shotgun.A_Weapons_Legendary.SG_Hyperion_5_ConferenceCall", 7, 6, "Overridden")
            
            ApplyMultiplayerScalingBehavior("GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_32", 2, 6)
            
            handsomeSorcererObject.ItemPoolList[0].PoolProbability.BaseValueConstant = 0.0125
            handsomeSorcererObject.ItemPoolList[0].PoolProbability.BaseValueAttribute = None
            handsomeSorcererObject.ItemPoolList[1].PoolProbability.BaseValueConstant = 0.0125
            handsomeSorcererObject.ItemPoolList[1].PoolProbability.BaseValueAttribute = None
        
        #Changes crab raid boss loot
        def FixCrabLoot():
            if unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6"):
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6")
                behaviorObject.ItemPoolIncludedLists = ()
                
                numPools = 0
                for pool in behaviorObject.ItemPoolList:
                    numPools += 1
                
                PC = GetEngine().GamePlayers[0].Actor
                if numPools != 4:
                    PC.ServerRCon(f"set {PC.PathName(behaviorObject)} ItemPoolList ((ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies',BaseValueScaleConstant=0.500000)),(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies',BaseValueScaleConstant=0.500000)),(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies',BaseValueScaleConstant=0.500000)),(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies',BaseValueScaleConstant=0.500000)))")
                
                numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers
                i = 0
                for pool in behaviorObject.ItemPoolList:
                    if numPlayers > i:
                        pool.PoolProbability.BaseValueScaleConstant = 0.5
                    else:
                        pool.PoolProbability.BaseValueScaleConstant = 0
                    i += 1
        
        def excludeCosmeticsFromRateChangesAIPawn(objectName, index = 0):
            excludedObject = unrealsdk.FindObject(
                "AIPawnBalanceDefinition",
                objectName
            )
            excludedObject.DefaultItemPoolList[index].PoolProbability.BaseValueConstant = 0.33333
            excludedObject.DefaultItemPoolList[index].PoolProbability.BaseValueAttribute = None
        
        def excludeCosmeticsFromRateChangesBehavior(objectName, index = 0):
            excludedObject = unrealsdk.FindObject(
                "Behavior_SpawnItems",
                objectName
            )
            excludedObject.ItemPoolList[index].PoolProbability.BaseValueConstant = 0.33333
            excludedObject.ItemPoolList[index].PoolProbability.BaseValueAttribute = None
            
        def excludeCosmeticsFromRateChangesItemPoolList(objectName, index = 0):
            excludedObject = unrealsdk.FindObject(
                "ItemPoolListDefinition",
                objectName
            )
            excludedObject.ItemPools[index].PoolProbability.BaseValueConstant = 0.33333
            excludedObject.ItemPools[index].PoolProbability.BaseValueAttribute = None

        def ExpandSinglePoolForMultiplayerPawn(pawn, indexToReplicate, activeMap, currentMap):
            PC = GetEngine().GamePlayers[0].Actor
            if currentMap == activeMap or activeMap == "All":
                PC = GetEngine().GamePlayers[0].Actor
                numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers
                pawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition",pawn)
                
                numPools = 0
                for pool in pawnObject.DefaultItemPoolList:
                    numPools += 1
                
                exception = 0
                if indexToReplicate == (numPools - 1) and numPools > 1:
                    exception = 1
                
                if pawnObject.DefaultItemPoolList[numPools - 1 - exception].ItemPool != pawnObject.DefaultItemPoolList[indexToReplicate].ItemPool or numPools == 1:
                    savedPawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", f"{pawnObject.Outer}.{pawnObject.Name}Saved")
                    if savedPawnObject is None:
                        savedPawnObject = unrealsdk.ConstructObject(
                            Class=pawnObject.Class,
                            Outer=pawnObject.Outer,
                            Name=f"{pawnObject.Name}Saved",
                            Template=pawnObject
                        )
                        
                    littleString = "("
                    bigString = "(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
                    
                    i = 0
                    while i < numPools + 3:
                        littleString = littleString + bigString
                        if i < numPools + 2:
                            littleString = littleString + ","
                        i += 1
                            
                    PC.ServerRCon(f"set {PC.PathName(pawnObject)} DefaultItemPoolList {littleString})")

                    i = 0
                    for pool in savedPawnObject.DefaultItemPoolList:
                        pawnObject.DefaultItemPoolList[i].ItemPool = savedPawnObject.DefaultItemPoolList[i].ItemPool
                        pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant = savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueConstant
                        pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute = savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueAttribute
                        pawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition = savedPawnObject.DefaultItemPoolList[i].PoolProbability.InitializationDefinition
                        pawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant = savedPawnObject.DefaultItemPoolList[i].PoolProbability.BaseValueScaleConstant
                        i += 1
                        
                    i = 0
                    while i < 3:
                        pawnObject.DefaultItemPoolList[i + numPools].ItemPool = pawnObject.DefaultItemPoolList[indexToReplicate].ItemPool
                        pawnObject.DefaultItemPoolList[i + numPools].PoolProbability.BaseValueConstant = pawnObject.DefaultItemPoolList[indexToReplicate].PoolProbability.BaseValueConstant
                        pawnObject.DefaultItemPoolList[i + numPools].PoolProbability.BaseValueAttribute = pawnObject.DefaultItemPoolList[indexToReplicate].PoolProbability.BaseValueAttribute
                        pawnObject.DefaultItemPoolList[i + numPools].PoolProbability.InitializationDefinition = pawnObject.DefaultItemPoolList[indexToReplicate].PoolProbability.InitializationDefinition
                        if (numPlayers - 1) > i:
                            pawnObject.DefaultItemPoolList[i + numPools].PoolProbability.BaseValueScaleConstant = pawnObject.DefaultItemPoolList[indexToReplicate].PoolProbability.BaseValueScaleConstant
                        else:
                            pawnObject.DefaultItemPoolList[i + numPools].PoolProbability.BaseValueScaleConstant = 0
                        i += 1
                
                elif pawnObject.DefaultItemPoolList[numPools - 1 - exception].ItemPool == pawnObject.DefaultItemPoolList[indexToReplicate].ItemPool:
                    i = 0
                    while i < 3:
                        if (numPlayers - 1) > i:
                            pawnObject.DefaultItemPoolList[numPools - i - 1].PoolProbability.BaseValueScaleConstant = pawnObject.DefaultItemPoolList[indexToReplicate].PoolProbability.BaseValueScaleConstant
                        else:
                            pawnObject.DefaultItemPoolList[numPools - i - 1].PoolProbability.BaseValueScaleConstant = 0
                        i += 1

        def ExpandSinglePoolForMultiplayerBevahior(behavior, indexToReplicate, activeMap, currentMap):
            PC = GetEngine().GamePlayers[0].Actor
            if currentMap == activeMap or activeMap == "All":
                PC = GetEngine().GamePlayers[0].Actor
                numPlayers = GetEngine().GetCurrentWorldInfo().Game.EffectiveNumPlayers
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems",behavior)
                
                numPools = 0
                for pool in behaviorObject.ItemPoolList:
                    numPools += 1
                
                exception = 0
                if indexToReplicate == (numPools - 1) and numPools > 1:
                    exception = 1
                
                if behaviorObject.ItemPoolList[numPools - 1 - exception].ItemPool != behaviorObject.ItemPoolList[indexToReplicate].ItemPool or numPools == 1:
                    savedBehaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", f"{behaviorObject.Outer}.{behaviorObject.Name}Saved")
                    if savedBehaviorObject is None:
                        savedBehaviorObject = unrealsdk.ConstructObject(
                            Class=behaviorObject.Class,
                            Outer=behaviorObject.Outer,
                            Name=f"{behaviorObject.Name}Saved",
                            Template=behaviorObject
                        )
                        
                    littleString = "("
                    bigString = "(ItemPool=None,PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
                    
                    i = 0
                    while i < numPools + 3:
                        littleString = littleString + bigString
                        if i < numPools + 2:
                            littleString = littleString + ","
                        i += 1
                            
                    PC.ServerRCon(f"set {PC.PathName(behaviorObject)} ItemPoolList {littleString})")

                    i = 0
                    for pool in savedBehaviorObject.ItemPoolList:
                        behaviorObject.ItemPoolList[i].ItemPool = savedBehaviorObject.ItemPoolList[i].ItemPool
                        behaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant = savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueConstant
                        behaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute = savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueAttribute
                        behaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition = savedBehaviorObject.ItemPoolList[i].PoolProbability.InitializationDefinition
                        behaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant = savedBehaviorObject.ItemPoolList[i].PoolProbability.BaseValueScaleConstant
                        i += 1
                        
                    i = 0
                    while i < 3:
                        behaviorObject.ItemPoolList[i + numPools].ItemPool = behaviorObject.ItemPoolList[indexToReplicate].ItemPool
                        behaviorObject.ItemPoolList[i + numPools].PoolProbability.BaseValueConstant = behaviorObject.ItemPoolList[indexToReplicate].PoolProbability.BaseValueConstant
                        behaviorObject.ItemPoolList[i + numPools].PoolProbability.BaseValueAttribute = behaviorObject.ItemPoolList[indexToReplicate].PoolProbability.BaseValueAttribute
                        behaviorObject.ItemPoolList[i + numPools].PoolProbability.InitializationDefinition = behaviorObject.ItemPoolList[indexToReplicate].PoolProbability.InitializationDefinition
                        if (numPlayers - 1) > i:
                            behaviorObject.ItemPoolList[i + numPools].PoolProbability.BaseValueScaleConstant = behaviorObject.ItemPoolList[indexToReplicate].PoolProbability.BaseValueScaleConstant
                        else:
                            behaviorObject.ItemPoolList[i + numPools].PoolProbability.BaseValueScaleConstant = 0
                        i += 1
                
                elif behaviorObject.ItemPoolList[numPools - 1 - exception].ItemPool == behaviorObject.ItemPoolList[indexToReplicate].ItemPool:
                    i = 0
                    while i < 3:
                        if (numPlayers - 1) > i:
                            behaviorObject.ItemPoolList[numPools - i - 1].PoolProbability.BaseValueScaleConstant = behaviorObject.ItemPoolList[indexToReplicate].PoolProbability.BaseValueScaleConstant
                        else:
                            behaviorObject.ItemPoolList[numPools - i - 1].PoolProbability.BaseValueScaleConstant = 0
                        i += 1

        #De-crowds and expands boss loot pools for multiplayer scaling
        def FixBossLootPools(mapname):
            #Excludes cosmetics from drop rate changes
            if mapname == "Hunger_P":
                #Wattle Gobbler
                excludeCosmeticsFromRateChangesAIPawn("GD_BigBird.Population.PawnBalance_BigBird_HARD")
                excludeCosmeticsFromRateChangesBehavior("GD_Allium_Lootables.IO.IO_Hunger_BossLoot:BehaviorProviderDefinition_1.Behavior_SpawnItems_3")
            
            elif mapname == "Pumpkin_Patch_P":
                #Pumpkinhead
                excludeCosmeticsFromRateChangesItemPoolList("GD_Flax_ItemPools.ListDefs.ItemDrops_Pumpkinhead")
                excludeCosmeticsFromRateChangesBehavior("GD_Flax_Lootables.IOs.IO_Pumpkin_BossLoot:BehaviorProviderDefinition_1.Behavior_SpawnItems_210", 1)
            
            elif mapname == "Easter_P":
                #Son of Crawmarax
                excludeCosmeticsFromRateChangesBehavior("GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_502")
            
            elif mapname == "Xmas_P":
                #Snowman
                excludeCosmeticsFromRateChangesBehavior("GD_Snowman.Death.BodyDeath_SnowMan:BehaviorProviderDefinition_6.Behavior_SpawnItems_10")
                
            elif mapname == "Distillery_P":
                #Wedding Bride
                excludeCosmeticsFromRateChangesAIPawn("GD_GoliathBride.Population.PawnBalance_GoliathBrideRaid")
                excludeCosmeticsFromRateChangesBehavior("GD_GoliathBride.Death.BodyDeath_GoliathBride:BehaviorProviderDefinition_6.Behavior_SpawnItems_13")
                #Balloons
                excludeCosmeticsFromRateChangesBehavior("GD_Nasturtium_Lootables.IOs.IO_BossBalloons:BehaviorProviderDefinition_1.Behavior_SpawnItems_1")

            #Fixes loot pools
            if unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_BugMorph.Balance.PawnBalance_BugMorphUltimateBadass"):
                FixUltimateBadassVarkidLoot()
                
            if unrealsdk.FindObject("ItemPoolListDefinition", "GD_Itempools.ListDefs.LootMidgetLoot"):
                FixLootMidgetLoot()
               
            if unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Orchid_Pop_Skag.Balance.PawnBalance_SkagChubby_Orchid") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Orchid_Pop_SpiderAnt.Balance.PawnBalance_SpiderantChubby_Orchid") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Orchid_Pop_Stalker.Balance.PawnBalance_Orchid_StalkerChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_BugMorph.Balance.PawnBalance_BugMorphChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Midget.Balance.PawnBalance_MidgetChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Rakk.Balance.PawnBalance_RakkChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Skag.Balance.PawnBalance_SkagChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_SpiderAnt.Balance.PawnBalance_SpiderantChubby") or unrealsdk.FindObject("AIPawnBalanceDefinition", "GD_Population_Stalker.Balance.PawnBalance_StalkerChubby"):
                FixChubbyLoot()
                unrealsdk.KeepAlive(unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.ChubbyEnemyGunsAndGear"))
            
            #Increases drop chances on magic spell grenades
            FixWizards()
            
            if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Aster_Pop_Mimic.Balance.PawnBalance_Mimic"):
                FixMimicLoot()
            '''
            if mapname == "TestingZone_P":
                FixSaturnLoot(True)
                FixDukinosMomLoot(True)
                FixAssassinsLoot(True)
            '''
            
            if mapname == "Boss_Cliffs_P":
                FixBunkerLoot()
                
            elif mapname == "Grass_Lynchwood_P":
                FixSheriffLoot()
                FixDukinosMomLoot(False)
                
            elif mapname == "TundraTrain_P":
                FixWilhelmLoot()
                
            elif mapname == "Interlude_P":
                FixBlackQueenLoot()
                
            elif mapname == "SouthernShelf_P":
                FixFlyntLoot()
                FixBoomBoomLoot()
                
            elif mapname == "Easter_P":
                FixFlyntSonLoot()
                #CRAB CRAWMERAX PEARL MACHINE
                #Rarely
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6").ItemDropOffset = (0, 0, 20)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6").ItemDropVelocity = (0, 0, 1400)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6").ItemScatterOffset = (600, 0, 0)
                #Every Time
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7").ItemDropOffset = (0, 0, 20)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7").ItemDropVelocity = (0, 0, 1200)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7").ItemScatterOffset = (500, 0, 0)
                FixCrabLoot()
                
            elif mapname == "Stockade_P":
                FixSaturnLoot(False)
            
            elif mapname == "PandoraPark_P":
                FixSonOfMothrakkLoot(False)
                FixLootMidgetLoot("PandoraPark")
                
            elif mapname == "Sage_RockForest_P":
                FixSonOfMothrakkLoot(True)
                
            elif mapname == "Boss_Volcano_P":
                FixWarriorLoot()
                
            elif mapname == "Ash_P":
                FixKingMongLoot()
                
            elif mapname == "SouthpawFactory_P":
                FixAssassinsLoot(False)
                
            elif mapname == "Frost_P":
                FixDocMercyLoot()
                
            elif mapname == "Dungeon_P":
                FixSpiderAngelLoot()
                
            elif mapname == "Mines_P":
                FixGoldGolemLoot()
                
            elif mapname == "OldDust_P":
                FixLootMidgetLoot("OldDust")
                
            elif mapname == "Grass_P":
                FixHenryLoot()
                
            elif mapname == "Pumpkin_Patch_P":
                FixSullyLoot()
                
            elif mapname == "caverns_p":
                FixCreeperLoot()
                
            elif mapname == "CastleKeep_P":
                FixHandsomeSorcererLoot()
            
            #FLAREV2 MAP CHANGES (HAHA)
            elif mapname == "ThresherRaid_P":
                '''unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemDropVelocity = (150, 0, 500)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemScatterOffset = (150, 0, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemDropVelocity = (-500, -250, 800)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemScatterOffset = (900, 0, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemDropVelocity = (-500, 250, 1100)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemScatterOffset = (1200, 0, 0)
                '''
                
                #When Circular Scatter is true, use negative x/positive y for inward velocity, and positive x/negative y for outward velocity
                
                #TERRAMORPHOUS
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemDropVelocity = (0, 200, 400)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45").ItemScatterOffset = (160, 0, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemDropVelocity = (0, 175, 700)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46").ItemScatterOffset = (160, 0, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemDropVelocity = (0, 150, 1000)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47").ItemScatterOffset = (160, 0, 0)
                
                
            elif mapname == "Orchid_Refinery_P":
                #HYPERIUS
                #unrealsdk.FindObject("ItemPoolDefinition", "GD_Orchid_ItemPools.SeraphCrystal.Pool_SeraphCrystal_20_Drop").Quantity.BaseValueConstant = (10)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203").ItemDropVelocity = (300, -300, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203").ItemScatterOffset = (25, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203").bCircularScatter = True
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204").ItemDropVelocity = (300, -300, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204").ItemScatterOffset = (25, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204").bCircularScatter = True
                
                
                
            elif mapname == "Orchid_Caves_P":
                #MASTER GEE
                unrealsdk.FindObject("Behavior_SpawnItems", "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath").ItemDropVelocity = (0, 300, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath").ItemScatterOffset = (150, 0, 0)
                
            elif mapname == "Iris_DL2_Interior_P":
                #PYRO PETE
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5").ItemScatterOffset = (10, 10, 10)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_6").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_6").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_6").ItemScatterOffset = (10, 10, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7").ItemScatterOffset = (20, 20, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_8").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_8").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_8").ItemScatterOffset = (10, 10, 10)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_9").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_9").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_9").ItemScatterOffset = (10, 10, 10)
                
            elif mapname == "Sage_Cliffs_P":
                #VORACIDOUS
                #unrealsdk.FindObject("ItemPoolDefinition", "GD_Sage_ItemPools.SeraphCrystal.Pool_SeraphCrystal_20_Drop").Quantity.BaseValueConstant = (10)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0").ItemScatterOffset = (200, 10, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1").ItemScatterOffset = (200, 10, 0)
                
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2").ItemDropVelocity = (500, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2").ItemScatterOffset = (200, 10, 0)
                
            elif mapname == "Sage_Underground_P":
                #DEXIDUOUS
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38").ItemDropOffset = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38").ItemDropVelocity = (0, 0, 0)
                unrealsdk.FindObject("Behavior_SpawnItems", "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38").ItemScatterOffset = (1000, 10, 0)
            
            elif mapname == "SandwormLair_P":
                #Haderax' Launcher Chest
                ScaleHaderaxLauncherBox()
                
            
            #Bosses with pools that need to be scaled for multiplayer but do not have to be de-crowded
            singlePoolBossList1 = [
                ["Pawn", "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KnuckleDragger", 0, "Glacial_P"],
                ["Pawn", "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_Warmong", 0, "Cove_P"],
                ["Pawn", "GD_Population_Marauder.Balance.PawnBalance_Boom", 5, "SouthernShelf_P"],
                ["Pawn", "GD_Population_Marauder.Balance.PawnBalance_BoomBoom", 5, "SouthernShelf_P"],
                ["Pawn", "GD_Population_Psycho.Balance.Unique.PawnBalance_SavageLee", 0, "Ice_P"],
                ["Pawn", "GD_Z1_InMemoriamData.Balance.PawnBalance_Boll", 1, "Ice_P"],
                ["Pawn", "GD_Population_SpiderAnt.Balance.Unique.PawnBalance_SpiderantScorch", 0, "icecanyon_p"],
                #["Pawn", "GD_SpiderantScorch_Digi.Population.PawnBalance_SpiderantScorch_Digi", 0, "TestingZone_P"],
                ["Pawn", "GD_Population_Psycho.Balance.Unique.PawnBalance_IncineratorVanya_Combat", 1, "icecanyon_p"],
                ["Pawn", "GD_Population_SpiderAnt.Balance.Unique.PawnBalance_MonsterMash1", 0, "icecanyon_p"],
                ["Pawn", "GD_Population_Engineer.Balance.Unique.PawnBalance_Gettle", 2, "Interlude_P"],
                ["Pawn", "GD_Population_Marauder.Balance.Unique.PawnBalance_Mobley", 3, "Interlude_P"],
                ["Pawn", "GD_Population_Marauder.Balance.Unique.PawnBalance_MickZaford_Combat", 3, "Interlude_P"],
                ["Pawn", "GD_Population_Marauder.Balance.Unique.PawnBalance_TectorHodunk_Combat", 3, "Interlude_P"],
                ["Pawn", "GD_Population_Psycho.Balance.Unique.PawnBalance_McNally", 0, "Interlude_P"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Dan", 2, "dam_p"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Lee", 2, "dam_p"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Mick", 2, "dam_p"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Ralph", 2, "dam_p"],
                ["Pawn", "GD_Population_BugMorph.Balance.Unique.PawnBalance_SirReginald", 0, "tundraexpress_p"],
                ["Pawn", "GD_Population_Goliath.Balance.Unique.PawnBalance_SmashHead", 1, "Fridge_P"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Laney", 2, "Fridge_P"],
                ["Pawn", "GD_Population_Psycho.Balance.Unique.PawnBalance_RakkMan", 1, "Fridge_P"],
                ["Pawn", "GD_Population_Crystalisk.Balance.Unique.PawnBalance_Blue", 0, "caverns_p"],
                ["Pawn", "GD_Population_Thresher.Balance.Unique.PawnBalance_Slappy", 0, "Outwash_P"],
                ["Pawn", "GD_Population_Engineer.Balance.Unique.PawnBalance_Leprechaun", 2, "Luckys_P"],
                ["Pawn", "GD_Population_Psycho.Balance.Unique.PawnBalance_MadDog", 0, "Grass_Lynchwood_P"],
                ["Pawn", "GD_Population_Stalker.Balance.Unique.PawnBalance_Stalker_Simon", 1, "PandoraPark_P"]
            ]
            
            singlePoolBossList2 = [
                ["Pawn", "GD_Population_Skag.Balance.Unique.PawnBalance_Tumbaa", 0, "PandoraPark_P"],
                ["Pawn", "GD_Population_Engineer.Balance.Unique.PawnBalance_Foreman", 2, "HyperionCity_P"],
                ["Pawn", "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_DonkeyMong", 0, "Ash_P"],
                ["Pawn", "GD_Population_Rat.Balance.Unique.PawnBalance_Mortar", 2, "CraterLake_P"],
                ["Pawn", "GD_Population_Engineer.Balance.Unique.PawnBalance_DJHyperion", 2, "Fyrestone_P"],
                ["Pawn", "GD_Population_Loader.Balance.Unique.PawnBalance_BoneHead2", 1, "Stockade_P"],
                #["Pawn", "GD_BoneHead_v3.Population.PawnBalance_BoneHead_V3", 1, "TestingZone_P"],
                ["Pawn", "GD_UndeadFirePsycho_Giant.Balance.PawnBalance_UndeadFirePsycho_Giant", 0, "Pumpkin_Patch_P"],
                ["Pawn", "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherBlue", 1, "Distillery_P"],
                ["Pawn", "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherOrange", 1, "Distillery_P"],
                ["Pawn", "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherPurple", 1, "Distillery_P"],
                ["Pawn", "GD_Aster_Pop_Dwarves.Balance.PawnBalance_Greedtooth", 0, "Mines_P"],
                ["Pawn", "GD_Aster_Population_NPC.Greedtooth.Balance.PawnBalance_Greedtooth_NPC", 0, "Mines_P"],
                ["Pawn", "GD_Aster_Pop_Dwarves.Balance.PawnBalance_Greedtooth", 0, "Mines_P"],
                ["Pawn", "GD_Aster_Pop_Orcs.Balance.PawnBalance_Orc_Butcher", 0, "Dark_Forest_P"],
                ["Pawn", "GD_Aster_Pop_Orcs.Balance.PawnBalance_Orc_WarlordSlog", 0, "TempleSlaughter_P"],
                ["Pawn", "GD_Sage_Pop_Drifter.Balance.PawnBalance_DrifterNamed", 0, "Sage_Underground_P"],
                ["Pawn", "GD_Sage_Pop_PrimalBeast.Balance.PawnBalance_Sage_FinalBoss", 0, "Sage_HyperionShip_P"],
                ["Pawn", "GD_Sage_SM_AcquiredTasteData.Creature.PawnBalance_Sage_AcquiredTaste_Creature", 0, "Sage_Underground_P"],
                ["Pawn", "GD_Sage_SM_NowYouSeeItData.Creature.PawnBalance_Sage_NowYouSeeIt_Creature", 2, "Sage_Cliffs_P"],
                ["Pawn", "GD_Sage_SM_PallingAroundData.Population.Balance_Sage_SM_PallingAround_Creature", 0, "Sage_Underground_P"],
                ["Behavior", "GD_Sage_SM_BigFeetData.Creature.Character.BodyDeath_BigFeetCrystalisk:BehaviorProviderDefinition_6.Behavior_SpawnItems_115", 0, "Sage_Cliffs_P"],
                ["Pawn", "GD_Aster_Pop_Treant.Balance.PawnBalance_Treant", 0, "Dark_Forest_P"],
                ["Behavior", "GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_31", 0, "CastleKeep_P"],
                ["Behavior", "GD_DragonBridgeBoss.InteractiveObjects.IO_DragonBridgeBoss_LootExplosion:BehaviorProviderDefinition_0.Behavior_SpawnItems_27", 0, "CastleKeep_P"]
            ]
            
            for boss in singlePoolBossList1 + singlePoolBossList2:
                if boss[0] == "Pawn":
                    ExpandSinglePoolForMultiplayerPawn(boss[1], boss[2], boss[3], mapname)
                elif boss[0] == "Behavior":
                    ExpandSinglePoolForMultiplayerBevahior(boss[1], boss[2], boss[3], mapname)
        
        #Increases drop chances on magic spell grenades
        def FixWizards():
            bossUniquesObject = unrealsdk.FindObject("ConstantAttributeValueResolver","GD_Itempools.DropWeights.DropODDS_BossUniques:ConstantAttributeValueResolver_0")
            uncommonWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            uncommonerWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3_Uncommoner")
            rareWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare")
        
            if unrealsdk.FindObject("ItemPoolDefinition","GD_Aster_ItemPools.GrenadeModPools.Pool_SpellGrenade_0_All"):
                spellPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_Aster_ItemPools.GrenadeModPools.Pool_SpellGrenade_0_All")
                spellPoolObject.BalancedItems[0].Probability.InitializationDefinition = uncommonWeightObject
                spellPoolObject.BalancedItems[1].Probability.InitializationDefinition = rareWeightObject
                spellPoolObject.BalancedItems[2].Probability.InitializationDefinition = uncommonWeightObject
                spellPoolObject.BalancedItems[3].Probability.InitializationDefinition = rareWeightObject
                spellPoolObject.BalancedItems[4].Probability.InitializationDefinition = uncommonWeightObject
                spellPoolObject.BalancedItems[5].Probability.InitializationDefinition = uncommonerWeightObject
                spellPoolObject.BalancedItems[5].InvBalanceDefinition = unrealsdk.FindObject("InventoryBalanceDefinition","GD_Aster_GrenadeMods.A_Item.GM_MagicMissileRare")
            
            #Pawn, scale for bossuniques, index to modify
            wizardList = [
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Necromancer", 0.5, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Necro_Badass", 1, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_FireMage", 1.5, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_FireMage_Badass", 5, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Sorcerer", 1.5, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Sorcerer_Badass", 5, 0],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Wizard", 1.5, 1],
                ["GD_Aster_Pop_Wizards.Balance.PawnBalance_Wizard_Badass", 5, 1]
            ]
        
            if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Aster_Pop_Wizards.Balance.PawnBalance_Necromancer"):
                necroObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Aster_Pop_Wizards.Balance.PawnBalance_Necromancer")
                necroObject.DefaultItemPoolList[0].PoolProbability.BaseValueConstant = 0
                necroObject.DefaultItemPoolList[0].PoolProbability.BaseValueAttribute = bossUniquesObject
                necroObject.DefaultItemPoolList[0].PoolProbability.BaseValueScaleConstant = 0.5
                
            for wizard in wizardList:
                if unrealsdk.FindObject("AIPawnBalanceDefinition",wizard[0]):
                    wizardObject = unrealsdk.FindObject("AIPawnBalanceDefinition",wizard[0])
                    wizardObject.DefaultItemPoolList[wizard[2]].PoolProbability.BaseValueConstant = 0
                    wizardObject.DefaultItemPoolList[wizard[2]].PoolProbability.BaseValueAttribute = bossUniquesObject
                    wizardObject.DefaultItemPoolList[wizard[2]].PoolProbability.BaseValueScaleConstant = wizard[1]
        
        #Expands a weight table for by the specified amount, returns the first new index
        def ExpandWeightTable(objectClass, objectName, numToExpandBy) -> int:
            PC = GetEngine().GamePlayers[0].Actor
            if unrealsdk.FindObject(objectClass, objectName):
                objectToModify = unrealsdk.FindObject(objectClass, objectName)
                savedObject = unrealsdk.ConstructObject(
                    Class=objectToModify.Class,
                    Outer=objectToModify.Outer,
                    Name=f"{objectToModify.Name}Saved",
                    Template=objectToModify
                )
                
                tableSize = 0
                for data in objectToModify.ConsolidatedAttributeInitData:
                    tableSize += 1
                
                if numToExpandBy == 0:
                    return tableSize
                
                bigString = "("
                littleString = "(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)"
                
                i = 0
                while i < tableSize + numToExpandBy:
                    bigString += littleString
                    if i < tableSize + numToExpandBy - 1:
                        bigString += ","
                    i += 1
                bigString += ")"
                
                PC.ServerRCon(f"set {PC.PathName(objectToModify)} ConsolidatedAttributeInitData {bigString}")
                
                i = 0
                while i < tableSize:
                    objectToModify.ConsolidatedAttributeInitData[i].BaseValueConstant = savedObject.ConsolidatedAttributeInitData[i].BaseValueConstant
                    objectToModify.ConsolidatedAttributeInitData[i].BaseValueAttribute = savedObject.ConsolidatedAttributeInitData[i].BaseValueAttribute
                    objectToModify.ConsolidatedAttributeInitData[i].InitializationDefinition = savedObject.ConsolidatedAttributeInitData[i].InitializationDefinition
                    objectToModify.ConsolidatedAttributeInitData[i].BaseValueScaleConstant = savedObject.ConsolidatedAttributeInitData[i].BaseValueScaleConstant
                    i += 1
                    
                return tableSize
                
            else:
                PC.ServerRCon(f"say unable to find object to expand table")
                return 0
        
        def ScaleClassMods():
            customWeightList = [
                "GD_Balance.Weighting.Weight_ComPlus1",
                "GD_Balance.Weighting.Weight_ComPlus2",
                "GD_Balance.Weighting.Weight_ComPlus3",
                "GD_Balance.Weighting.Weight_ComPlus4",
                "GD_Balance.Weighting.Weight_ComPlus5",
                "GD_Balance.Weighting.Weight_ComPlus6",
                "GD_Balance.Weighting.Weight_ComPurple1",
                "GD_Balance.Weighting.Weight_ComPurple2",
                "GD_Balance.Weighting.Weight_ComPurple3"
            ]
        
            bigList = unrealsdk.FindAll("ItemPartListCollectionDefinition")
            classModList = []
            
            classModClass = unrealsdk.FindObject("Class","WillowGame.ClassModPartDefinition")
            for collection in bigList:
                hasParts = False
                for part in collection.AlphaPartData.WeightedParts:
                    hasParts = True
                    break
                if hasParts == True:
                    if collection.AlphaPartData.WeightedParts[0].Part.Class == classModClass:
                        tempList = [collection]
                        classModList = classModList + tempList
                        
            for classMod in classModList:
                #Expands old weight table
                tableSize = 0
                for element in classMod.ConsolidatedAttributeInitData:
                    tableSize += 1
                
                savedClassModObject = unrealsdk.FindObject(
                    "ItemPartListCollectionDefinition", 
                    f"{classMod.Outer}.{classMod.Name}Saved"
                )
                
                if savedClassModObject is None:
                    savedClassModObject = unrealsdk.ConstructObject(
                        Class=classMod.Class,
                        Outer=classMod.Outer,
                        Name=f"{classMod.Name}Saved",
                        Template=classMod
                    )

                bigString = "("
                littleString = "(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)"
                
                i = 0
                while i < tableSize + 9:
                    bigString = bigString + littleString
                    if i != tableSize + 8:
                        bigString = bigString + ","
                    i += 1
                bigString = bigString + ")"
                
                PC.ServerRCon(f"set {PC.PathName(classMod)} ConsolidatedAttributeInitData " + bigString)
                
                i = 0
                while i < tableSize:
                    classMod.ConsolidatedAttributeInitData[i].BaseValueConstant = savedClassModObject.ConsolidatedAttributeInitData[i].BaseValueConstant
                    classMod.ConsolidatedAttributeInitData[i].BaseValueAttribute = savedClassModObject.ConsolidatedAttributeInitData[i].BaseValueAttribute
                    classMod.ConsolidatedAttributeInitData[i].InitializationDefinition = savedClassModObject.ConsolidatedAttributeInitData[i].InitializationDefinition
                    classMod.ConsolidatedAttributeInitData[i].BaseValueScaleConstant = savedClassModObject.ConsolidatedAttributeInitData[i].BaseValueScaleConstant
                    i += 1
                    
                #Adds new weights
                i = 0
                while i < 9:
                    classMod.ConsolidatedAttributeInitData[tableSize + i].InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition", customWeightList[i])
                    i += 1
                    
                #Assigns new weight indecies
                i = 0
                for part in classMod.BetaPartData.WeightedParts:
                    part.Manufacturers = ((None, 1), )
                    part.DefaultWeightIndex = tableSize + i
                    i += 1
                i = 0
                for part in classMod.GammaPartData.WeightedParts:
                    part.Manufacturers = ((None, 1), )
                    part.DefaultWeightIndex = tableSize + i
                    i += 1
                i = 0
                for part in classMod.MaterialPartData.WeightedParts:
                    part.Manufacturers = ((None, 1), )
                    part.DefaultWeightIndex = tableSize + i
                    i += 1
                i = 0
                for part in classMod.AlphaPartData.WeightedParts:
                    part.Manufacturers = ((None, 1), )
                    i += 1
                    
                #Assigns new weight indecies specific to very rare mods
                numAlphaParts = 0
                for part in classMod.AlphaPartData.WeightedParts:
                    numAlphaParts += 1
                    
                if numAlphaParts > 6:
                
                    purple1Signifier = unrealsdk.FindObject("ClassModPartDefinition","GD_ClassMods.Specialization.Spec_NoSkill")
                    purple2Signifier = unrealsdk.FindObject("ClassModPartDefinition","GD_ClassMods.Specialization.Spec_AS1_BS2_-CS3")
                    purple3Signifier = unrealsdk.FindObject("ClassModPartDefinition","GD_ClassMods.Specialization.Spec_AS1_BS2_CS3")
                    i = 0
                    remainingPartsToModify = 0
                    modifyIndex = -1
                    exception = False
                    for part in classMod.AlphaPartData.WeightedParts:
                        if part.Part == purple1Signifier:
                            remainingPartsToModify = 4
                            modifyIndex = tableSize + 6
                            exception = True
                        elif part.Part == purple2Signifier:
                            remainingPartsToModify = 6
                            modifyIndex = tableSize + 7
                        elif part.Part == purple3Signifier:
                            remainingPartsToModify = 3
                            modifyIndex = tableSize + 8
                            
                        if remainingPartsToModify > 0:
                            if exception == False:
                                part.DefaultWeightIndex = modifyIndex
                                remainingPartsToModify -= 1
                            else:
                                classMod.AlphaPartData.WeightedParts[i].DefaultWeightIndex = modifyIndex
                                classMod.AlphaPartData.WeightedParts[i + 1].DefaultWeightIndex = modifyIndex
                                classMod.AlphaPartData.WeightedParts[i + 4].DefaultWeightIndex = modifyIndex
                                classMod.AlphaPartData.WeightedParts[i + 7].DefaultWeightIndex = modifyIndex
                                remainingPartsToModify = 0
                                exception = False
                        i += 1

        if self.hasBeenEnabled == False and self.classModPartsOption.CurrentValue == True:
            ScaleClassMods()
            
        def ScaleShields():
            PC = GetEngine().GamePlayers[0].Actor
            
            shieldList = unrealsdk.FindAll("ShieldDefinition")
            maliwanBattery = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Battery.Battery5_Maliwan")
            maliwanBody = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Body.Body5_Maliwan")
            maliwanCapacitorFire = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_FireRes")
            maliwanCapacitorCorrosive = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_CorrosiveRes")
            maliwanCapacitorShock = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_ShockRes")
            
            for shield in shieldList:
                #Makes maliwan bodies and batteries 100
                if shield.AlphaParts:
                    for part in shield.AlphaParts.WeightedParts:
                        if part.Part == maliwanBody:
                            part.DefaultWeightIndex = 1
                if shield.BetaParts:
                    for part in shield.BetaParts.WeightedParts:
                        if part.Part == maliwanBattery:
                            part.DefaultWeightIndex = 1
                            
                #Increases maliwan capacitor chances to equal 100 between all of the ones each shield can generate with
                maliwanCapacitorCount = 0
                if shield.GammaParts:
                    for part in shield.GammaParts.WeightedParts:
                        if part.Part == maliwanCapacitorFire or part.Part == maliwanCapacitorCorrosive or part.Part == maliwanCapacitorShock:
                            maliwanCapacitorCount += 1
                            
                    if maliwanCapacitorCount == 1:
                        for part in shield.GammaParts.WeightedParts:
                            if part.Part == maliwanCapacitorFire or part.Part == maliwanCapacitorCorrosive or part.Part == maliwanCapacitorShock:
                                part.DefaultWeightIndex = 1
                            
                    if maliwanCapacitorCount == 3:
                        isDone = False
                        for data in shield.GammaParts.ConsolidatedAttributeInitData:
                            if data.BaseValueConstant == 33:
                                isDone = True
                        
                        if isDone == False:
                            tableSize = 0
                            for data in shield.GammaParts.ConsolidatedAttributeInitData:
                                tableSize += 1
                            savedShieldPartsObject = unrealsdk.FindObject("ItemPartListDefinition",f"{shield.GammaParts.Outer}.{shield.GammaParts.Name}Saved")
                            if savedShieldPartsObject is None:
                                savedShieldPartsObject = unrealsdk.ConstructObject(
                                    Class=shield.GammaParts.Class,
                                    Outer=shield.GammaParts.Outer,
                                    Name=f"{shield.GammaParts.Name}Saved",
                                    Template=shield.GammaParts
                                )
                            
                            bigString = "("
                            littleString = "(BaseValueConstant=33.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)"
                            
                            i = 0
                            while i <= tableSize:
                                bigString = bigString + littleString
                                if i < tableSize:
                                    bigString = bigString + ","
                                i += 1
                            bigString = bigString + ")"
                            
                            PC.ServerRCon(f"set {PC.PathName(shield.GammaParts)} ConsolidatedAttributeInitData " + bigString)
                            
                            i = 0
                            while i < tableSize:
                                shield.GammaParts.ConsolidatedAttributeInitData[i].BaseValueConstant = savedShieldPartsObject.ConsolidatedAttributeInitData[i].BaseValueConstant
                                shield.GammaParts.ConsolidatedAttributeInitData[i].BaseValueAttribute = savedShieldPartsObject.ConsolidatedAttributeInitData[i].BaseValueAttribute
                                shield.GammaParts.ConsolidatedAttributeInitData[i].InitializationDefinition = savedShieldPartsObject.ConsolidatedAttributeInitData[i].InitializationDefinition
                                shield.GammaParts.ConsolidatedAttributeInitData[i].BaseValueScaleConstant = savedShieldPartsObject.ConsolidatedAttributeInitData[i].BaseValueScaleConstant
                                i += 1
                                
                            for part in shield.GammaParts.WeightedParts:
                                if part.Part == maliwanCapacitorFire or part.Part == maliwanCapacitorCorrosive or part.Part == maliwanCapacitorShock:
                                    part.DefaultWeightIndex = tableSize
                        
                        else:
                            tableSize = 0
                            for data in shield.GammaParts.ConsolidatedAttributeInitData:
                                tableSize += 1
                                
                            for part in shield.GammaParts.WeightedParts:
                                if part.Part == maliwanCapacitorFire or part.Part == maliwanCapacitorCorrosive or part.Part == maliwanCapacitorShock:
                                    part.DefaultWeightIndex = tableSize - 1
        
        def ResetShields():
            shieldList = unrealsdk.FindAll("ShieldDefinition")
            maliwanBattery = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Battery.Battery5_Maliwan")
            maliwanBody = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Body.Body5_Maliwan")
            maliwanCapacitorFire = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_FireRes")
            maliwanCapacitorCorrosive = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_CorrosiveRes")
            maliwanCapacitorShock = unrealsdk.FindObject("ShieldPartDefinition", "GD_Shields.Capacitor.Capacitor5_Maliwan_ShockRes")
            sham = unrealsdk.FindObject("ShieldDefinition", "GD_Shields.A_Item.Shield_Absorption_05_LegendaryNormal")
            fireNova1 = unrealsdk.FindObject("ShieldDefinition", "GD_Shields.A_Item.Shield_Nova_Fire")
            fireNova2 = unrealsdk.FindObject("ShieldDefinition", "GD_Shields.A_Item.Shield_Nova_Fire_Phoenix")
            
            uncommonWeight = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon")
            
            #Makes maliwan bodies and batteries 100
            for shield in shieldList:
                if shield.AlphaParts and shield != sham:
                    uncommonIndex = -1
                    i = 0
                    for data in shield.AlphaParts.ConsolidatedAttributeInitData:
                        if data.InitializationDefinition == uncommonWeight:
                            uncommonIndex = i
                        i += 1
                
                    for part in shield.AlphaParts.WeightedParts:
                        if part.Part == maliwanBody:
                            part.DefaultWeightIndex = uncommonIndex
                if shield.BetaParts and shield != sham:
                    uncommonIndex = -1
                    i = 0
                    for data in shield.BetaParts.ConsolidatedAttributeInitData:
                        if data.InitializationDefinition == uncommonWeight:
                            uncommonIndex = i
                        i += 1
                
                    for part in shield.BetaParts.WeightedParts:
                        if part.Part == maliwanBattery:
                            part.DefaultWeightIndex = uncommonIndex
                if shield.GammaParts and shield != fireNova1 and shield != fireNova2:
                    uncommonIndex = -1
                    i = 0
                    for data in shield.GammaParts.ConsolidatedAttributeInitData:
                        if data.InitializationDefinition == uncommonWeight:
                            uncommonIndex = i
                        i += 1
                        
                    for part in shield.GammaParts.WeightedParts:
                        if part.Part == maliwanCapacitorFire or part.Part == maliwanCapacitorCorrosive or part.Part == maliwanCapacitorShock:
                            part.DefaultWeightIndex = uncommonIndex
        
        #Gives the hide of terra accessory custom weightings
        def FixHideOfTerra():
            PC = GetEngine().GamePlayers[0].Actor
            hideAccessoryObject = unrealsdk.FindObject("ItemPartListDefinition","GD_Shields.Accessory.PartsList_Accessory_Roid_ThresherRaid")
            customHideWeights = [
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Hide1"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Hide2"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Hide3"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Hide4"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Hide5")
            ]
            PC.ServerRCon(f"set {PC.PathName(hideAccessoryObject)} ConsolidatedAttributeInitData ((BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=100.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
            i = 0
            for data in hideAccessoryObject.ConsolidatedAttributeInitData:
                if i >= 3:
                    data.InitializationDefinition = customHideWeights[i - 3]
                i += 1
            
            i = 0
            for part in hideAccessoryObject.WeightedParts:
                part.DefaultWeightIndex = i + 3
                i += 1
        
        if self.hasBeenEnabled == False and self.shieldPartsOption.CurrentValue == True:
            FixHideOfTerra()
        
        #Adjusts the weight of the vertical grip for the carnage (and butcher)
        def FixCarnageVerticalGrip():
            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_CarnageVerticalGrip") and unrealsdk.FindObject("WeaponPartListCollectionDefinition","GD_Lobelia_Weapons.Shotguns.SG_Torgue_6_Carnage:WeaponPartListCollectionDefinition_294"):
                customWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_CarnageVerticalGrip")
                carnagePartsObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition","GD_Lobelia_Weapons.Shotguns.SG_Torgue_6_Carnage:WeaponPartListCollectionDefinition_294")
                carnageIndex = ExpandWeightTable("WeaponPartListCollectionDefinition", "GD_Lobelia_Weapons.Shotguns.SG_Torgue_6_Carnage:WeaponPartListCollectionDefinition_294", 1)
                carnagePartsObject.ConsolidatedAttributeInitData[carnageIndex].BaseValueConstant = 0
                carnagePartsObject.ConsolidatedAttributeInitData[carnageIndex].InitializationDefinition = customWeightObject
                carnagePartsObject.Accessory1PartData.WeightedParts[6].DefaultWeightIndex = carnageIndex
            
            if unrealsdk.FindObject("WeaponPartListCollectionDefinition","GD_Gladiolus_Weapons.Shotgun.SG_Hyperion_6_Butcher:WeaponPartListCollectionDefinition_285") and unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_CarnageVerticalGrip"):
                customWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_CarnageVerticalGrip")
                butcherPartsObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition","GD_Gladiolus_Weapons.Shotgun.SG_Hyperion_6_Butcher:WeaponPartListCollectionDefinition_285")
                butcherIndex = ExpandWeightTable("WeaponPartListCollectionDefinition", "GD_Gladiolus_Weapons.Shotgun.SG_Hyperion_6_Butcher:WeaponPartListCollectionDefinition_285", 1)
                butcherPartsObject.ConsolidatedAttributeInitData[butcherIndex].BaseValueConstant = 0
                butcherPartsObject.ConsolidatedAttributeInitData[butcherIndex].InitializationDefinition = customWeightObject
                butcherPartsObject.Accessory1PartData.WeightedParts[6].DefaultWeightIndex = butcherIndex
            

        if self.hasBeenEnabled == False and self.weaponPartsOption.CurrentValue == True:
            FixCarnageVerticalGrip()
            
        #Replaces LWT Loader loot with red chest loot
        def FixLWTLoaderLoot():
            if unrealsdk.FindObject("InteractiveObjectBalanceDefinition","GD_Balance_Treasure.ChestGradesUnique.ObjectGrade_HypWeaponChestBot"):
                lootLoaderObject = unrealsdk.FindObject("InteractiveObjectBalanceDefinition","GD_Balance_Treasure.ChestGradesUnique.ObjectGrade_HypWeaponChestBot")
                
                oldPoolObject = unrealsdk.FindObject("InteractiveObjectLootListDefinition","GD_Itempools.ListDefs.WeaponChestWhiteLoot")
                newPoolObject = unrealsdk.FindObject("InteractiveObjectLootListDefinition","GD_Itempools.ListDefs.WeaponChestWhiteLootNowEpic")
                if newPoolObject is None:
                    newPoolObject = unrealsdk.ConstructObject(
                        Class=oldPoolObject.Class,
                        Outer=oldPoolObject.Outer,
                        Name="WeaponChestWhiteLootNowEpic",
                        Template=oldPoolObject
                    )
                unrealsdk.KeepAlive(newPoolObject)
                
                epicPools = [
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_LongGuns",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_Pistols",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Weapons_Launchers",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Shields",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_GrenadeMods",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_ClassMods",
                    "GD_Itempools.Treasure_ChestPools.Pool_EpicChest_Artifacts"
                ]
                
                i = 0
                for lootData in newPoolObject.LootData:
                    if i != 2:
                        for attachment in lootData.ItemAttachments:
                            attachment.ItemPool = unrealsdk.FindObject("ItemPoolDefinition",epicPools[i])
                    else:
                        lootData.ItemAttachments[0].ItemPool = unrealsdk.FindObject("ItemPoolDefinition",epicPools[i])
                    i += 1
                    
                lootLoaderObject.DefaultIncludedLootLists[0] = newPoolObject
                
        #Makes the loaders in control core angel drop loot
        def FixControlCoreLoadersLoot():
            if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderBadass_HealthCashAmmoOnly"):
                badassLoaderObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderBadass_HealthCashAmmoOnly")
                badassGearObject = unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.BadassEnemyGunsAndGear")
                badassLoaderObject.DefaultItemPoolIncludedLists[0] = badassGearObject
            
            if unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear"):
                standardGearObject = unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear")
                if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderION_HealthCashAmmoOnly"):
                    ionLoaderObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderION_HealthCashAmmoOnly")
                    ionLoaderObject.DefaultItemPoolIncludedLists[0] = standardGearObject
                if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderGUN_HealthCashAmmoOnly"):
                    gunLoaderObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderGUN_HealthCashAmmoOnly")
                    gunLoaderObject.DefaultItemPoolIncludedLists[0] = standardGearObject
                if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderWAR_HealthCashAmmoOnly"):
                    warLoaderObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderWAR_HealthCashAmmoOnly")
                    warLoaderObject.DefaultItemPoolIncludedLists[0] = standardGearObject
                if unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderGuard"):
                    guardLoaderObject = unrealsdk.FindObject("AIPawnBalanceDefinition","GD_Population_Loader.Balance.PawnBalance_LoaderGuard")
                    guardLoaderObject.DefaultItemPoolIncludedLists[0] = standardGearObject
        
        #Makes the player's starter echo override dialogue
        def SetEchoBehavior():
            self.dialogGroupObject.EventTags[0] = unrealsdk.FindObject("WillowDialogEventTag", "GD_Dialog_Machines.Events.DialogEvent_VendingOpened")
            
            #dialogGroupObject = unrealsdk.FindObject("GearboxDialogGroup","GD_Orchid_DialogChapter2.Groups.Orchid_DialogGroup_Chapter2")
            #dialogGroupObject.ParentGroup = None
            '''
            PC = GetEngine().GamePlayers[0].Actor
            dialogGlobalsObject = unrealsdk.FindObject("WillowDialogGlobalsDefinition","GD_Globals.Dialog.DialogGlobals")
            dialogGroupObject = unrealsdk.FindObject("GearboxDialogGroup","GD_Orchid_DialogChapter2.Groups.Orchid_DialogGroup_Chapter2")
            for act in dialogGroupObject.TalkActs:
                act.bInstigatorTalker = True
            dialogActObject = unrealsdk.FindObject("WillowDialogAct_Talk","GD_Orchid_DialogChapter2.Groups.Orchid_DialogGroup_Chapter2:WillowDialogAct_Talk_238")
            dialogActObject.bInstigatorTalker = True
            dialogActObject.VariableLinks[0] = ((None,),)
            '''
            oldPriorityObject = unrealsdk.FindObject("GearboxDialogPriority","GD_Globals.Dialog.DialogPriority_100")
            '''
            highPriorityObject = unrealsdk.FindObject("GearboxDialogPriority","GD_Globals.Dialog.DialogPriority_200")
            if highPriorityObject is None:
                highPriorityObject = unrealsdk.ConstructObject(
                    Class=oldPriorityObject.Class,
                    Outer=oldPriorityObject.Outer,
                    Name=f"{oldPriorityObject.Name}_200",
                    Template=oldPriorityObject
                )
            unrealsdk.KeepAlive(highPriorityObject)
            PC.ServerRCon(f"set {PC.PathName(dialogGlobalsObject)} Priorities (GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_200',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_100', GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_90', GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_80', GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_70',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_60',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_50',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_40',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_35',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_30',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_25',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_20',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_10',GearboxDialogPriority'GD_Globals.Dialog.DialogPriority_05')")
            
            jenniferObject = unrealsdk.FindObject("WillowDialogEventTag","GD_Orchid_DialogChapter2.Events.Orchid_VO_Chapter2_0160_Live_Jennifer")
            #jenniferObject.bDoesNotOverrideSamePriority = True
            #jenniferObject.bGroupEvent = False
            #jenniferObject.bOncePerSession = False
            #jenniferObject.Priority = unrealsdk.FindObject("GearboxDialogPriority","GD_Globals.Dialog.DialogPriority_90")
            #jockoObject.bOncePerSession = False
            #jockoObject.bIsEchoEvent = True
            '''
            #blayvisObject = unrealsdk.FindObject("WillowDialogEventTag","GD_Orchid_DialogChapter2.Events.Orchid_VO_Chapter2_0100_Live_Blayvis")
            #blayvisObject.bMultiplayerOnly = True
            
            dialogTagList = [
                "GD_VOCT_InvEcho.Events.VOCT_Axton_INVEcho",
                "GD_VOCT_InvEcho.Events.VOCT_Maya_INVEcho",
                "GD_VOCT_InvEcho.Events.VOCT_Sal_INVEcho",
                "GD_VOCT_InvEcho.Events.VOCT_Zero_INVEcho"
            ]
            
            for tag in dialogTagList:
                tagObject = unrealsdk.FindObject("WillowDialogEventTag", tag)
                tagObject.Priority = oldPriorityObject#highPriorityObject

        if self.hasBeenEnabled == False:
            SetEchoBehavior()
        
        #Makes eridium be picked up automatically
        def MakeEridiumPickupAutomatically(value):
            eridiumBarObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumBar")
            eridiumStickObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumStick")
            
            eridiumBarObject.bAutomaticallyPickup = value
            eridiumStickObject.bAutomaticallyPickup = value
            
        if self.hasBeenEnabled == False:
            if self.autopickupOption.CurrentValue == "Always":
                MakeEridiumPickupAutomatically(True)
            else:
                MakeEridiumPickupAutomatically(False)

        #Neccessary to set the option to its default value
        def ChangeEridiumColour():
            globalsObject = unrealsdk.FindObject("GlobalsDefinition", "GD_Globals.General.Globals")
            if self.CurrencyBeamOption.CurrentValue == "Yellow":
                globalsObject.RarityLevelColors[15].Color.R = globalsObject.RarityLevelColors[11].Color.R
                globalsObject.RarityLevelColors[15].Color.G = globalsObject.RarityLevelColors[11].Color.G
                globalsObject.RarityLevelColors[15].Color.B = globalsObject.RarityLevelColors[11].Color.B
                if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                
                if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
            else:
                globalsObject.RarityLevelColors[15].Color.R = 145
                globalsObject.RarityLevelColors[15].Color.G = 50
                globalsObject.RarityLevelColors[15].Color.B = 200
                if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                
                if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
        
        if self.hasBeenEnabled == False:
            ChangeEridiumColour()

        def HandleStarterEquipment(weaponStatus, grenadeStatus):
            PC = GetEngine().GamePlayers[0].Actor
            #Weapons
            if weaponStatus == True:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_PremierClub UnlockItems ((GameStage=1,UnlockItems=(InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_VaultHunter',WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX',WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1',WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1'),UnlockItemPools=))")
            else:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_PremierClub UnlockItems ()")
                    
            #Grenade
            if grenadeStatus == True:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_Collectors UnlockItems ((GameStage=1,UnlockItems=(InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_SkyRocket'),UnlockItemPools=(KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.DigitalEdHeads',KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.DigitalEdSkins')))")
            else:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_Collectors UnlockItems ()")
                
        if self.hasBeenEnabled == False:
            if self.startingGearOption.CurrentValue == "All":
                HandleStarterEquipment(True, True)
            elif self.startingGearOption.CurrentValue == "None":
                HandleStarterEquipment(False, False)
            elif self.startingGearOption.CurrentValue == "Special Edition":
                HandleStarterEquipment(False, True)
            elif self.startingGearOption.CurrentValue == "Premiere Club":
                HandleStarterEquipment(True, False)
        
        #Set preferred vehicles to their default values
        def ChangeVehicleOrder():
            catapultObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_CatapultTechnical")
            sawbladeObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_SawBladeTechnical")
            MGObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_MGRunner")
            rocketObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_RocketRunner")
            
            if self.preferredTechnicalOption.CurrentValue == "Catapult":
                catapultObject.PreferredOrdering = 0
                sawbladeObject.PreferredOrdering = 3
            else:
                catapultObject.PreferredOrdering = 3
                sawbladeObject.PreferredOrdering = 0
            
            if self.preferredRunnerOption.CurrentValue == "Rocket":
                MGObject.PreferredOrdering = 6
                rocketObject.PreferredOrdering = 5
            else:
                MGObject.PreferredOrdering = 5
                rocketObject.PreferredOrdering = 6

        if self.hasBeenEnabled == False:
            ChangeVehicleOrder()
        
        def SetTravelDelay():
            PC = GetEngine().GamePlayers[0].Actor
            value = self.travelDelayOption.CurrentValue + 1
            PC.ServerRCon(f"set globals traveldelay {value}")
            
        if self.hasBeenEnabled == False:
            SetTravelDelay()

        #Changes the math in the randomizers for item drops and enemy spawns
        def SetLevelRandomizers():
            #Removes underlevel drops from uvhm while maintaining the ratio of overlevel drops. Permits underlevel drops if there are underlevel players in the party and the game is not in the op levels
            #Player controller
            PC = GetEngine().GamePlayers[0].Actor
            OPLevel = GetOPLevel(PC)
            
            #Makes sure enemy level choice is not impacted
            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus01-Plus01"):
                baseRandomObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus01-Plus01")
                customRandomObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus01-Plus01_Stored")
                
                if customRandomObject is None:
                    customRandomObject = unrealsdk.ConstructObject(
                        Class=baseRandomObject.Class,
                        Outer=baseRandomObject.Outer,
                        Name="Random_Minus01-Plus01_Stored",
                        Template=baseRandomObject
                    )
                    
                unrealsdk.KeepAlive(customRandomObject)
                if unrealsdk.FindObject("SimpleMathValueResolver","GD_Balance.EnemyLevel.EnemyLevel_GameStage_MinorVariance:SimpleMathValueResolver_0"):
                    enemyLevelObject = unrealsdk.FindObject("SimpleMathValueResolver","GD_Balance.EnemyLevel.EnemyLevel_GameStage_MinorVariance:SimpleMathValueResolver_0")
                    enemyLevelObject.Argument.InitializationDefinition = customRandomObject
            
            minus1plus1Lower = -1
            minus1plus1Upper = 1
            minus2plus1Lower = -2
            minus2plus1Upper = 1
            vendorLower = -2
            vendorUpper = 0
            
            if OPLevel > 0 :
                minus1plus1Lower = 0
                minus1plus1Upper = 0
                minus2plus1Lower = 0
                minus2plus1Upper = 0
                vendorLower = 0
                vendorUpper = 0
            elif PC.GetCurrentPlaythrough() == 2:
                minus1plus1Lower = 0
                minus1plus1Upper = 0
                minus2plus1Lower = 0
                minus2plus1Upper = 0
                vendorLower = 0
                vendorUpper = 0
            else:
                minus1plus1Lower = -1
                minus1plus1Upper = 1
                minus2plus1Lower = -2
                minus2plus1Upper = 1
                vendorLower = -2
                vendorUpper = 0

            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus02-Plus01"):
                #PC.ServerRCon(f"set AttributeInitializationDefinition'GD_Balance.RandomNumbers.Random_Minus02-Plus01' RandomVariance (bEnabled=True,bUseIntegerRandomization=True,LowerBound=(BaseValueConstant={minus2plus1Lower},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),UpperBound=(BaseValueConstant={minus2plus1Upper},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                randomObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus02-Plus01")
                randomObject.RandomVariance.LowerBound.BaseValueConstant = minus2plus1Lower
                randomObject.RandomVariance.UpperBound.BaseValueConstant = minus2plus1Upper
            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus01-Plus01"):
                #PC.ServerRCon(f"set AttributeInitializationDefinition'GD_Balance.RandomNumbers.Random_Minus01-Plus01' RandomVariance (bEnabled=True,bUseIntegerRandomization=True,LowerBound=(BaseValueConstant={minus1plus1Lower},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),UpperBound=(BaseValueConstant={minus1plus1Upper},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))")
                randomObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.RandomNumbers.Random_Minus01-Plus01")
                randomObject.RandomVariance.LowerBound.BaseValueConstant = minus1plus1Lower
                randomObject.RandomVariance.UpperBound.BaseValueConstant = minus1plus1Upper
            if unrealsdk.FindObject("AttributeInitializationDefinition","GD_Economy.VendingMachine.Init_VendingMachine_LootGamestageVariance"):
                randomObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Economy.VendingMachine.Init_VendingMachine_LootGamestageVariance")
                randomObject.RandomVariance.LowerBound.BaseValueConstant = vendorLower
                randomObject.RandomVariance.UpperBound.BaseValueConstant = vendorUpper

        def FixGrenadeMods():
            #Applies tunable values to manufacturer choice in certain types of grenades
            StandardGrenadesList = [
                "GD_GrenadeMods.A_Item.GM_Standard",
                "GD_GrenadeMods.A_Item.GM_Standard_2_Uncommon",
                "GD_GrenadeMods.A_Item.GM_Standard_3_Rare",
                "GD_GrenadeMods.A_Item.GM_Standard_4_VeryRare"
            ]
            MirvGrenadesList = [
                "GD_GrenadeMods.A_Item.GM_Mirv",
                "GD_GrenadeMods.A_Item.GM_Mirv_2_Uncommon",
                "GD_GrenadeMods.A_Item.GM_Mirv_3_Rare",
                "GD_GrenadeMods.A_Item.GM_Mirv_4_VeryRare"
            ]
            BettyGrenadesList = [
                "GD_GrenadeMods.A_Item.GM_BouncingBetty",
                "GD_GrenadeMods.A_Item.GM_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.A_Item.GM_BouncingBetty_3_Rare",
                "GD_GrenadeMods.A_Item.GM_BouncingBetty_4_VeryRare"
            ]
            
            for grenade in StandardGrenadesList:
                grenadeObject = unrealsdk.FindObject("InventoryBalanceDefinition",grenade)
                grenadeObject.Manufacturers[1].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditStandard
                grenadeObject.Manufacturers[1].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditStandard
                
            for grenade in MirvGrenadesList:
                grenadeObject = unrealsdk.FindObject("InventoryBalanceDefinition",grenade)
                grenadeObject.Manufacturers[1].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditMirv
                grenadeObject.Manufacturers[1].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditMirv
                
            for grenade in BettyGrenadesList:
                grenadeObject = unrealsdk.FindObject("InventoryBalanceDefinition",grenade)
                grenadeObject.Manufacturers[1].Grades[0].MinSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditBetty
                grenadeObject.Manufacturers[1].Grades[0].MaxSpawnProbabilityModifier.BaseValueConstant = self.nadeBanditBetty
                
            #Applies custom weights to many grenades' deliveries
            banditNadeList = [
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare"
            ]
            
            legendaryNadeList = [
                "GD_GrenadeMods.PartLists.Parts_BonusPackage",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_GrenadeMods.PartLists.Parts_Quasar"
            ]
            
            legendaryVladofNadeList = [
                "GD_GrenadeMods.PartLists.Parts_FireBee",
                "GD_GrenadeMods.PartLists.Parts_StormFront",
                "GD_GrenadeMods.PartLists.Parts_Pandemic"
            ]
            
            banditStickyWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickyCommon"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickyUncommon"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickyRare"),
                unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickyVeryRare")
            ]

            banditLobbedWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditLobbed")
            legendaryLobbedWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_LegendaryLobbed")
            legendaryLobbedVladofWeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_LegendaryLobbedVladof")
            banditStickySpecial1WeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickySpecial1")
            banditStickySpecial2WeightObject = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BanditStickySpecial2")
            
            banditObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Bandit")
            lobbedObject = unrealsdk.FindObject("GrenadeModPartDefinition","GD_GrenadeMods.Delivery.Delivery_Lob")
            lobbedStickyObject = unrealsdk.FindObject("GrenadeModPartDefinition","GD_GrenadeMods.Delivery.Delivery_Lob_Sticky")
            longbowStickyObject = unrealsdk.FindObject("GrenadeModPartDefinition","GD_GrenadeMods.Delivery.Delivery_LongBow_Sticky")
            homingStickyObject = unrealsdk.FindObject("GrenadeModPartDefinition","GD_GrenadeMods.Delivery.Delivery_Homing_Sticky")
            
            rarityNumber = 1
            for grenade in banditNadeList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                for part in grenadeObject.BetaPartData.WeightedParts:
                    #Lobbed
                    if part.Part == lobbedObject:
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers > 0:
                            for manufacturer in part.Manufacturers:
                                if manufacturer.Manufacturer == banditObject:
                                    i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                                    manufacturer.DefaultWeightIndex = i
                                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = banditLobbedWeightObject
                    
                    #Lobbed Sticky
                    if part.Part == lobbedStickyObject:
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers > 0:
                            for manufacturer in part.Manufacturers:
                                if manufacturer.Manufacturer == banditObject:
                                    i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                                    manufacturer.DefaultWeightIndex = i
                                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = banditStickyWeightList[rarityNumber - 1]
                    
                    #Longbow Sticky and Homing Sticky
                    if part.Part == longbowStickyObject or part.Part == homingStickyObject:
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers > 0:
                            for manufacturer in part.Manufacturers:
                                if manufacturer.Manufacturer == banditObject:
                                    i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                                    manufacturer.DefaultWeightIndex = i
                                    if rarityNumber == 2 or rarityNumber == 3:
                                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = banditStickySpecial1WeightObject
                                    elif rarityNumber == 4:
                                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = banditStickySpecial2WeightObject

                if rarityNumber == 4:
                    rarityNumber = 1
                else:
                    rarityNumber += 1
            
            #Legendary Lobbed
            for grenade in legendaryNadeList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                for part in grenadeObject.BetaPartData.WeightedParts:
                    if part.Part == lobbedObject:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers == 0:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = i
                        
                        else:
                            for manufacturer in part.Manufacturers:
                                manufacturer.DefaultWeightIndex = i
                                
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = legendaryLobbedWeightObject
                        
            #Legendary Lobbed Vladof
            for grenade in legendaryVladofNadeList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                for part in grenadeObject.BetaPartData.WeightedParts:
                    if part.Part == lobbedObject:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers == 0:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = i
                        
                        else:
                            for manufacturer in part.Manufacturers:
                                manufacturer.DefaultWeightIndex = i
                                
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = legendaryLobbedVladofWeightObject
                
            #Applies custom weights to most grenades' fuse times
            fuseList = [
                "GD_GrenadeMods.PartLists.Parts_AreaEffect",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Singularity",
                "GD_GrenadeMods.PartLists.Parts_Singularity_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Singularity_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Singularity_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare"
            ]
            
            uniqueFuseList = [
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_GrenadeMods.PartLists.Parts_FireBee",
                "GD_GrenadeMods.PartLists.Parts_StormFront",
                "GD_GrenadeMods.PartLists.Parts_Pandemic",
                "GD_GrenadeMods.PartLists.Parts_Fastball",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_GrenadeMods.PartLists.Parts_NastySurprise",
                "GD_GrenadeMods.PartLists.Parts_Quasar",
                "GD_Iris_SeraphItems.Crossfire.Iris_Seraph_GrenadeMod_Crossfire_PartListCollection",
                "GD_Iris_SeraphItems.MeteorShower.Iris_Seraph_GrenadeMod_MeteorShower_PartListCollection",
                "GD_Anemone_GrenadeMods.PartLists.Parts_FireBee",
                "GD_Anemone_GrenadeMods.PartLists.Parts_StormFront"
            ]
            
            fuseCommonWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseCommon5")
            ]
            
            fuseUncommonWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseUncommon5")
            ]
            
            fuseRareWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseRare5")
            ]
            
            fuseVeryRareWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseVeryRare5")
            ]
            
            fuseWeightList = [
                fuseCommonWeightList,
                fuseUncommonWeightList,
                fuseRareWeightList,
                fuseVeryRareWeightList
            ]
            
            tedioreObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Tediore")
            maliwanObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Maliwan")
            
            rarityNumber = 1
            for grenade in fuseList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 6)
                j = 0
                for part in grenadeObject.GammaPartData.WeightedParts:
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i + j
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            if manufacturer.Manufacturer != tedioreObject and manufacturer != maliwanObject:
                                manufacturer.DefaultWeightIndex = i + j
                    
                    grenadeObject.ConsolidatedAttributeInitData[i + j].InitializationDefinition = fuseWeightList[rarityNumber - 1][j]
                    j += 1
                    
                if rarityNumber == 4:
                    rarityNumber = 1
                else:
                    rarityNumber += 1
            
            for grenade in uniqueFuseList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 6)
                j = 0
                for part in grenadeObject.GammaPartData.WeightedParts:
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i + j
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            if manufacturer.Manufacturer != tedioreObject and manufacturer != maliwanObject:
                                manufacturer.DefaultWeightIndex = i + j
                    
                    grenadeObject.ConsolidatedAttributeInitData[i + j].InitializationDefinition = fuseWeightList[3][j]
                    j += 1
            
            fuseFastList = [
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection"
            ]
            
            fuseFastWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_FuseFast5")
            ]
            
            for grenade in fuseFastList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 6)
                j = 0
                for part in grenadeObject.GammaPartData.WeightedParts:
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i + j
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            if manufacturer.Manufacturer == tedioreObject or manufacturer.Manufacturer == maliwanObject:
                                manufacturer.DefaultWeightIndex = i + j
                    
                    if grenadeObject == unrealsdk.FindObject("ItemPartListCollectionDefinition", "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection"):
                        grenadeObject.ConsolidatedAttributeInitData[i + j].InitializationDefinition = fuseFastWeightList[j + 2]
                    else:
                        grenadeObject.ConsolidatedAttributeInitData[i + j].InitializationDefinition = fuseFastWeightList[j]
                    j += 1
            
            #Applies custom weights to most grenades' element part
            goodExplosiveNadesList = [
                "GD_GrenadeMods.PartLists.Parts_Singularity",
                "GD_GrenadeMods.PartLists.Parts_Singularity_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Singularity_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Singularity_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare"
            ]
            
            badExplosiveNadesList = [
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare"
            ]
            
            goodExplosiveLegendaryNadesList = [
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_GrenadeMods.PartLists.Parts_Fastball",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection"
            ]
            
            badExplosiveLegendaryNadesList = [
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_Iris_SeraphItems.Crossfire.Iris_Seraph_GrenadeMod_Crossfire_PartListCollection"
            ]
            
            nastySurpriseObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", "GD_GrenadeMods.PartLists.Parts_NastySurprise")
            
            explosiveWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Explosive2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Explosive4A"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Explosive4B"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Explosive5"),
            ]
            
            explosiveBadWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ExplosiveBad2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ExplosiveBad4A"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ExplosiveBad4B"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ExplosiveBad5"),
            ]
            
            rarityNumber = 1
            for grenade in goodExplosiveNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                if rarityNumber == 1:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[0]
                        
                elif rarityNumber == 2:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[1]
                
                elif rarityNumber == 3:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[3]
                    
                else:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[2]
                
                for manufacturer in grenadeObject.DeltaPartData.WeightedParts[0].Manufacturers:
                    manufacturer.DefaultWeightIndex = i
                
                if rarityNumber == 4:
                    rarityNumber = 1
                else:
                    rarityNumber += 1
                    
            rarityNumber = 1
            for grenade in badExplosiveNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                if rarityNumber == 1:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveBadWeightList[0]
                        
                elif rarityNumber == 2:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveBadWeightList[1]
                
                elif rarityNumber == 3:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveBadWeightList[3]
                    
                else:
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveBadWeightList[2]
                
                for manufacturer in grenadeObject.DeltaPartData.WeightedParts[0].Manufacturers:
                    manufacturer.DefaultWeightIndex = i
                
                if rarityNumber == 4:
                    rarityNumber = 1
                else:
                    rarityNumber += 1
            
            for grenade in goodExplosiveLegendaryNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[2]
                for manufacturer in grenadeObject.DeltaPartData.WeightedParts[0].Manufacturers:
                    manufacturer.DefaultWeightIndex = i
                    
            for grenade in badExplosiveLegendaryNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveBadWeightList[2]
                for manufacturer in grenadeObject.DeltaPartData.WeightedParts[0].Manufacturers:
                    manufacturer.DefaultWeightIndex = i
                    
            i = ExpandWeightTable("ItemPartListCollectionDefinition", "GD_GrenadeMods.PartLists.Parts_NastySurprise", 1)
            nastySurpriseObject.ConsolidatedAttributeInitData[i].InitializationDefinition = explosiveWeightList[2]
            nastySurpriseObject.DeltaPartData.WeightedParts[0].DefaultWeightIndex = i
            
            elementChanceNadesList = [
                "GD_GrenadeMods.PartLists.Parts_AreaEffect",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Singularity",
                "GD_GrenadeMods.PartLists.Parts_Singularity_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Singularity_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Singularity_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_GrenadeMods.PartLists.Parts_FireBee",
                "GD_GrenadeMods.PartLists.Parts_StormFront",
                "GD_GrenadeMods.PartLists.Parts_Pandemic",
                "GD_GrenadeMods.PartLists.Parts_Fastball",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_GrenadeMods.PartLists.Parts_NastySurprise",
                "GD_GrenadeMods.PartLists.Parts_Quasar",
                "GD_Iris_SeraphItems.Crossfire.Iris_Seraph_GrenadeMod_Crossfire_PartListCollection",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection",
                "GD_Iris_SeraphItems.MeteorShower.Iris_Seraph_GrenadeMod_MeteorShower_PartListCollection",
                "GD_Anemone_GrenadeMods.PartLists.Parts_FireBee",
                "GD_Anemone_GrenadeMods.PartLists.Parts_StormFront"
            ]
            
            elementChanceWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ElementChance0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ElementChance1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ElementChance2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ElementChance3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ElementChance4")
            ]
            
            explosiveObject = unrealsdk.FindObject("GrenadeModPartDefinition","GD_GrenadeMods.Accessory.Accessory_Explosive")
            torgueObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Torgue")
            
            for grenade in elementChanceNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.DeltaPartData.WeightedParts:
                    if part.Part != explosiveObject:
                        i = 0
                        grade = part.Part.Name[len(part.Part.Name) - 1]
                        gradeNum = 0
                        if grade == "1":
                            gradeNum = 1
                        elif grade == "2":
                            gradeNum = 2
                        elif grade == "3":
                            gradeNum = 3
                        elif grade == "4":
                            gradeNum = 4
                        else:
                            gradeNum = 0
                            
                        if gradeStatusList[gradeNum][1] == True:
                            i  = gradeStatusList[gradeNum][0]
                        else:
                            i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                            grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = elementChanceWeightList[gradeNum]
                            gradeStatusList[gradeNum][0] = i
                            gradeStatusList[gradeNum][1] = True
                        
                        numManufacturers = 0
                        for manufacturer in part.Manufacturers:
                            numManufacturers += 1
                            
                        if numManufacturers == 0:
                            part.Manufacturers = ((None, 1), )
                            part.DefaultWeightIndex = i
                        
                        else:
                            for manufacturer in part.Manufacturers:
                                if manufacturer.Manufacturer != torgueObject:
                                    manufacturer.DefaultWeightIndex = i
            
            #Applies custom damage weighting to all grenades
            nadesWithoutStandardOrBettyList = [
                "GD_GrenadeMods.PartLists.Parts_AreaEffect",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Singularity",
                "GD_GrenadeMods.PartLists.Parts_Singularity_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Singularity_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Singularity_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_SkyRocket",
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_Orchid_GrenadeMods.PartLists.Parts_Blade",
                "GD_Aster_GrenadeMods.PartLists.Parts_Fireball",
                "GD_Aster_GrenadeMods.PartLists.Parts_LightningBolt",
                "GD_Aster_GrenadeMods.PartLists.Parts_MagicMissile",
                "GD_Aster_GrenadeMods.PartLists.Parts_MagicMissileRare",
                "GD_GrenadeMods.PartLists.Parts_FireBee",
                "GD_GrenadeMods.PartLists.Parts_StormFront",
                "GD_GrenadeMods.PartLists.Parts_Pandemic",
                "GD_GrenadeMods.PartLists.Parts_Fastball",
                "GD_GrenadeMods.PartLists.Parts_BonusPackage",
                "GD_GrenadeMods.PartLists.Parts_RollingThunder",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_GrenadeMods.PartLists.Parts_NastySurprise",
                "GD_GrenadeMods.PartLists.Parts_Quasar",
                "GD_Aster_GrenadeMods.PartLists.Parts_FireStorm",
                "GD_Aster_GrenadeMods.PartLists.Parts_ChainLightning",
                "GD_Iris_SeraphItems.Crossfire.Iris_Seraph_GrenadeMod_Crossfire_PartListCollection",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection",
                "GD_Iris_SeraphItems.MeteorShower.Iris_Seraph_GrenadeMod_MeteorShower_PartListCollection",
                "GD_Anemone_GrenadeMods.PartLists.Parts_FireBee",
                "GD_Anemone_GrenadeMods.PartLists.Parts_StormFront"
            ]
            
            bettyNadesList = [
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
            ]
            
            standardNadesList = [
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare"
            ]
            
            banditObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Bandit")
            dahlObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Dahl")
            tedioreObject = unrealsdk.FindObject("ManufacturerDefinition","GD_Manufacturers.Manufacturers.Tediore")
            
            damageWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage5"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage6"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_Damage7")
            ]
            
            damageBanditWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit5"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit6"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_DamageBandit7")
            ]
            
            for grenade in nadesWithoutStandardOrBettyList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.EpsilonPartData.WeightedParts:
                    i = 0
                    grade = part.Part.Name[len(part.Part.Name) - 1]
                    gradeNum = 0
                    if grade == "0":
                        gradeNum = 0
                    elif grade == "1":
                        gradeNum = 1
                    elif grade == "2":
                        gradeNum = 2
                    elif grade == "3":
                        gradeNum = 3
                    elif grade == "4":
                        gradeNum = 4
                    elif grade == "5":
                        gradeNum = 5
                    elif grade == "6":
                        gradeNum = 6
                    else:
                        gradeNum = 7
                        
                    if gradeStatusList[gradeNum][1] == True:
                        i  = gradeStatusList[gradeNum][0]
                    else:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = damageWeightList[gradeNum]
                        gradeStatusList[gradeNum][0] = i
                        gradeStatusList[gradeNum][1] = True
                    
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            manufacturer.DefaultWeightIndex = i
                            
            for grenade in bettyNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.EpsilonPartData.WeightedParts:
                    i = 0
                    grade = part.Part.Name[len(part.Part.Name) - 1]
                    gradeNum = 0
                    if grade == "0":
                        gradeNum = 0
                    elif grade == "1":
                        gradeNum = 1
                    elif grade == "2":
                        gradeNum = 2
                    elif grade == "3":
                        gradeNum = 3
                    elif grade == "4":
                        gradeNum = 4
                    elif grade == "5":
                        gradeNum = 5
                    elif grade == "6":
                        gradeNum = 6
                    else:
                        gradeNum = 7
                        
                    if gradeStatusList[gradeNum][1] == True:
                        i  = gradeStatusList[gradeNum][0]
                    else:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 2)
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = damageBanditWeightList[gradeNum]
                        grenadeObject.ConsolidatedAttributeInitData[i + 1].InitializationDefinition = damageWeightList[gradeNum]
                        gradeStatusList[gradeNum][0] = i
                        gradeStatusList[gradeNum][1] = True
                    
                    part.Manufacturers = ((dahlObject, i + 1), (banditObject, i), )
                    
            for grenade in standardNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.EpsilonPartData.WeightedParts:
                    i = 0
                    grade = part.Part.Name[len(part.Part.Name) - 1]
                    gradeNum = 0
                    if grade == "0":
                        gradeNum = 0
                    elif grade == "1":
                        gradeNum = 1
                    elif grade == "2":
                        gradeNum = 2
                    elif grade == "3":
                        gradeNum = 3
                    elif grade == "4":
                        gradeNum = 4
                    elif grade == "5":
                        gradeNum = 5
                    elif grade == "6":
                        gradeNum = 6
                    else:
                        gradeNum = 7
                        
                    if gradeStatusList[gradeNum][1] == True:
                        i  = gradeStatusList[gradeNum][0]
                    else:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 2)
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = damageBanditWeightList[gradeNum]
                        grenadeObject.ConsolidatedAttributeInitData[i + 1].InitializationDefinition = damageWeightList[gradeNum]
                        gradeStatusList[gradeNum][0] = i
                        gradeStatusList[gradeNum][1] = True
                    
                    part.Manufacturers = ((tedioreObject, i + 1), (banditObject, i), )
                    
            #Applies custom blast radius scaling to standard bandit grenades
            banditRadiusWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_BanditRadiusSmall"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_BanditRadiusNormal"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_BanditRadiusLarge"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_BanditRadiusExtraLarge"),
            ]
            
            for grenade in standardNadesList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                for part in grenadeObject.ZetaPartData.WeightedParts:
                    i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                    grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = banditRadiusWeightList[part.Part.AttributeSlotUpgrades[0].GradeIncrease + 1]
                    part.Manufacturers = part.Manufacturers = ((tedioreObject, 1), (banditObject, i), )
                    
            #Applies custom child count weights to some grenades
            childCountNadeList = [
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_Orchid_GrenadeMods.PartLists.Parts_Blade",
                "GD_GrenadeMods.PartLists.Parts_BonusPackage",
                "GD_GrenadeMods.PartLists.Parts_RollingThunder",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection",
                "GD_Iris_SeraphItems.MeteorShower.Iris_Seraph_GrenadeMod_MeteorShower_PartListCollection"
            ]
            
            childCountWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_ChildCount5")
            ]
            
            for grenade in childCountNadeList:
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.EtaPartData.WeightedParts:
                    i = 0
                    grade = part.Part.Name[len(part.Part.Name) - 1]
                    gradeNum = 0
                    if grade == "0":
                        gradeNum = 0
                    elif grade == "1":
                        gradeNum = 1
                    elif grade == "2":
                        gradeNum = 2
                    elif grade == "3":
                        gradeNum = 3
                    elif grade == "4":
                        gradeNum = 4
                    else:
                        gradeNum = 5
                        
                    if gradeStatusList[gradeNum][1] == True:
                        i  = gradeStatusList[gradeNum][0]
                    else:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = childCountWeightList[gradeNum]
                        gradeStatusList[gradeNum][0] = i
                        gradeStatusList[gradeNum][1] = True
                    
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            manufacturer.DefaultWeightIndex = i
            
            #Applies custom status damage weights to almost all grenades
            statusDamageNadeList = [
                "GD_GrenadeMods.PartLists.Parts_AreaEffect",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_AreaEffect_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_BouncingBetty_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Mirv",
                "GD_GrenadeMods.PartLists.Parts_Mirv_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Mirv_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Mirv_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Singularity",
                "GD_GrenadeMods.PartLists.Parts_Singularity_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Singularity_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Singularity_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Standard",
                "GD_GrenadeMods.PartLists.Parts_Standard_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Standard_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Standard_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_2_Uncommon",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_3_Rare",
                "GD_GrenadeMods.PartLists.Parts_Transfusion_4_VeryRare",
                "GD_GrenadeMods.PartLists.Parts_SkyRocket",
                "GD_GrenadeMods.PartLists.Parts_FusterCluck",
                "GD_GrenadeMods.PartLists.Parts_KissOfDeath",
                "GD_Orchid_GrenadeMods.PartLists.Parts_Blade",
                "GD_Aster_GrenadeMods.PartLists.Parts_Fireball",
                "GD_Aster_GrenadeMods.PartLists.Parts_LightningBolt",
                "GD_Aster_GrenadeMods.PartLists.Parts_MagicMissile",
                "GD_Aster_GrenadeMods.PartLists.Parts_MagicMissileRare",
                "GD_GrenadeMods.PartLists.Parts_FireBee",
                "GD_GrenadeMods.PartLists.Parts_StormFront",
                "GD_GrenadeMods.PartLists.Parts_Pandemic",
                "GD_GrenadeMods.PartLists.Parts_Fastball",
                "GD_GrenadeMods.PartLists.Parts_BouncingBonny",
                "GD_GrenadeMods.PartLists.Parts_Leech",
                "GD_GrenadeMods.PartLists.Parts_NastySurprise",
                "GD_GrenadeMods.PartLists.Parts_Quasar",
                "GD_Aster_GrenadeMods.PartLists.Parts_FireStorm",
                "GD_Aster_GrenadeMods.PartLists.Parts_ChainLightning",
                "GD_Iris_SeraphItems.Crossfire.Iris_Seraph_GrenadeMod_Crossfire_PartListCollection",
                "GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_PartListCollection",
                "GD_Anemone_GrenadeMods.PartLists.Parts_FireBee",
                "GD_Anemone_GrenadeMods.PartLists.Parts_StormFront"
            ]
            
            statusDamageWeightList = [
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg0"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg1"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg2"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg3"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg4"),
                unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_EffectDmg5")
            ]
            
            for grenade in statusDamageNadeList:
                if not unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade):
                    PC.ServerRCon(f"say {grenade}")
                grenadeObject = unrealsdk.FindObject("ItemPartListCollectionDefinition", grenade)
                #index of that grade's weight, has found this grade (bool)
                gradeStatusList = [
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False],
                    [0, False]
                ]
                for part in grenadeObject.ThetaPartData.WeightedParts:
                    i = 0
                    grade = part.Part.Name[len(part.Part.Name) - 1]
                    gradeNum = 0
                    if grade == "0":
                        gradeNum = 0
                    elif grade == "1":
                        gradeNum = 1
                    elif grade == "2":
                        gradeNum = 2
                    elif grade == "3":
                        gradeNum = 3
                    elif grade == "4":
                        gradeNum = 4
                    else:
                        gradeNum = 5
                        
                    if gradeStatusList[gradeNum][1] == True:
                        i  = gradeStatusList[gradeNum][0]
                    else:
                        i = ExpandWeightTable("ItemPartListCollectionDefinition", grenade, 1)
                        grenadeObject.ConsolidatedAttributeInitData[i].InitializationDefinition = statusDamageWeightList[gradeNum]
                        gradeStatusList[gradeNum][0] = i
                        gradeStatusList[gradeNum][1] = True
                    
                    numManufacturers = 0
                    for manufacturer in part.Manufacturers:
                        numManufacturers += 1
                        
                    if numManufacturers == 0:
                        part.Manufacturers = ((None, 1), )
                        part.DefaultWeightIndex = i
                    
                    else:
                        for manufacturer in part.Manufacturers:
                            manufacturer.DefaultWeightIndex = i
            
        if self.hasBeenEnabled == False and self.grenadePartsOption.CurrentValue == True:
            FixGrenadeMods()

        def DisableGearboxTuningMethods():
            tuningObject = unrealsdk.FindObject("BalanceModifierDefinition","GD_Playthrough3Tuning.Balance.BalanceMod_PT3")
            for modifier in tuningObject.BalanceModifiers:
                modifier.GearDrops_CommonWeightModifier_PT3_BaseValueOverride.BaseValueConstant = 1.0
                modifier.ChestItemPool_Weight_2_Uncommon_PT3_Multiplier.BaseValueConstant = 1.0
                
            tuningObject.GearDrops_CommonWeightModifier_PT2_BaseValueOverride.BaseValueConstant = 1.0
            tuningObject.ChestItemPool_Weight_2_Uncommon_PT2_Multiplier.BaseValueConstant = 1.0
        
        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            DisableGearboxTuningMethods()

        #Allows Krieg to perform his raving retribution rants
        def ReactivateRavingRetribution():
            if unrealsdk.FindObject("Behavior_TriggerDialogEvent","GD_Lilac_Skills_Hellborn.Skills.RavingRetribution:BehaviorProviderDefinition_8.Behavior_TriggerDialogEvent_41") and unrealsdk.FindObject("GearboxDialogAct_Chance","GD_Lilac_Dialog_Player.VOBD_Player_Psycho.DialogGroup_PL_Psycho:GearboxDialogAct_Chance_56") and unrealsdk.FindObject("WillowDialogEventTag","GD_Lilac_Dialog_Player.VOBD_Player_Psycho.VOBD_PL_Psycho_Start_RavingRant"):
                ravingRetributionDialogObject = unrealsdk.FindObject("Behavior_TriggerDialogEvent","GD_Lilac_Skills_Hellborn.Skills.RavingRetribution:BehaviorProviderDefinition_8.Behavior_TriggerDialogEvent_41")
                ravingRetributionTagObject = unrealsdk.FindObject("WillowDialogEventTag","GD_Lilac_Dialog_Player.VOBD_Player_Psycho.VOBD_PL_Psycho_Start_RavingRant")
                dialogChanceObject = unrealsdk.FindObject("GearboxDialogAct_Chance","GD_Lilac_Dialog_Player.VOBD_Player_Psycho.DialogGroup_PL_Psycho:GearboxDialogAct_Chance_56")
                
                ravingRetributionDialogObject.EventTag = ravingRetributionTagObject
                dialogChanceObject.Chance = self.ravingRetributionChance

        #Allows the final rounds of the slaughters to be repeated in UVHM, as well as the final missions in the torgue and hammerlock dlcs
        def MissonRepeatability():
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"set GD_Z2_CreatureSlaughter.M_CreatureSlaughter_5 bRepeatable True")
            PC.ServerRCon(f"set GD_Z1_BanditSlaughter.M_BanditSlaughter5 bRepeatable True")
            PC.ServerRCon(f"set GD_Z3_RobotSlaughter.M_RobotSlaughter_5 bRepeatable True")
            PC.ServerRCon(f"set GD_Sage_Ep5.M_Sage_Mission05 bRepeatable True")
            PC.ServerRCon(f"set GD_IrisEpisode06.M_IrisEp6_LongWayToTheTop bRepeatable True")
            
        if self.hasBeenEnabled == False and self.repeatableMissionOption.CurrentValue == True:
            MissonRepeatability()
            
        #Increases the number of bank slot upgrades you can purchase
        def IncreaseBankSlotUpgrades():
            PC = GetEngine().GamePlayers[0].Actor
            tuningObject = unrealsdk.FindObject("BalanceModifierDefinition","GD_Playthrough3Tuning.Balance.BalanceMod_PT3")
            bigString = "("
            i = 0
            while i < self.numExtraBankSDUInUVHM:
                littleString = f"(EridiumCostForUpgrade={self.extraBankSDUPrices[i]})"
                bigString += littleString
                if i < self.numExtraBankSDUInUVHM - 1:
                    bigString += ","
                i += 1
            bigString += ")"
            PC.ServerRCon(f"set {PC.PathName(tuningObject)} AdditionalBankStorageUpgrades {bigString}")
            
            slotsPerUpgradeObject = unrealsdk.FindObject("ConstantAttributeValueResolver","GD_BlackMarket.Misc.Att_BankSlotsPerUpgrade:ConstantAttributeValueResolver_0")
            slotsPerUpgradeObject.ConstantValue = self.bankSlotsPerUpgrade

        if self.hasBeenEnabled == False:
            IncreaseBankSlotUpgrades()
        
        #Increases the number of backpack slot upgrades you can purchase
        def IncreaseBackpackSlotUpgrades():
            PC = GetEngine().GamePlayers[0].Actor
            tuningObject = unrealsdk.FindObject("BalanceModifierDefinition","GD_Playthrough3Tuning.Balance.BalanceMod_PT3")
            bigString = "("
            i = 0
            while i < self.numExtraBackpackSDUInUVHM:
                littleString = f"(EridiumCostForUpgrade={self.extraBackpackSDUPrices[i]})"
                bigString += littleString
                if i < self.numExtraBackpackSDUInUVHM - 1:
                    bigString += ","
                i += 1
            bigString += ")"
            PC.ServerRCon(f"set {PC.PathName(tuningObject)} AdditionalBackpackSDUUpgrades {bigString}")
            
            slotsPerUpgradeObject = unrealsdk.FindObject("ConstantAttributeValueResolver","GD_BlackMarket.Misc.Att_BackPackSlotsPerUpgrade:ConstantAttributeValueResolver_0")
            slotsPerUpgradeObject.ConstantValue = self.backpackSlotsPerUpgrade

        if self.hasBeenEnabled == False and self.SDUPriceOption.CurrentValue == True:
            IncreaseBackpackSlotUpgrades()

        #Removes the bank sdu from earl's shop
        def RemoveBankSDU():
            if unrealsdk.FindObject("BlackMarketUpgradeDefinition","GD_BlackMarket.Upgrades_Ammo.Upgrades_Bank"):
                bankSDUObject = unrealsdk.FindObject("BlackMarketUpgradeDefinition","GD_BlackMarket.Upgrades_Ammo.Upgrades_Bank")
                bankSDUObject.BalanceDefinition = None
                
        if self.hasBeenEnabled == False and self.unlimitedBankOption.CurrentValue == True:
            RemoveBankSDU()
        
        '''
        #Adjusts the play speed of vehicle entering and exiting animations
        def FixVehicleAnimations():
            #Runner
            runnerAnimations = [
                "GD_Runner_Streaming.Animations.CrewAnim_DriverEnter_Front",
                "GD_Runner_Streaming.Animations.CrewAnim_DriverEnter_Left",
                "GD_Runner_Streaming.Animations.CrewAnim_DriverEnter_Right",
                "GD_Runner_Streaming.Animations.CrewAnim_DriverExit_Right",
                "GD_Runner_Streaming.Animations.CrewAnim_DriverExit_Left",
                "GD_Runner_Streaming.Animations.CrewAnim_TurretEnter_Left",
                "GD_Runner_Streaming.Animations.CrewAnim_TurretEnter_Right",
                "GD_Runner_Streaming.Animations.CrewAnim_TurretExit_Left",
                "GD_Runner_Streaming.Animations.CrewAnim_TurretExit_Right",
                "GD_Runner_Streaming.Animations.CrewAnim_Turret_From_Driver",
                "GD_Runner_Streaming.Animations.CrewAnim_Driver_From_Turret"
            ]
            
            #Technical
            technicalAnimations = [
                "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront",
                "GD_BanditTechnical.Animations.CrewAnim_DriverEnterLeft",
                "GD_BanditTechnical.Animations.CrewAnim_DriverExitLeft",
                "GD_BanditTechnical.Animations.CrewAnim_TurretEnterRight",
                "GD_BanditTechnical.Animations.CrewAnim_TurretExitRight",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatEnterLeft",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatExitLeft",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatEnterRight",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatExitRight",
                "GD_BanditTechnical.Animations.CrewAnim_SwitchToDriver",
                "GD_BanditTechnical.Animations.CrewAnim_SwitchToTurret",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatSwitchToLeft",
                "GD_BanditTechnical.Animations.CrewAnim_BackseatSwitchToRight"
            ]
            
            #Fan Boat
            fanboatAnimations = [
                "GD_Sage_FanBoat.Animations.CrewAnim_DriverEnterLeft",
                "GD_Sage_FanBoat.Animations.CrewAnim_DriverEnterRight",
                "GD_Sage_FanBoat.Animations.CrewAnim_DriverExitRight",
                "GD_Sage_FanBoat.Animations.CrewAnim_DriverExitLeft",
                "GD_Sage_FanBoat.Animations.CrewAnim_TurretEnterLeft",
                "GD_Sage_FanBoat.Animations.CrewAnim_TurretEnterRight",
                "GD_Sage_FanBoat.Animations.CrewAnim_TurretExitLeft",
                "GD_Sage_FanBoat.Animations.CrewAnim_TurretExitRight",
                "GD_Sage_FanBoat.Animations.CrewAnim_SwitchToDriver",
                "GD_Sage_FanBoat.Animations.CrewAnim_SwitchToTurret"
            ]
            
            #Skiff
            skiffAnimations = [
                "GD_Orchid_Hovercraft.Animations.CrewAnim_DriverEnterLeft",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_DriverEnterRight",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_DriverExitLeft",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_DriverExitRight",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_TurretEnterLeft",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_TurretEnterRight",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_TurretExitLeft",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_TurretExitRight",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_SwitchToDriver",
                "GD_Orchid_Hovercraft.Animations.CrewAnim_SwitchToTurret"
            ]
            
            for animation in runnerAnimations + technicalAnimations + fanboatAnimations + skiffAnimations:
                if unrealsdk.FindObject("SpecialMove_Vehicle", animation):
                    animationObject = unrealsdk.FindObject("SpecialMove_Vehicle", animation)
                    animationObject.PlayRate = self.vehicleAnimationSpeed
        
            
            #unrealsdk.FindObject("GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[0].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech")
            #unrealsdk.FindObject("SpecialMove_Vehicle", "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront").PlayRate = 2
            #unrealsdk.FindObject("SpecialMove_Vehicle", "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront").CameraLerpKeyFrames[0].Alpha = 0
            #unrealsdk.FindObject("SpecialMove_Vehicle", "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront").CameraLerpKeyFrames[1].Alpha = 0.2
            
            
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraTarget = unrealsdk.FindObject("SpecialMove_Vehicle", "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront").CameraLerpKeyFrames[0].CameraTargetThisKeyFrame
            
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.X = 58 #Zero = 58   FPS = 58
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.Y = 0 #Zero = 0     FPS = -8
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.Z = 10 #Zero = 10   FPS = -15
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraOffset = 0 #Base of -1300
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraPitchUpOffset = 0 #FPS = 0
            
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_AttachedRiderLeft").ViewPitchMin = 0
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_AttachedRiderLeft").ViewPitchMax = 0
            
            
            
            
            
            
            unrealsdk.FindObject("WillowVehicleControlDefinition", "GD_Globals.VehicleControls.PrototypeScheme").CameraSetting = unrealsdk.FindObject("WillowVehicleControlDefinition", "GD_Globals.VehicleControls.HaloScheme").CameraSetting
            unrealsdk.FindObject("WillowVehicleControlDefinition", "GD_Globals.VehicleControls.PrototypeScheme").SteeringSetting = unrealsdk.FindObject("WillowVehicleControlDefinition", "GD_Globals.VehicleControls.TankScheme").SteeringSetting
            
            
            
            #testingforawkta
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraTarget = unrealsdk.FindObject("SpecialMove_Vehicle", "GD_BanditTechnical.Animations.CrewAnim_DriverEnterFront").CameraLerpKeyFrames[0].CameraTargetThisKeyFrame
            
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.X = 58 #Zero = 58   FPS = 58
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.Y = -8 #Zero = 0     FPS = -8
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").BaseCameraPosition.Z = -15 #Zero = 10   FPS = -15
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraOffset = 0 #Base of -1300
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").CameraPitchUpOffset = 0 #FPS = 0
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").bSnapCameraYaw = True
            unrealsdk.FindObject("PassengerCameraDefinition", "GD_BanditTechnical.CameraDefs.Camera_DriverSeat").bSnapCameraPitch = True
            
            
        '''
        
        #Runs the commands we borrowed from other mods
        def StolenChangesSingleRun():
            PC = GetEngine().GamePlayers[0].Actor
            #UCP
            #Raid boss health scaling properly
            PC.ServerRCon(f"set GD_Playthrough3Tuning.Balance.BalanceMod_PT3 MapSpecificBalanceModifiers ((MapName=\"Orchid_Caves_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Orchid_RaidShaman',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Orchid_SandWormRaid')),(MapName=\"Iris_DL2_Interior_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Iris_RaidPete',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Iris_RaidSewerPipeRat',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Iris_RaidSewerPipeSpiderant')),(MapName=\"Grass_Cliffs_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter')),(MapName=\"CraterLake_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter')),(MapName=\"tundraexpress_p\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter')),(MapName=\"Interlude_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter')),(MapName=\"HypInterlude_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter')),(MapName=\"Iris_DL3_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Gyrocopter_Iris',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_GyrocopterBadass_Iris',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_GyrocopterBadassEscort_Iris',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_GyrocopterCargo_Iris',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_GyrocopterEscort_Iris')),(MapName=\"HyperionCity_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Constructor_LaserStatue')),(MapName=\"Sage_PowerStation_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorBadass',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorFire',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorShock',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlag',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlow',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorVampire')),(MapName=\"Sage_RockForest_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorBadass',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorFire',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorShock',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlag',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlow',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorVampire')),(MapName=\"Sage_Underground_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorBadass',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorFire',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorShock',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlag',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlow',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorVampire')),(MapName=\"PandoraPark_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Bloodwing')),(MapName=\"Orchid_Refinery_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Orchid_RaidEngineer_Lobelia',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Orchid_RaidLoader')),(MapName=\"Sage_Cliffs_P\",AIPawnBalanceModifiers=(AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_RaidBeast',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_RaidBeastMaster_OP',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_RaidMurderer_OP',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorBadass',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorFire',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorShock',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlag',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorSlow',AIPawnBalanceModifierDefinition'GD_Gladiolus_Balance.enemies.PawnBalanceModifier_Sage_WitchDoctorVampire')))")
            #Allows the final rounds of the slaughters to be repeated in UVHM, as well as the final missions in the torgue and hammerlock dlcs
            #See MissonRepeatability()
            #See FixAudio()
            #Legendary Ranger onslaught fix
            if unrealsdk.FindObject("ClassModDefinition", "GD_Lobelia_ClassMods.A_Item_Soldier.ClassMod_Soldier_LegendaryRanger") and self.rangerOnslaughtOption.CurrentValue == True:
                rangerObject = unrealsdk.FindObject("ClassModDefinition", "GD_Lobelia_ClassMods.A_Item_Soldier.ClassMod_Soldier_LegendaryRanger")
                rangerObject.AttributeSlotEffects[4].bRunEffectsAsSkill = True
            
            #Noads
            #See CanAcessOakUpsell()
            
            #FromDarkHell's cutscene disabler
            #See cutscene option

        if self.hasBeenEnabled == False:
            StolenChangesSingleRun()
            
        #Runs the commands we borrowed from other mods
        def StolenChangesAlwaysRun():
            PC = GetEngine().GamePlayers[0].Actor
            #UCP
            #Creates message at bottom of BAR page displaying that the mod is running, also keyword running bl2fix
            if self.displayRunningBL2FixOption.CurrentValue == True:
                PC.ServerRCon(f"set WillowGame.Default__BadassPanelGFxObject TooltipsText_Redeem <font size=\"16\"><font color=\"#edb600\">Running {self.Version}</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>")
            #I think this fixes the hyperius health glitch
            if unrealsdk.FindObject("Behavior_ChangeRemoteBehaviorSequenceState", "Orchid_Refinery_Raid.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_5.Behavior_ChangeRemoteBehaviorSequenceState_10"):
                PC.ServerRCon(f"set Orchid_Refinery_Raid.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_5.Behavior_ChangeRemoteBehaviorSequenceState_10 Action CHANGE_Disable")
            #Permaslag Fix
            #See DriverEnter
                        
            #Abstrakyt's Interspersed Outburst crash fix (IT DON'T WORK)
            '''
            if self.interspersedOutburstFixOption.CurrentValue == True:
                if unrealsdk.FindObject("ParticleSystem", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst") and unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_10") and unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_13") and unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_14"):
                    particleSystemObject = unrealsdk.FindObject("ParticleSystem", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst")
                    particleModule1Object = unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_10")
                    particleModule2Object = unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_13")
                    particleModule3Object = unrealsdk.FindObject("ParticleModuleRequired", "FX_Tulip_CHAR_Mechromancer.Particles.Part_InterspersedOutburst:ParticleModuleRequired_14")
                    
                    particleSystemObject.Emitters = [particleModule3Object, particleModule2Object, particleModule1Object]
                    particleModule1Object.MaxDrawCount = 250
                    particleModule2Object.MaxDrawCount = 250
                    particleModule3Object.MaxDrawCount = 50
            '''
            
        class CutsceneDisabler:
            def __init__(self, mapname, offFunction, onFunction, combatRelevant):
                self.mapname = mapname
                self.offFunction = offFunction
                self.onFunction = onFunction
                self.combatRelevant = combatRelevant
                
            def turnOff(self):
                self.offFunction()
            
            def turnOn(self):
                self.onFunction()

        def RegisterCutscene(mapname, offFunction, onFunction, combatRelevant):
            newCutscene = CutsceneDisabler(mapname, offFunction, onFunction, combatRelevant)
            self.cutsceneDisablerList.append(newCutscene)
            
        def OutputLinksFullOverride(cutsceneObject, newLinks):
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"set {PC.PathName(cutsceneObject)} OutputLinks ({newLinks})")
            
        def RegisterCutscenes():
            '''
            Format:
            #This turns the cutscene off
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("CUTSCENE OBJECT CLASS", "CUTSCENE OBJECT NAME")
                cutsceneObject.ATTRIBUTE TO MODIFY = unrealsdk.FindObject("CLASS", "NAME")
                
            #This turns the cutscene on
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("CUTSCENE", "CUTSCENE OBJECT NAME")
                cutsceneObject.ATTRIBUTE TO MODIFY = unrealsdk.FindObject("CLASS","NAME")
            RegisterCutscene("MAP NAME", cutsceneOff, cutsceneOn, IS COMBAT RELEVANT? (True or False))
            
            Documentation for OutputLinksFullOverride:
            OutputLinksFullOverride(cutsceneObject, "WHATEVER OUTPUTLINKS NEEDS TO BECOME")
            Note the ""
            If there are " in the data you are providing, put a \ before each. The whole thing should be the same colour if you've done it correctly
            for example: LinkDesc = "Link 1" would become LinkDesc = \"Link 1\"
            If there are multiple entries in OutputLinks (like Outputlinks[1]), all entries need to be included, seperated by a comma but still inside the ""
            the data might look something like "(Links=(blah blah blah)),(Links=(bleh bleh bleh))"
            in the above example, the Links with blahs is OutputLinks[0] and the one with blehs is OutputLinks[1]
            
            '''
            #Knuckle Dragger Ripping Out Claptrap's Eye
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_7")
                cutsceneObject.OutputLinks[1].Links[1].LinkedOp = unrealsdk.FindObject("SeqAct_ApplyBehavior", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_52")
            
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_7")
                cutsceneObject.OutputLinks[1].Links[1].LinkedOp = unrealsdk.FindObject("SeqAct_CameraFade","Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_2")
            RegisterCutscene("Glacial_P", cutsceneOff, cutsceneOn, False)
            
            #Knuckle Dragger Fight Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_3")
                cutsceneObject.OutputLinks[0].Links[0].LinkedOp = unrealsdk.FindObject("SeqAct_Toggle", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_24")
            
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_3")
                cutsceneObject.OutputLinks[0].Links[0].LinkedOp = unrealsdk.FindObject("SeqAct_CameraFade","Glacial_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0")
            RegisterCutscene("Glacial_P", cutsceneOff, cutsceneOn, True)
            
            #Hammerlock Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_26")
                cutsceneObject.OutputLinks[1].Links[0].LinkedOp = unrealsdk.FindObject("SeqAct_Teleport", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_24")
            
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_26")
                cutsceneObject.OutputLinks[1].Links[0].LinkedOp = unrealsdk.FindObject("SeqAct_CameraFade", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1")
            RegisterCutscene("SouthernShelf_P", cutsceneOff, cutsceneOn, False)
            
            #Boom Bewm
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_13")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_83',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_64',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_13")
                OutputLinksFullOverride(cutsceneObject, "(Links =((LinkedOp=SeqAct_CameraFade'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_3',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc = \"Link 1\",bHasImpulse = False,bDisabled = False,bDisabledPIE = False,bClampedMax = False,bClampedMin = False,bHidden = False,bIsActivated = False,bMoving = False,LinkedOp = None,ActivateDelay = 0.000000)")
            RegisterCutscene("SouthernShelf_P", cutsceneOff, cutsceneOn, True)
            
            #Flynt Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_5")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_5',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_71',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_25',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_3',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Console", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Console_6")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_5',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_71',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_25',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_3',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_PopulatedActor", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_PopulatedActor_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_31',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_72',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_71',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_25',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_3',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_36',InputLinkIdx=0),),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_5")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_5',InputLinkIdx=0),(LinkedOp=SeqAct_CameraFade'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_5',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Console", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Console_6")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_5',InputLinkIdx=0),(LinkedOp=SeqAct_CameraFade'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_5',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_PopulatedActor", "SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_PopulatedActor_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'SouthernShelf_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_5',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("SouthernShelf_P", cutsceneOff, cutsceneOn, True)
            
            #Sanctuary
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_8")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_9")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_10")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_11")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_12")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_13")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_1")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_2")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_3")
                binkmovieFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject, bik):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName {bik}")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_8")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_9")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_10")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_11")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_12")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_ToggleCinematicMode_13")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject, "TC_Tannis.bik")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_1")
                binkmovieFix(cutsceneObject, "TC_Scooter.bik")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_2")
                binkmovieFix(cutsceneObject, "TC_Zed.bik")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sanctuary_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_4.SeqAct_PlayBinkMovie_3")
                binkmovieFix(cutsceneObject, "TC_Marcus.bik")
                
            RegisterCutscene("Sanctuary_P", cutsceneOff, cutsceneOn, False)
                
            #SanctuaryAir
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_ToggleCinematicMode_10")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_ToggleCinematicMode_11")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_ToggleCinematicMode_12")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_ToggleCinematicMode_13")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_PlayBinkMovie_2")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_PlayBinkMovie_3")
                binkmovieFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject, bik):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName {bik}")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_ToggleCinematicMode_10")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_ToggleCinematicMode_11")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_ToggleCinematicMode_12")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_ToggleCinematicMode_13")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Tannis.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject, "TC_Tannis.bik")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.DrZed.SeqAct_PlayBinkMovie_2")
                binkmovieFix(cutsceneObject, "TC_Zed.bik")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "SanctuaryAir_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Marcus.SeqAct_PlayBinkMovie_3")
                binkmovieFix(cutsceneObject, "TC_Marcus.bik")
                
            RegisterCutscene("SanctuaryAir_P", cutsceneOff, cutsceneOn, False)
            
            #Firehawk Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_3',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_2',InputLinkIdx=0),(LinkedOp=GedarboxSeqAct_CameraShake'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.GearboxSeqAct_CameraShake_2',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Destroy'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Destroy_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_RemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'IceCanyon_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("icecanyon_p", cutsceneOff, cutsceneOn, False)
            
            #Ellie Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Gate", "Interlude_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_06.SeqAct_Gate_5")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Interlude_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_06.SeqAct_ActivateRemoteEvent_1',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'Interlude_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_06.SeqAct_Teleport_3',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Gate", "Interlude_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_06.SeqAct_Gate_5")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Interlude_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode_06.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Interlude_P", cutsceneOff, cutsceneOn, False)
            
            #Bad Maw Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("GearboxSeqAct_TriggerDialog", "Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.GearboxSeqAct_TriggerDialog_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.SeqAct_Toggle_6',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.SeqAct_Toggle_6',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("GearboxSeqAct_TriggerDialog", "Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.GearboxSeqAct_TriggerDialog_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Frost_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BloodshotSlums.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Frost_P", cutsceneOff, cutsceneOn, True)
            
            #Roland Prison Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqEvent_RemoteEvent_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_ToggleHidden_1',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_ToggleHidden_2',InputLinkIdx=0),(LinkedOp=SeqAct_Interp'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_Interp_4',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_SequenceActivated", "Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqEvent_SequenceActivated_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_ToggleHidden_1',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_ToggleHidden_2',InputLinkIdx=0),(LinkedOp=SeqAct_Interp'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_Interp_4',InputLinkIdx=0),(LinkedOp=SeqAct_Interp'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_Interp_0',InputLinkIdx=2),(LinkedOp=WillowSeqAct_WaypointObjective'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0),),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqEvent_RemoteEvent_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_SequenceActivated", "Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqEvent_SequenceActivated_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Interp'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_Interp_0',InputLinkIdx=2),(LinkedOp=WillowSeqAct_WaypointObjective'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0),(LinkedOp=SeqAct_CameraFade'Dam_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode6.RolandPrisonIntroSequence.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")            
            RegisterCutscene("dam_p", cutsceneOff, cutsceneOn, False)
            
            #Mordecai Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.BurningVarkidsAndMordecai.SeqAct_Delay_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_SetCameraTarget'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.BurningVarkidsAndMordecai.SeqAct_SetCameraTarget_3',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.BurningVarkidsAndMordecai.SeqAct_Delay_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.BurningVarkidsAndMordecai.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("tundraexpress_p", cutsceneOff, cutsceneOn, False)
            
            #Tiny Tina Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("WillowSeqAct_MissionCustomEvent", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.WillowSeqAct_MissionCustomEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqAct_Toggle_0',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqAct_ToggleHidden_4',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqAct_ToggleHidden_8',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqEvent_Touch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=Sequence'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.Script_TinaFussingOverBandit',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("WillowSeqAct_MissionCustomEvent", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.WillowSeqAct_MissionCustomEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_ToggleCinematicModeAffectsAll'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.WillowSeqAct_ToggleCinematicModeAffectsAll_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqEvent_Touch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'TundraExpress_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode07.TinyTinaAndCaveArea.SeqAct_CameraFade_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("tundraexpress_p", cutsceneOff, cutsceneOn, False)
            
            #Bloodwing Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "PandoraPark_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode10.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'PandoraPark_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode10.SeqAct_Toggle_10',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'PandoraPark_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode10.WillowSeqAct_MissionCustomEvent_5',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "PandoraPark_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode10.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'PandoraPark_Dynamic.TheWorld:PersistentLevel.Main_Sequence.Episode10.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("PandoraPark_P", cutsceneOff, cutsceneOn, True)
            
            #Brick Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.WillowSeqEvent_MissionRemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_Teleport_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_AttachToActor", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_AttachToActor_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_ToggleHidden_2',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqEvent_RemoteEvent_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_Teleport_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")   
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.WillowSeqEvent_MissionRemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_AttachToActor", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_AttachToActor_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_ToggleHidden_5',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_RemoteEvent", "Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqEvent_RemoteEvent_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Grass_Cliffs_Combat.TheWorld:PersistentLevel.Main_Sequence.Episode11_Combat.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Grass_Cliffs_P", cutsceneOff, cutsceneOn, False)
            
            #Bunker Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqCond_CompareBool", "Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqCond_CompareBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_SetFloat'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_SetFloat_0',InputLinkIdx=0)),LinkDesc=\"True\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=((LinkedOp=SeqAct_ApplyBehavior'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_ApplyBehavior_0',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_ActivateRemoteEvent_11',InputLinkIdx=0),(LinkedOp=GearboxSeqAct_TriggerDialog'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.GearboxSeqAct_TriggerDialog_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0)),LinkDesc=\"True\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetFloat", "Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_SetFloat_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_ApplyBehavior_0',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_ActivateRemoteEvent_11',InputLinkIdx=0),(LinkedOp=GearboxSeqAct_TriggerDialog'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.GearboxSeqAct_TriggerDialog_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqCond_CompareBool", "Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqCond_CompareBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_SetFloat'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_SetFloat_0',InputLinkIdx=0)),LinkDesc=\"True\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=((LinkedOp=SeqAct_CameraFade'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"False\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetFloat", "Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_SetFloat_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Boss_Cliffs_Dynamic.TheWorld:PersistentLevel.Main_Sequence.BunkerTitleCard.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Boss_Cliffs_P", cutsceneOff, cutsceneOn, True)
            
            #Angel Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ActivateRemoteEvent", "VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.EtherealEntry.SeqAct_ActivateRemoteEvent_4")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.EtherealEntry.SeqAct_Teleport_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ActivateRemoteEvent", "VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.EtherealEntry.SeqAct_ActivateRemoteEvent_4")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.EtherealEntry.SeqAct_Toggle_0',InputLinkIdx=0),(LinkedOp=SeqAct_AkPostEvent'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.EtherealEntry.SeqAct_AkPostEvent_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("VOGChamber_P", cutsceneOff, cutsceneOn, False)
            
            #Roland Death Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_16',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_31',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Delay'VOGChamber_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("VOGChamber_P", cutsceneOff, cutsceneOn, False)
            
            #Jack Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackTitleCard.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_FinishSequence'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackTitleCard.SeqAct_FinishSequence_3',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackTitleCard.SeqAct_ActivateRemoteEvent_5',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackTitleCard.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackTitleCard.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Boss_Volcano_P", cutsceneOff, cutsceneOn, True)
            
            #Ending Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_SequenceActivated", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.FinalCutScene.SeqEvent_SequenceActivated_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.FinalCutScene.SeqAct_Toggle_0',InputLinkIdx=0),(LinkedOp=SeqAct_FinishSequence'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.FinalCutScene.SeqAct_FinishSequence_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_SequenceActivated", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.FinalCutScene.SeqEvent_SequenceActivated_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.FinalCutScene.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Boss_Volcano_P", cutsceneOff, cutsceneOn, False)
            
            #Warrior Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetFloat", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_SetFloat_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_ActivateRemoteEvent_4',InputLinkIdx=0),(LinkedOp=SeqAct_FinishSequence'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_FinishSequence_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqCond_CompareBool", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqCond_CompareBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_SetFloat'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_SetFloat_0',InputLinkIdx=0)),LinkDesc=\"True\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_ActivateRemoteEvent_4',InputLinkIdx=0),(LinkedOp=SeqAct_FinishSequence'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_FinishSequence_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetFloat", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_SetFloat_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_CameraFade_2',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqCond_CompareBool", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqCond_CompareBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_SetFloat'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_SetFloat_0',InputLinkIdx=0)),LinkDesc=\"True\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=((LinkedOp=SeqAct_CameraFade'Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.JackAwakensTheWarrior.SeqAct_CameraFade_2',InputLinkIdx=0)),LinkDesc=\"False\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Boss_Volcano_P", cutsceneOff, cutsceneOn, True)
            
            #Credits
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("Sequence", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.Credits")
                cutsceneObject.bEnabled = False
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("Sequence", "Boss_Volcano_Cutscenes.TheWorld:PersistentLevel.Main_Sequence.Credits")
                cutsceneObject.bEnabled = True
            RegisterCutscene("Boss_Volcano_P", cutsceneOff, cutsceneOn, False)
            
            #Scarlett DLC Intro Cutscene
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName Orchid_Intro")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                
            RegisterCutscene("Orchid_OasisTown_P", cutsceneOff, cutsceneOn, False)
            
            #Shade's Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ApplyBehavior_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ApplyBehavior","Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ApplyBehavior_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ChangeCollision'Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ChangeCollision_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ChangeCollision", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ChangeCollision_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ToggleHidden_0'',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ApplyBehavior","Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ApplyBehavior_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=,LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ChangeCollision", "Orchid_OasisTown_Dynamic.TheWorld:PersistentLevel.Main_Sequence.ShadeTitleCard.SeqAct_ChangeCollision_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=,LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_OasisTown_P", cutsceneOff, cutsceneOn, False)
            '''
            #Captain Scarlett's Intro Cutscene (commented out because bugged LOL)
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Switch'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_Switch_0',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_ApplyBehavior_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_ToggleHidden_2',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_ApplyBehavior_2',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_ApplyBehavior_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Switch'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_Switch_0',InputLinkIdx=0),(LinkedOp=GearboxSeqAct_ToggleDialog'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.GearboxSeqAct_ToggleDialog_1',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_CameraFade_0',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Orchid_SaltFlats_Dynamic.TheWorld:PersistentLevel.Main_Sequence.PirateQueen_Intro.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_SaltFlats_P", cutsceneOff, cutsceneOn, False)
            '''
            
            #Sandman's Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_Caves_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_4")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Delay'Orchid_Caves_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Orchid_Caves_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_4")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_Caves_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Orchid_Caves_Combat.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_Caves_P", cutsceneOff, cutsceneOn, True)
            
            #Herbert's Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_ShipGraveyard_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Orchid_ShipGraveyard_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_7',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_ShipGraveyard_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_ShipGraveyard_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Orchid_ShipGraveyard_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_ShipGraveyard_P", cutsceneOff, cutsceneOn, False)
            
            #Herl-E Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Orchid_Refinery_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_Refinery_P", cutsceneOff, cutsceneOn, True)
            
            #Roscoe Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ApplyBehavior", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_29")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_0',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_14',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_0',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ApplyBehavior", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_29")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_4',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_WormBelly_P", cutsceneOff, cutsceneOn, True)
            
            #Leviathan Intro (Title Card)
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_2',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_16',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_3',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Orchid_WormBelly_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_2',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Orchid_WormBelly_P", cutsceneOff, cutsceneOn, True)
            
            #Bloodwing - Jack Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_Teleport_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_FinishSequence'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_FinishSequence_3',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_ActivateRemoteEvent_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Teleport", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_Teleport_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.JackBloodwingCutscene.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("CastleKeep_P", cutsceneOff, cutsceneOn, False)
            
            #Tina DLC Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "Docks_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'Docks_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_3',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "Docks_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Docks_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_3',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Docks_P", cutsceneOff, cutsceneOn, False)
            
            '''
            #Ending Cutscene (NEVER WORKED LOL)
            def cutsceneOff():
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.FreeButtStallionAndTC.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.FreeButtStallionAndTC.SeqAct_Teleport_0',InputLinkIdx=0),(LinkedOp=SeqAct_FinishSequence'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.FreeButtStallionAndTC.SeqAct_FinishSequence_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                
            def cutsceneOn():
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName Aster_Outro")
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.FreeButtStallionAndTC.SeqAct_Switch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'CastleKeep_Mission.TheWorld:PersistentLevel.Main_Sequence.Mission04.FreeButtStallionAndTC.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            
            RegisterCutscene("CastleKeep_P", cutsceneOff, cutsceneOn, False)
            '''
            
            #Hammerlock DLC Intro Cutscene
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sage_Underground_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sage_Underground_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName Sage_Intro")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Sage_Underground_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_2")
                cinematicFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Sage_Underground_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_0")
                binkmovieFix(cutsceneObject)
            RegisterCutscene("Sage_Underground_P", cutsceneOff, cutsceneOn, False)
            
            #Claptrap Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_9")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_1',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_3',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_1")
                OutputLinksFullOverride(cutsceneObject, "()")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_9")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Sage_RockForest_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleHidden_0',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Sage_RockForest_P", cutsceneOff, cutsceneOn, False)
            
            #Jackenstein Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_12',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_7',InputLinkIdx=0),(LinkedOp=SeqAct_Toggle'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_8',InputLinkIdx=0),(LinkedOp=SeqAct_Log'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Log_18',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=2.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=SeqAct_Switch'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1',InputLinkIdx=0),(LinkedOp=SeqAct_Log'Sage_HyperionShip_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Log_18',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=2.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Sage_HyperionShip_P", cutsceneOff, cutsceneOn, False)
            
            
            
            
            
            
            
            
            
            
            
            
            
            #Torgue DLC Intro Cutscene
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName None")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Iris_Hub_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Iris_Hub_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_1")
                binkmovieFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bDisableInput = variable
                    cutsceneObject.bDisableMovement = variable
                    cutsceneObject.bDisableTurning = variable
                    cutsceneObject.bEnableGodMode = variable
                    cutsceneObject.bEnableNoTarget = variable
                    cutsceneObject.bHidePlayer = variable
                    cutsceneObject.bPauseDialog = variable
                def binkmovieFix(cutsceneObject):
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"set {PC.PathName(cutsceneObject)}  BinkMovieName Iris_Intro")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleCinematicMode", "Iris_Hub_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleCinematicMode_1")
                cinematicFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_PlayBinkMovie", "Iris_Hub_P.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PlayBinkMovie_1")
                binkmovieFix(cutsceneObject)
            RegisterCutscene("Iris_Hub_P", cutsceneOff, cutsceneOn, False)
            
            #Piston Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_56',InputLinkIdx=0),(LinkedOp=WillowSeqAct_RunCustomEvent'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_RunCustomEvent_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_Hub_P", cutsceneOff, cutsceneOn, False)
            
            #Pyro Pete Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_6',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_DL2_Interior_P", cutsceneOff, cutsceneOn, True)
            
            #Moxxi Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_RunCustomEvent'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_RunCustomEvent_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_3")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_3',InputLinkIdx=0),(LinkedOp=WillowSeqAct_RunCustomEvent'Iris_DL2_Interior_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_RunCustomEvent_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_DL2_Interior_P", cutsceneOff, cutsceneOn, False)
            
            #Tiny Tina Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_19',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_3',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_Hub_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_Hub_P", cutsceneOff, cutsceneOn, False)
            
            #Motor Momma Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_4',InputLinkIdx=0),),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_Hub2_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_Hub2_P", cutsceneOff, cutsceneOn, True)
            
            #Flyboy Intro Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_StreamInTextures'Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_6',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL3_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_DL3_P", cutsceneOff, cutsceneOn, True)
            
            #Badassassaurus Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_2',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_0',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_5',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_2',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_5',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_1',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_DL1_TAS_P", cutsceneOff, cutsceneOn, True)
            
            #SHUT UP, aLL OF YOU, SHUT UP!!!!!!!!!!!
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_3',InputLinkIdx=0),(LinkedOp=SeqAct_ActivateRemoteEvent'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ActivateRemoteEvent_4',InputLinkIdx=0)),LinkDesc=\"Completed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Switch", "Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Switch_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Iris_DL1_TAS_Dynamic.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Link 1\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Iris_DL1_TAS_P", cutsceneOff, cutsceneOn, True)
            
            #Spoiler Message Disabler <-------- tie this to popups or tutorials being on/off????
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_14")
                OutputLinksFullOverride(cutsceneObject, "((Links=((LinkedOp=SeqAct_ApplyBehavior'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_21',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000),(Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000))")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_14")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_DisplayTrainingMessage'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_DisplayTrainingMessage_1',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("SanctIntro_P", cutsceneOff, cutsceneOn, False)
            
            #Lilith DLC Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_AndGate", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_AndGate_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Teleport'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_AndGate", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_AndGate_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_15',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("SanctIntro_P", cutsceneOff, cutsceneOn, False)
            
            #Lilith Dlc Intro Outro (lol)
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetBool", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_SetBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_4',InputLinkIdx=0),(LinkedOp=SeqAct_PrepareMapChange'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_PrepareMapChange_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_SetBool", "SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_SetBool_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'SanctIntro_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_5',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("SanctIntro_P", cutsceneOff, cutsceneOn, False)
            
            #Vaughn Intro (UNSKIPPABLOL)
            
            #Talon Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_ToggleHidden_3',InputLinkIdx=0)(LinkedOp=WillowSeqAct_AIProvoke'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.WillowSeqAct_AIProvoke_0',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_StreamInTextures_2',InputLinkIdx=1)),LinkDesc=\"Completed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_CameraFade_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_MissionCustomEvent'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.WillowSeqAct_MissionCustomEvent_10',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("OldDust_P", cutsceneOff, cutsceneOn, False)
            
            #Mordecai Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleHidden", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_ToggleHidden_0")
                cutsceneObject.VariableLinks[0].LinkedVariables = ()
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqEvent_Touch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.WillowSeqAct_MissionCustomEvent_9',InputLinkIdx=0),(LinkedOp=SeqAct_ApplyBehavior'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_ApplyBehavior_41',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_StreamInTextures_5',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqAct_ToggleHidden", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_ToggleHidden_0")
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(cutsceneObject)} VariableLinks ((ExpectedType=Class'Engine.SeqVar_Object',LinkedVariables=(SeqVar_Object'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqVar_Object_67',SeqVar_Object'OldDust_P.TheWorld:PersistentLevel.Main_Sequence.SeqVar_Object_6'),LinkDesc=\"Target\",LinkVar=,PropertyName=\"Targets\",bWriteable=False,bSequenceNeverReadsOnlyWritesToThisVar=False,bModifiesLinkedObject=True,bHidden=False,bClampedMax=False,bClampedMin=False,bMoving=False,bAllowAnyType=False,MinVars=1,MaxVars=255,CachedProperty=None))")
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqEvent_Touch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_CameraFade_5',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'OldDust_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.Mission_025.SeqAct_StreamInTextures_5',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("OldDust_P", cutsceneOff, cutsceneOn, False)
            '''
            #Brick Intro (softlock two?)
            def cutsceneOff():
                def positionFix(cutsceneObject):
                    variable = 9.666716
                    cutsceneObject.Position = variable
                def skipFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bIsSkipped = variable
                def opacityFix(cutsceneObject):
                    variable = 100000.000000
                    cutsceneObject.FadeOpacity = variable
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Interp_1")
                positionFix(cutsceneObject)
                skipFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_CameraFade", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0")
                opacityFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_CameraFade", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1")
                opacityFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_16")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Interp'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Interp_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Interp_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ToggleHidden'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleHidden_0',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=1)),LinkDesc=\"Completed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Reversed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ChangeCollision", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ChangeCollision_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Toggle_1',InputLinkIdx=0),(LinkedOp=GearboxSeqAct_TriggerDialogName'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.GearboxSeqAct_TriggerDialogName_2',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleHidden_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                def positionFix(cutsceneObject):
                    variable = 0
                    cutsceneObject.Position = variable
                def skipFix(cutsceneObject):
                    variable = False
                    cutsceneObject.bIsSkipped = variable
                def opacityFix(cutsceneObject):
                    variable = 0
                    cutsceneObject.FadeOpacity = variable
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Interp_1")
                positionFix(cutsceneObject)
                skipFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_CameraFade", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0")
                opacityFix(cutsceneObject)
                cutsceneObject = unrealsdk.FindObject("SeqAct_CameraFade", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1")
                opacityFix(cutsceneObject)
                
                cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_16")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_0',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Interp_1")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=1)),LinkDesc=\"Completed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Reversed\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_ChangeCollision", "Sandworm_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ChangeCollision_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=,LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Sandworm_P", cutsceneOff, cutsceneOn, False)
            '''
            #Tina Intro
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_8")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_13',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleHidden_1',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_8")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_4',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Helios_P", cutsceneOff, cutsceneOn, False)
            
            #Uranus Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_9")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_MissionCustomEvent'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_2',InputLinkIdx=0),(LinkedOp=SeqAct_Destroy'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Destroy_1',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("WillowSeqAct_MissionCustomEvent", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_AIProvoke'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_AIProvoke_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_9")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_3',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("WillowSeqAct_MissionCustomEvent", "Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_MissionCustomEvent_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_ToggleCinematicModeAffectsAll'Helios_Mission_Main.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_ToggleCinematicModeAffectsAll_3',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Helios_P", cutsceneOff, cutsceneOn, True)
            
            #Cassius Boss Cutscene
            def cutsceneOff():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bSkippable = variable
                    cutsceneObject.bIsSkipped = variable
                def positionFix(cutsceneObject):
                    variable = 11.640001
                    cutsceneObject.Position = variable
                    cutsceneObject.ForceStartPosition = variable
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "ResearchCenter_MissionMain.TheWorld:PersistentLevel.Main_Sequence.PlotMission050.SeqAct_Interp_7")
                cinematicFix(cutsceneObject)
                positionFix(cutsceneObject)
                
            def cutsceneOn():
                def cinematicFix(cutsceneObject):
                    variable = True
                    cutsceneObject.bSkippable = variable
                    cutsceneObject.bIsSkipped = variable
                def positionFix(cutsceneObject):
                    variable = 0
                    cutsceneObject.Position = variable
                    cutsceneObject.ForceStartPosition = variable
                cutsceneObject = unrealsdk.FindObject("SeqAct_Interp", "ResearchCenter_MissionMain.TheWorld:PersistentLevel.Main_Sequence.PlotMission050.SeqAct_Interp_7")
                cinematicFix(cutsceneObject)
                positionFix(cutsceneObject)
            RegisterCutscene("ResearchCenter_P", cutsceneOff, cutsceneOn, True)
            
            #Hector Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_KillPawnBasedOnAllegiance'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_KillPawnBasedOnAllegiance_2',InputLinkIdx=0),(LinkedOp=SeqAct_Teleport'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Teleport_4',InputLinkIdx=0),(LinkedOp=SeqAct_ToggleHidden'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ToggleHidden_3',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("GaiusSanctuary_P", cutsceneOff, cutsceneOn, True)
            
            #DLC Outro (doesn't work)
            #def cutsceneOff():
                #cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_1")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=GearboxSeqAct_TriggerDialogName'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.GearboxSeqAct_TriggerDialogName_7',InputLinkIdx=0),(LinkedOp=SeqAct_Delay'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                #cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ApplyBehavior'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_6',InputLinkIdx=0),(LinkedOp=SeqAct_AkPostEvent'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_AkPostEvent_10',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            #def cutsceneOn():
                #cutsceneObject = unrealsdk.FindObject("WillowSeqEvent_MissionRemoteEvent", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.WillowSeqEvent_MissionRemoteEvent_1")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=GearboxSeqAct_TriggerDialogName'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.GearboxSeqAct_TriggerDialogName_7',InputLinkIdx=0),(LinkedOp=SeqAct_Delay'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                #cutsceneObject = unrealsdk.FindObject("SeqAct_Delay", "GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_Delay_6")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_ToggleCinematicModeAffectsAll'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.WillowSeqAct_ToggleCinematicModeAffectsAll_3',InputLinkIdx=0),(LinkedOp=SeqAct_AkPostEvent'GaiusSanctuary_MissionMain.TheWorld:PersistentLevel.Main_Sequence.SeqAct_AkPostEvent_10',InputLinkIdx=0)),LinkDesc=\"Finished\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Aborted\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            
            #RegisterCutscene("GaiusSanctuary_P", cutsceneOff, cutsceneOn, False)
            
            #DLC Credits (SOFTLOCKS?)
            
            #DLC Outro Post-Credits (SOFTLOCKS?)
            
            
            #Lt. Bolson Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_Toggle_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.WillowSeqAct_WaypointObjective_0',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.WillowSeqAct_WaypointObjective_0',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'OldDust_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_StreamInTextures_5',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("OldDust_P", cutsceneOff, cutsceneOn, True)
            
            #Lt. Angvar Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_Toggle_0',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_Toggle_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_ActivateRemoteEvent'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_ActivateRemoteEvent_1',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqEvent_Touch_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_StreamInTextures_5',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.SeqAct_Toggle_0")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=WillowSeqAct_ToggleCinematicModeAffectsAll'Sandworm_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFF.WillowSeqAct_ToggleCinematicModeAffectsAll_0',InputLinkIdx=1)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("Sandworm_P", cutsceneOff, cutsceneOn, True)
            
            #LT. Tetra Boss Cutscene (softlocks)
            #def cutsceneOff():
                #cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch_1", "Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqEvent_Touch_1")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_Toggle_2',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                #cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_Toggle_2")
                #OutputLinksFullOverride(cutsceneObject, "(Links=,LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            #def cutsceneOn():
                #cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch_1", "Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqEvent_Touch_1")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_CameraFade_2',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.WillowSeqAct_WaypointObjective_1',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
                #cutsceneObject = unrealsdk.FindObject("SeqAct_Toggle", "Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_Toggle_2")
                #OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'Helios_Mission_Side.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_CameraFade_0',InputLinkIdx=0)),LinkDesc=\"Out\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            #RegisterCutscene("Helios_P", cutsceneOff, cutsceneOn, True)
            
            #Lt. Hoffman Boss Cutscene
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqEvent_Touch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_Toggle'ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_Toggle_2',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.WillowSeqAct_WaypointObjective_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("SeqEvent_Touch", "ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqEvent_Touch_2")
                OutputLinksFullOverride(cutsceneObject, "(Links=((LinkedOp=SeqAct_CameraFade'ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_CameraFade_1',InputLinkIdx=0),(LinkedOp=WillowSeqAct_WaypointObjective'ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.WillowSeqAct_WaypointObjective_2',InputLinkIdx=0),(LinkedOp=SeqAct_StreamInTextures'ResearchCenter_MissionSide.TheWorld:PersistentLevel.Main_Sequence.BFFFs.SeqAct_StreamInTextures_2',InputLinkIdx=0)),LinkDesc=\"Touched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"UnTouched\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000), (Links=,LinkDesc=\"Empty\",bHasImpulse=False,bDisabled=False,bDisabledPIE=False,bClampedMax=False,bClampedMin=False,bHidden=False,bIsActivated=False,bMoving=False,LinkedOp=None,ActivateDelay=0.000000)")
            RegisterCutscene("ResearchCenter_P", cutsceneOff, cutsceneOn, True)
            
            '''
            #TEMPLATE
            def cutsceneOff():
                cutsceneObject = unrealsdk.FindObject("", "")
                OutputLinksFullOverride(cutsceneObject, "")
            def cutsceneOn():
                cutsceneObject = unrealsdk.FindObject("", "")
                OutputLinksFullOverride(cutsceneObject, "")
            RegisterCutscene("DA_ZONE_P", cutsceneOff, cutsceneOn, False)
            '''
            
        if self.hasBeenEnabled == False:
            RegisterCutscenes()

        #Runs the appropriate cutscene disabler
        def DisableCutscenes(mapname):
            if self.cutsceneDisablerOption.CurrentValue == "Combat Only":
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        if cutscene.combatRelevant == True:
                            cutscene.turnOn()
                        else:
                            cutscene.turnOff()
                
            elif self.cutsceneDisablerOption.CurrentValue == "None":
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        cutscene.turnOff()
            
            else:
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        cutscene.turnOn()
                
        #Runs the audio fixes STOLEN FROM UCP
        def FixAudio():
            if self.audioFixOption.CurrentValue == True:
                audioObjectList = [
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Sage_PowerStation_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "Iris_DL1_TAS_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Iris_DL1_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Iris_DL1_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Stockade_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Stockade_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Fyrestone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "BackBurner_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "BackBurner_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "BackBurner_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "BackBurner_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Iris_Moxxi_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Iris_Hub_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Iris_DL2_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_16",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_17",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_18",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_20",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_21",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_22",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_23",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_24",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_25",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_26",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_33",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Dam_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "Boss_Cliffs_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Sandworm_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Sandworm_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Sandworm_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Sandworm_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Sage_Cliffs_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Caverns_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Caverns_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "VOGChamber_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_16",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_20",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_24",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "OldDust_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "OldDust_DahlDoorAfter.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Dark_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Dark_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "CastleKeep_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Interlude_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "TundraTrain_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0 ",
                    "Ash_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Helios_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "SANCTINTRO_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "BanditSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Village_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Village_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Village_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Iris_DL3_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_17",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_20",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_24",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Fridge_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "HypInterlude_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "IceCanyon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "IceCanyon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "IceCanyon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "HUNGER_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "HUNGER_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Sage_HyperionShip_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "PUMPKIN_PATCH_AUDIO.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "CastleExterior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Orchid_Caves_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "Orchid_Caves_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "FinalBossAscent_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Outwash_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_43",
                    "Grass_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_43",
                    "Luckys_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Luckys_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Sage_Underground_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Sage_Underground_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "Dead_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Dead_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Dead_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Dead_Forest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_18",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_19",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_20",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_21",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_22",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_23",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Dungeon_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "Orchid_WormBelly_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_WormBelly_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Grass_Lynchwood_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_40",
                    "Orchid_Spire_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_Spire_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Orchid_Spire_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Xmas_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Xmas_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Mines_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "ResearchCenter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "ResearchCenter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "ResearchCenter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "ResearchCenter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "TempleSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "TempleSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "TempleSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "CreatureSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_OasisTown_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "HyperionCity_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "RobotSlaughter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "GaiusSanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Iris_DL2_Interior_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "TestingZone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "TestingZone_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Distillery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Distillery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "Orchid_ShipGraveyard_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_ShipGraveyard_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "SanctuaryAir_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_13",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_15",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_7",
                    "Sanctuary_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_8",
                    "Sanctuary_Hole_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Sanctuary_Hole_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "CraterLake_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "CraterLake_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_11",
                    "CraterLake_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_12",
                    "CraterLake_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_25",
                    "CraterLake_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_18",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_19",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_22",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_29",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_35",
                    "Sage_RockForest_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_39",
                    "Iris_Hub2_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Cove_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "SouthernShelf_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "SouthpawFactory_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "ThresherRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "ThresherRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Grass_Cliffs_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Grass_Cliffs_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_10",
                    "Grass_Cliffs_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "Ice_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "Frost_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "TundraExpress_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "TundraExpress_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "TundraExpress_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_14",
                    "TundraExpress_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Docks_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Docks_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Boss_Volcano_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Easter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Easter_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Orchid_Refinery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_Refinery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "Orchid_Refinery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_2",
                    "Orchid_Refinery_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "PandoraPark_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "PandoraPark_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_26",
                    "PandoraPark_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "PandoraPark_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_40",
                    "Glacial_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Glacial_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_1",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_4",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_5",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_6",
                    "DungeonRaid_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_9",
                    "SandwormLair_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_SaltFlats_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_0",
                    "Orchid_SaltFlats_Audio.TheWorld:PersistentLevel.WwiseSoundVolume_3"
                ]
                for object in audioObjectList:
                    if unrealsdk.FindObject("WwiseSoundVolume", object):
                        audioObject = unrealsdk.FindObject("WwiseSoundVolume", object)
                        audioObject.EnvironmentalEffects[0].Effect = None

        #Makes Torgue Tokens and Seraph Crystals pickup automatically
        def MakeMiscPickupAutomatically():
            if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_TorgueToken.UsableItems.Pickup_TorgueToken"):
                torgueTokenObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_TorgueToken.UsableItems.Pickup_TorgueToken")
                torgueTokenObject.bAutomaticallyPickup = True
            
            if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.bAutomaticallyPickup = True
            
            if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.bAutomaticallyPickup = True
                
            if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.bAutomaticallyPickup = True
                
            if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.bAutomaticallyPickup = True

        if self.hasBeenEnabled == False:
            MakeMiscPickupAutomatically()
        
        #Causes Seraph Crystals to use eridium values for loot beam and drop lifespan
        def MakeSeraphCrystalsEridium():
            if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.BaseRarity.BaseValueConstant = 503
                seraphCrystalObject.BaseRarity.BaseValueAttribute = None
            
            if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.BaseRarity.BaseValueConstant = 503
                seraphCrystalObject.BaseRarity.BaseValueAttribute = None
                
            if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.BaseRarity.BaseValueConstant = 503
                seraphCrystalObject.BaseRarity.BaseValueAttribute = None
                
            if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                seraphCrystalObject.BaseRarity.BaseValueConstant = 503
                seraphCrystalObject.BaseRarity.BaseValueAttribute = None

        if self.hasBeenEnabled == False:
            MakeSeraphCrystalsEridium()

        #Gives Michael Mamaril better loot
        def FixMamarilLoot():
            if unrealsdk.FindObject("ItemPoolDefinition","GD_JohnMamaril.WeaponPools.Pool_GiftRewards"):
                mamarilPoolObject = unrealsdk.FindObject("ItemPoolDefinition","GD_JohnMamaril.WeaponPools.Pool_GiftRewards")
                PC = GetEngine().GamePlayers[0].Actor
                addString = "("
                addData = [
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.ShieldPools.Pool_Shields_All_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.ShieldPools.Pool_Shields_All_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.ShieldPools.Pool_Shields_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.GrenadeModPools.Pool_GrenadeMods_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.GrenadeModPools.Pool_GrenadeMods_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)",
                    "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.GrenadeModPools.Pool_GrenadeMods_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=0.150000),bDropOnDeath=False)"
                ]
                customWeightList = [
                    unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_1_Common_Minus3"),
                    unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_2_Uncommon_Minus3"),
                    unrealsdk.FindObject("AttributeInitializationDefinition", "GD_Balance.Weighting.Weight_4_Rare_Minus3")
                ]
                i = 0
                for data in addData:
                    addString += data
                    if i < len(addData) - 1:
                        addString += ","
                    else:
                        addString += ")"
                    i += 1
                    
                PC.ServerRCon(f"set {PC.PathName(mamarilPoolObject)} BalancedItems {addString}")
                
                i = 0
                for pool in mamarilPoolObject.BalancedItems:
                    pool.Probability.InitializationDefinition = customWeightList[i]
                    if i == 2:
                        i = 0
                    else:
                        i += 1
        
        def MakeGrogNozzleReward():
            if unrealsdk.FindObject("MissionDefinition","GD_Aster_ClapTrapBeard.M_ClapTrapBeard") and unrealsdk.FindObject("WeaponBalanceDefinition","GD_Aster_Weapons.Pistols.Pistol_Maliwan_3_GrogNozzle"):
                missionObject = unrealsdk.FindObject("MissionDefinition","GD_Aster_ClapTrapBeard.M_ClapTrapBeard")
                nozzleObject = unrealsdk.FindObject("WeaponBalanceDefinition","GD_Aster_Weapons.Pistols.Pistol_Maliwan_3_GrogNozzle")
                missionObject.Reward.RewardItems = [nozzleObject]
                
        if self.hasBeenEnabled == False and self.grogNozzleRewardOption.CurrentValue == True:
            MakeGrogNozzleReward()
        
        #Adds the specified item pool list to an AIPawnBalanceDefinition's DefaultItemPoolIncludedLists
        #params = [pawn, list]
        def AutoAddPawnItemPoolList(params) -> bool:
            if unrealsdk.FindObject("AIPawnBalanceDefinition", params[0]) and unrealsdk.FindObject("ItemPoolListDefinition", params[1]):
                pawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", params[0])
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[1])
                workingList = []
                
                for list in pawnObject.DefaultItemPoolIncludedLists:
                    workingList.append(list)
                workingList.append(listObject)
                
                pawnObject.DefaultItemPoolIncludedLists = workingList
                
                return True
            
            else:
                return False
                
        #Removes the pools at the specified index and shifts all subsequent pools down
        #params = [pawn, index]
        def AutoRemovePawnItemPoolList(params) -> bool:
            if unrealsdk.FindObject("AIPawnBalanceDefinition", params[0]):
                pawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", params[0])
                if pawnObject.DefaultItemPoolIncludedLists[params[1]]:
                    workingList = []
                    
                    for list in pawnObject.DefaultItemPoolIncludedLists:
                        workingList.append(list)
                    workingList.pop(params[1])
                    
                    pawnObject.DefaultItemPoolIncludedLists = workingList
                    
                    return True
            
            else:
                return False
            
        #Adds the specified item pool list to a Behavior_SpawnItems's ItemPoolIncludedLists
        #params = [behavior, list]
        def AutoAddBehaviorItemPoolList(params) -> bool:
            if unrealsdk.FindObject("Behavior_SpawnItems", params[0]) and unrealsdk.FindObject("ItemPoolListDefinition", params[1]):
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", params[0])
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[1])
                workingList = []
                
                for list in behaviorObject.ItemPoolIncludedLists:
                    workingList.append(list)
                workingList.append(listObject)
                
                behaviorObject.ItemPoolIncludedLists = workingList
                
                return True
            
            else:
                return False
                
        #Removes the pools at the specified index and shifts all subsequent pools down
        #params = [behavior, index]
        def AutoRemoveBehaviorItemPoolList(params) -> bool:
            if unrealsdk.FindObject("Behavior_SpawnItems", params[0]):
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", params[0])
                if behaviorObject.ItemPoolIncludedLists[params[1]]:
                    workingList = []
                    
                    for list in behaviorObject.ItemPoolIncludedLists:
                        workingList.append(list)
                    workingList.pop(params[1])
                    
                    behaviorObject.ItemPoolIncludedLists = workingList
                    
                    return True
            
            else:
                return False
                
        #Adds the specified item pool list to a Behavior_AIChangeInventory's NewItemPoolIncludedLists
        #params = [behavior, list]
        def AutoAddChangeInventoryItemPoolList(params) -> bool:
            if unrealsdk.FindObject("Behavior_AIChangeInventory", params[0]) and unrealsdk.FindObject("ItemPoolListDefinition", params[1]):
                behaviorObject = unrealsdk.FindObject("Behavior_AIChangeInventory", params[0])
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[1])
                workingList = []
                
                for list in behaviorObject.NewItemPoolIncludedLists:
                    workingList.append(list)
                workingList.append(listObject)
                
                behaviorObject.NewItemPoolIncludedLists = workingList
                
                return True
            
            else:
                return False
                
        #Removes the pools at the specified index and shifts all subsequent pools down
        #params = [behavior, index]
        def AutoRemoveChangeInventoryItemPoolList(params) -> bool:
            if unrealsdk.FindObject("Behavior_AIChangeInventory", params[0]):
                behaviorObject = unrealsdk.FindObject("Behavior_AIChangeInventory", params[0])
                if behaviorObject.NewItemPoolIncludedLists[params[1]]:
                    workingList = []
                    
                    for list in behaviorObject.NewItemPoolIncludedLists:
                        workingList.append(list)
                    workingList.pop(params[1])
                    
                    behaviorObject.NewItemPoolIncludedLists = workingList
                    
                    return True
            
            else:
                return False
        
        #For turning the various properties of an object into a usable string
        def Stringify(object):
            if object != None:
                objectClass = f"{object.Class}"
                objectOuter = f"{object.Outer}"
                objectName = f"{object.Name}"

                while " " in objectClass or "." in objectClass:
                    objectClass = objectClass[1:]
                    
                while " " in objectOuter:
                    objectOuter = objectOuter[1:]
                    
                while " " in objectName:
                    objectName = objectName[1:]
                
                if unrealsdk.FindObject(objectClass, f"{objectOuter}.{objectName}"):
                    return f"{objectClass}'{objectOuter}.{objectName}'"
                    
                else:
                    objectName += "_0"
                    i = 0
                    j = 2
                    while not unrealsdk.FindObject(objectClass, f"{objectOuter}.{objectName}"):
                        if i == 10 or i == 100:
                            j += 1
                        i += 1
                        objectName = objectName[0:-j]
                        workingString = "_{}"
                        objectName += workingString.format(i)
                        
                    return f"{objectClass}'{objectOuter}.{objectName}'"
                
                return f"{objectClass}'{objectOuter}.{objectName}'"
            else:
                return None
        
        #For adding pools to an ItemPoolListDefinition
        #params = [list, pooldata]
        #pooldata = "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))" for example
        def AutoAddPoolToList(params) -> bool:
            ItemPoolChar = 0
            ItemPoolNameChar = 0
            ItemPoolNameChar2 = 0
            while params[1][ItemPoolChar:ItemPoolChar+8] != "ItemPool":
                ItemPoolChar += 1
            if params[1][ItemPoolChar+9:ItemPoolChar+13] != "None":
                ItemPoolNameChar = ItemPoolChar
                while params[1][ItemPoolNameChar] != "'":
                    ItemPoolNameChar += 1
                ItemPoolNameChar2 = ItemPoolNameChar + 1
                while params[1][ItemPoolNameChar2] != "'":
                    ItemPoolNameChar2 += 1 
                    
            BaseValueConstantChar = 0
            while params[1][BaseValueConstantChar:BaseValueConstantChar+17] != "BaseValueConstant":
                BaseValueConstantChar += 1
            BaseValueConstantEndChar = BaseValueConstantChar
            while params[1][BaseValueConstantEndChar] != ",":
                BaseValueConstantEndChar += 1
            
            BaseValueAttributeChar = 0
            BaseValueAttributeNameChar = 0
            BaseValueAttributeNameChar2 = 0
            while params[1][BaseValueAttributeChar:BaseValueAttributeChar+18] != "BaseValueAttribute":
                BaseValueAttributeChar += 1
            if params[1][BaseValueAttributeChar+19:BaseValueAttributeChar+23] != "None":
                BaseValueAttributeNameChar = BaseValueAttributeChar
                while params[1][BaseValueAttributeNameChar] != "'":
                    BaseValueAttributeNameChar += 1
                BaseValueAttributeNameChar2 = BaseValueAttributeNameChar + 1
                while params[1][BaseValueAttributeNameChar2] != "'":
                    BaseValueAttributeNameChar2 += 1
                    
            InitializationDefinitionChar = 0
            InitializationDefinitionNameChar = 0
            InitializationDefinitionNameChar2 = 0
            while params[1][InitializationDefinitionChar:InitializationDefinitionChar+24] != "InitializationDefinition":
                InitializationDefinitionChar += 1
            if params[1][InitializationDefinitionChar+25:InitializationDefinitionChar+29] != "None":
                InitializationDefinitionNameChar = InitializationDefinitionChar
                while params[1][InitializationDefinitionNameChar] != "'":
                    InitializationDefinitionNameChar += 1
                InitializationDefinitionNameChar2 = InitializationDefinitionNameChar + 1
                while params[1][InitializationDefinitionNameChar2] != "'":
                    InitializationDefinitionNameChar2 += 1 
            
            BaseValueScaleConstantChar = 0
            while params[1][BaseValueScaleConstantChar:BaseValueScaleConstantChar+22] != "BaseValueScaleConstant":
                BaseValueScaleConstantChar += 1
            BaseValueScaleConstantEndChar = BaseValueScaleConstantChar
            while params[1][BaseValueScaleConstantEndChar] != ")":
                BaseValueScaleConstantEndChar += 1
            
            if unrealsdk.FindObject("ItemPoolListDefinition", params[0]) and unrealsdk.FindObject(params[1][ItemPoolChar+9:ItemPoolNameChar], params[1][ItemPoolNameChar+1:ItemPoolNameChar2]):
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[0])
                numPools = 0
                bigString = "("
                ItemPoolList = []
                BaseValueConstantList = []
                BaseValueAttributeList = []
                BaseValueScaleConstantList = []
                InitializationDefinitionList = []
                for pool in listObject.ItemPools:
                    bigString +="(ItemPool=None,PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000)),"
                    ItemPoolList.append(pool.ItemPool)
                    BaseValueConstantList.append(pool.PoolProbability.BaseValueConstant)
                    BaseValueAttributeList.append(pool.PoolProbability.BaseValueAttribute)
                    BaseValueScaleConstantList.append(pool.PoolProbability.BaseValueScaleConstant)
                    InitializationDefinitionList.append(pool.PoolProbability.InitializationDefinition)
                    numPools += 1
                bigString += f"(ItemPool=None,PoolProbability=(BaseValueConstant={params[1][BaseValueConstantChar+18:BaseValueConstantEndChar]},BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant={params[1][BaseValueScaleConstantChar+23:BaseValueScaleConstantEndChar]})))"
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(listObject)} ItemPools {bigString}")
                i = 0
                for pool in listObject.ItemPools:
                    if i == numPools:
                        listObject.ItemPools[numPools].ItemPool = unrealsdk.FindObject(params[1][ItemPoolChar+9:ItemPoolNameChar], params[1][ItemPoolNameChar+1:ItemPoolNameChar2])
                        listObject.ItemPools[numPools].PoolProbability.BaseValueAttribute = unrealsdk.FindObject(params[1][BaseValueAttributeChar+19:BaseValueAttributeNameChar], params[1][BaseValueAttributeNameChar+1:BaseValueAttributeNameChar2])
                        listObject.ItemPools[numPools].PoolProbability.InitializationDefinition = unrealsdk.FindObject(params[1][InitializationDefinitionChar+25:InitializationDefinitionNameChar], params[1][InitializationDefinitionNameChar+1:InitializationDefinitionNameChar2])
                    else:
                        listObject.ItemPools[i].ItemPool = ItemPoolList[i]
                        listObject.ItemPools[i].PoolProbability.BaseValueConstant = BaseValueConstantList[i]
                        listObject.ItemPools[i].PoolProbability.BaseValueAttribute = BaseValueAttributeList[i]
                        listObject.ItemPools[i].PoolProbability.InitializationDefinition = InitializationDefinitionList[i]
                        listObject.ItemPools[i].PoolProbability.BaseValueScaleConstant = BaseValueScaleConstantList[i]
                    i += 1

                return True
                
            else:
                return False
                
        #For removing pools from an ItemPoolListDefinition
        #params = [list, index]
        def AutoRemovePoolFromList(params) -> bool:
            if unrealsdk.FindObject("ItemPoolListDefinition", params[0]):
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[0])
                
                i = 0
                bigString = "("
                for pool in listObject.ItemPools:
                    if i != params[1]:
                        bigString += f"(ItemPool={Stringify(pool.ItemPool)},PoolProbability=(BaseValueConstant={pool.PoolProbability.BaseValueConstant},BaseValueAttribute={Stringify(pool.PoolProbability.BaseValueAttribute)},InitializationDefinition={Stringify(pool.PoolProbability.InitializationDefinition)},BaseValueScaleConstant={pool.PoolProbability.BaseValueScaleConstant})),"
                    i += 1
                if bigString[-1] == ",":
                    bigString = bigString[0:-2]
                bigString += ")"
                
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(listObject)} ItemPools {bigString}")
                
                return True
                
            else:
                return False
                
        #For adding items to an ItemPoolDefinition
        #params = [pool, itemdata]
        #itemdata = "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)" for example
        def AutoAddItemToPool(params) -> bool:
            if unrealsdk.FindObject("ItemPoolDefinition", params[0]):
                poolObject = unrealsdk.FindObject("ItemPoolDefinition", params[0])
                        
                bigString = "("
                for item in poolObject.BalancedItems:
                    bigString += f"(ItmPoolDefinition={Stringify(item.ItmPoolDefinition)},InvBalanceDefinition={Stringify(item.InvBalanceDefinition)},Probability=(BaseValueConstant={item.Probability.BaseValueConstant},BaseValueAttribute={Stringify(item.Probability.BaseValueAttribute)},InitializationDefinition={Stringify(item.Probability.InitializationDefinition)},BaseValueScaleConstant={item.Probability.BaseValueScaleConstant}),bDropOnDeath={item.bDropOnDeath}),"
                bigString += f"{params[1]})"

                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems {bigString}")

                return True
                
            else:
                return False
                
        #For removing items from an ItemPoolDefinition
        #params = [pool, index]
        def AutoRemoveItemFromPool(params) -> bool:
            if unrealsdk.FindObject("ItemPoolDefinition", params[0]):
                poolObject = unrealsdk.FindObject("ItemPoolDefinition", params[0])
                
                i = 0
                bigString = "("
                for item in poolObject.BalancedItems:
                    if i != params[1]:
                        bigString += f"(ItmPoolDefinition={Stringify(item.ItmPoolDefinition)},InvBalanceDefinition={Stringify(item.InvBalanceDefinition)},Probability=(BaseValueConstant={item.Probability.BaseValueConstant},BaseValueAttribute={Stringify(item.Probability.BaseValueAttribute)},InitializationDefinition={Stringify(item.Probability.InitializationDefinition)},BaseValueScaleConstant={item.Probability.BaseValueScaleConstant}),bDropOnDeath={item.bDropOnDeath}),"
                    i += 1
                if bigString[-1] == ",":
                    bigString = bigString[0:-2]
                bigString += ")"
                
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(poolObject)} BalancedItems {bigString}")
                
                return True
                
            else:
                return False
                
        #For adding pools to an AIPawnBalanceDefinition's DefaultItemPoolList
        #params = [pawn, pooldata]
        #pooldata = "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Knuckledragger',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))" for example
        def AutoAddPoolToPawn(params) -> bool:
            if unrealsdk.FindObject("AIPawnBalanceDefinition", params[0]):
                pawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", params[0])
                        
                bigString = "("
                for pool in pawnObject.DefaultItemPoolList:
                    bigString += f"(ItemPool={Stringify(pool.ItemPool)},PoolProbability=(BaseValueConstant={pool.PoolProbability.BaseValueConstant},BaseValueAttribute={Stringify(pool.PoolProbability.BaseValueAttribute)},InitializationDefinition={Stringify(pool.PoolProbability.InitializationDefinition)},BaseValueScaleConstant={pool.PoolProbability.BaseValueScaleConstant})),"
                bigString += f"{params[1]})"

                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(pawnObject)} DefaultItemPoolList {bigString}")

                return True
                
            else:
                return False
                
        #For removing pools from an AIPawnBalanceDefinition's DefaultItemPoolList
        #params = [pawn, index]
        def AutoRemovePoolFromPawn(params) -> bool:
            if unrealsdk.FindObject("AIPawnBalanceDefinition", params[0]):
                pawnObject = unrealsdk.FindObject("AIPawnBalanceDefinition", params[0])
                
                i = 0
                bigString = "("
                for pool in pawnObject.DefaultItemPoolList:
                    if i != params[1]:
                        bigString += f"(ItemPool={Stringify(pool.ItemPool)},PoolProbability=(BaseValueConstant={pool.PoolProbability.BaseValueConstant},BaseValueAttribute={Stringify(pool.PoolProbability.BaseValueAttribute)},InitializationDefinition={Stringify(pool.PoolProbability.InitializationDefinition)},BaseValueScaleConstant={pool.PoolProbability.BaseValueScaleConstant})),"
                    i += 1
                if bigString[-1] == ",":
                    bigString = bigString[0:-2]
                bigString += ")"
                
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(pawnObject)} DefaultItemPoolList {bigString}")
                
                return True
                
            else:
                return False
                
        #For adding pools to a Behavior_SpawnItems's ItemPoolList
        #params = [behavior, pooldata]
        #pooldata = "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))" for example
        def AutoAddPoolToBehavior(params) -> bool:
            if unrealsdk.FindObject("Behavior_SpawnItems", params[0]):
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", params[0])
                        
                bigString = "("
                for pool in behaviorObject.ItemPoolList:
                    bigString += f"(ItemPool={Stringify(pool.ItemPool)},PoolProbability=(BaseValueConstant={pool.PoolProbability.BaseValueConstant},BaseValueAttribute={Stringify(pool.PoolProbability.BaseValueAttribute)},InitializationDefinition={Stringify(pool.PoolProbability.InitializationDefinition)},BaseValueScaleConstant={pool.PoolProbability.BaseValueScaleConstant})),"
                bigString += f"{params[1]})"

                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(behaviorObject)} ItemPoolList {bigString}")

                return True
                
            else:
                return False
                
        #For removing pools from a Behavior_SpawnItems's ItemPoolList
        #params = [behavior, index]
        def AutoRemovePoolFromBehavior(params) -> bool:
            if unrealsdk.FindObject("Behavior_SpawnItems", params[0]):
                behaviorObject = unrealsdk.FindObject("Behavior_SpawnItems", params[0])
                
                i = 0
                bigString = "("
                for pool in behaviorObject.ItemPoolList:
                    if i != params[1]:
                        bigString += f"(ItemPool={Stringify(pool.ItemPool)},PoolProbability=(BaseValueConstant={pool.PoolProbability.BaseValueConstant},BaseValueAttribute={Stringify(pool.PoolProbability.BaseValueAttribute)},InitializationDefinition={Stringify(pool.PoolProbability.InitializationDefinition)},BaseValueScaleConstant={pool.PoolProbability.BaseValueScaleConstant})),"
                    i += 1
                if bigString[-1] == ",":
                    bigString = bigString[0:-2]
                bigString += ")"
                
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"set {PC.PathName(behaviorObject)} ItemPoolList {bigString}")
                
                return True
                
            else:
                return False
        
        #For adding lists to a ItemPoolListDefinition's ItemPoolIncludedLists
        #params = [target, list]
        def AutoAddListToList(params) -> bool:
            if unrealsdk.FindObject("ItemPoolListDefinition", params[0]) and unrealsdk.FindObject("ItemPoolListDefinition", params[1]):
                targetObject = unrealsdk.FindObject("ItemPoolListDefinition", params[0])
                listObject = unrealsdk.FindObject("ItemPoolListDefinition", params[1])
                workingList = []
                
                for list in targetObject.ItemPoolIncludedLists:
                    workingList.append(list)
                workingList.append(listObject)
                
                targetObject.ItemPoolIncludedLists = workingList
                
                return True
            
            else:
                return False
        
        #For creating new objects
        #params = [object to duplicate class, object to duplicate outer+name , name extension]
        def CreateNewObject(params) -> bool:
            if unrealsdk.FindObject(params[0], params[1]):
                oldObject = unrealsdk.FindObject(params[0], params[1])
                newObject = unrealsdk.FindObject(params[0], f"{params[1]}{params[2]}")
                if newObject == None:
                    newObject = unrealsdk.ConstructObject(
                        Class=oldObject.Class,
                        Outer=oldObject.Outer,
                        Name=f"{oldObject.Name}{params[2]}",
                        Template=oldObject
                    )
                    unrealsdk.KeepAlive(newObject)
                
                return True
                
            else:
                return False

        #Object which stores functions to be run once and they are checked each time the main hook runs to see if they have already run
        class AlwaysCheckButRunOnce:
            def __init__(self, params):
                self.myFunctions = params
                self.successList = []
                
            def runFunctions(self):
                i = 0
                for function in self.myFunctions:
                    if i not in self.successList:
                        if function[0](function[1:]):
                            self.successList.append(i)
                    i += 1
                    
            def resetSuccessList(self):
                self.successList = []
        
        #Adds an entry to the list of AlwaysCheckButRunOnce objects
        def AddUpdatingEntry(params):
            newObject = AlwaysCheckButRunOnce(params)
            self.autoCheckingObjectsList.append(newObject)

        #Runs the AlwaysCheckButRunOnce objects' functions
        def RunAutoCheckFunctions():
            if len(self.autoCheckingObjectsList) > 0:
                for object in self.autoCheckingObjectsList:
                    object.runFunctions()
            
        #Creates the custom Hezel pool
        
        
        #For Fl4re's modification of loot pools
        '''
        USAGE:
        
        Each function requires two pieces of information: target and data
        
        Target = the name of the object you are modifying, in double quotes
        For example: ItemPoolListDefinition'GD_Sage_ItemPools.Raid.PoolList_Sage_Raid_Items' should be "GD_Sage_ItemPools.Raid.PoolList_Sage_Raid_Items"
        
        Data = the info the function will use to make the adjustment
        In an adding function, it will depend on what is being added.
        If it is more than one peice of data, such as for an entry in DefaultItemPoolList, it is all the text following the equal sign as appears in object explorer, in double quotes
        For example: "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons',PoolProbability=(BaseValueConstant=0.020000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"
        If it is just one piece of data, such as for an entry in DefaultItemPoolIncludedLists, it is the name of the object being added, in double quotes
        For example: ItemPoolListDefinition'GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear' should be "GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear"
        In a removing function, it is the index which will be removed
        
        CreateNewObject is a special case which requires 3 peices of info
        The parameters which you need to provide to CreateNewObject are the class of the object you are duplicating, the name of the object you are duplicating, and the extension to the name you want your new object to have, all in their own double quotes
        For example: CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All", "_Customized"]) would create a copy of ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All' called ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_Customized'
        
        Available functions:
        
        AutoAddPoolToList -> For adding pools to an ItemPoolListDefinition
        AutoRemovePoolFromList -> For removing pools from an ItemPoolListDefinition
        AutoAddItemToPool -> For adding items to an ItemPoolDefinition
        AutoRemoveItemFromPool -> For removing items from an ItemPoolDefinition
        
        AutoAddPawnItemPoolList -> Adds the specified item pool list to an AIPawnBalanceDefinition's DefaultItemPoolIncludedLists
        AutoRemovePawnItemPoolList -> Removes the pools at the specified index and shifts all subsequent pools down
        AutoAddBehaviorItemPoolList -> Adds the specified item pool list to a Behavior_SpawnItems's ItemPoolIncludedLists
        AutoRemoveBehaviorItemPoolList -> Removes the pools at the specified index and shifts all subsequent pools down
        AutoAddChangeInventoryItemPoolList -> Adds the specified item pool list to a Behavior_AIChangeInventory's NewItemPoolIncludedLists
        AutoRemoveChangeInventoryItemPoolList -> Removes the pools at the specified index and shifts all subsequent pools down
        AutoAddListToList -> For adding lists to a ItemPoolListDefinition's ItemPoolIncludedLists
        
        AutoAddPoolToPawn -> For adding pools to an AIPawnBalanceDefinition's DefaultItemPoolList
        AutoRemovePoolFromPawn -> For removing pools from an AIPawnBalanceDefinition's DefaultItemPoolList
        AutoAddPoolToBehavior -> For adding pools to a Behavior_SpawnItems's ItemPoolList
        AutoRemovePoolFromBehavior -> For removing pools from a Behavior_SpawnItems's ItemPoolList
        
        CreateNewObject -> For creating new objects
        
        For running changes on enable:
        You probably won't use this much because in order for this to work, all the of relevant objects need to be loaded on the menu
        Write the name of the function, then in round brackets write square brackets with target, data inside of them
        For example: AutoAddItemToPool(["GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
        
        For running changes once all of the requried objects are loaded:
        This is probably what you will use most
        The function AddUpdatingEntry creates an object which stores info and waits to execute its functions until it is able
        Write AddUpdatingEntry, then in round brackets write sqaure brackets into which you place the info for the object to stores
        Each peice of info for the object is contained within another set of square brackets and contains the name of a function (NOT IN DOUBLE QUOTES), the target for that function, the data for that function
        Seperate each object info block with a comma. Theoretically you could make all your changes using one object with a ton of info blocks in it, but that would be horrible to read and modify as I'm sure you can imagine.
        For example (an info block): [AutoRemovePoolFromBehavior, "GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_0", 0]
        For example (complete function): AddUpdatingEntry([[AutoAddPoolToBehavior, "GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_0", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"], [AutoRemovePoolFromBehavior, "GD_HyperionBunkerBoss.Character.AIDef_BunkerBoss:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_0", 0]])
        
        #Name (Becomes GD_Balance.Weighting.Weight_NAME)
        
        To assign custom weight to things, since the world hates us, there is a bit of a procedure
        For each instance of a weight you want to assign, use the following line:
        unrealsdk.FindObject("OBJECT CLASS", "OBJECT NAME").LIST THAT CONTAINS POOLS/ITEMS[INDEX].LOCATION WHERE WEIGHT IS NEEDED = unrealsdk.FindObject("WEIGHT CLASS","WEIGHT NAME")
        For example: unrealsdk.FindObject("ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD").ItemPools[1].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3P")
        
        
        Watch indendation and have fun :)
        
        '''
        def FlarePoolChanges():
            
            #Legendary Droprate Scaler (gonna finish post launch)
            '''
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.ClassModPools.Pool_ClassMod_All_Common_Plus").BalancedItems[4].Probability.BaseValueScaleConstant =    0.75 #Base of 1
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.ClassModPools.Pool_ClassMod_All_Uncommon_Plus").BalancedItems[4].Probability.BaseValueScaleConstant =  0.75 #Base of 1
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.ClassModPools.Pool_ClassMod_All_Rare_Plus").BalancedItems[4].Probability.BaseValueScaleConstant =      0.75 #Base of 1
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.ClassModPools.Pool_ClassMod_All_VeryRare_Plus").BalancedItems[4].Probability.BaseValueScaleConstant =  0.75 #Base of 1
            '''

            #Empty PoolList Creator
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear","_Custom"])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",7])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",6])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",5])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",4])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",3])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",2])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",1])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom",0])
            #Empty Legendary Pool Creator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary", "_"])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 5])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 4])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 3])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 2])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 1])
            AutoRemoveItemFromPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", 0])
            #Empty GunsAndGear Pool Creator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear", "_Custom"])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom", 3])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom", 2])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom", 1])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom", 0])
            
            #Raid Base
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear","_Custom"])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",25])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",24])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",23])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",22])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",21])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",20])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",19])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",18])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",17])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",16])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",15])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",14])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",13])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",12])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",11])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",10])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",9])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",8])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",7])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",6])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",5])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",2])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",1])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom",0])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Bar',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumBar',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom","(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=1.000000))"])
            #SuperBadassBase
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear","_Custom"])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",11])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",10])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",9])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",8])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",7])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",6])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",5])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",2])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",1])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom",0])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_GunsAndGear',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.VehicleSkins.Pool_VehicleSkins_All',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_VehicleSkins',InitializationDefinition=None,BaseValueScaleConstant=10.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Bar',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumBar',BaseValueScaleConstant=0.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=0.250000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=0.250000),bDropOnDeath=True)"])
            #UltimateBadassBase
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear","_Custom"])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",17])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",16])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",15])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",14])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",13])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",12])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",11])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",10])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",9])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",8])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",7])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",6])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",5])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",2])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",1])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom",0])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_GunsAndGear',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1or2',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.VehicleSkins.Pool_VehicleSkins_All',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_VehicleSkins',InitializationDefinition=None,BaseValueScaleConstant=10.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Bar',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumBar',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=0.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_EridiumStick',BaseValueScaleConstant=0.500000),bDropOnDeath=True)"])
            
            #FLAREV2
            
            #Custom tunable plus1/minus1 replacement pools for badasses and shit (king mong too good)
            #Etech Poolio ratios, adds Etechs at a tunable rate to veryrare modded pools
            #Pistols
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurplePistolsPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Pistols_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Pistols_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Pistols_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Pistols_Etech")
            #AssaultRifles
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleAssaultRiflesPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleAssaultRiflesPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleAssaultRiflesPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_AssaultRifles_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleAssaultRiflesPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_AssaultRifles_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleAssaultRiflesPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_AssaultRifles_Etech")
            #Shotguns
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleSMGPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSMGPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_SMG_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSMGPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_SMG_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSMGPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_SMG_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSMGPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_SMG_Etech")
            #SMG
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleShotgunsPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleShotgunsPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleShotgunsPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleShotgunsPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Shotguns_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleShotgunsPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Shotguns_Etech")
            #SniperRifles
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleSniperRiflesPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSniperRiflesPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSniperRiflesPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_SniperRifles_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSniperRiflesPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_SniperRifles_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSniperRiflesPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_SniperRifles_Etech")
            #Launchers
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleLaunchersPlusEtech"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLaunchersPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Launchers_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLaunchersPlusEtech", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Launchers_05_VeryRare_Alien',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLaunchersPlusEtech").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Launchers_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLaunchersPlusEtech").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_Launchers_Etech")
            #All Together Now
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare", "_Modded"])
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[0].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurplePistolsPlusEtech")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[1].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleAssaultRiflesPlusEtech")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[2].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSMGPlusEtech")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[3].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleShotgunsPlusEtech")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[4].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleSniperRiflesPlusEtech")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded").BalancedItems[5].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLaunchersPlusEtech")
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded").BalancedItems[0].ItmPoolDefinition = unrealsdk.FindObject("ItemPoolDefinition","GD_Itempools.WeaponPools.Pool_Weapons_All_05_VeryRare_Modded")
            
            
            
            
            
            #RaidPoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_RaidLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Raid")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Raid")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Raid")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Raid")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Raid")
            
            #WhitePoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_WhiteLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_White")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_White")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_White")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_White")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_WhiteLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_White")
            
            #GreenPoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_GreenLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Green")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Green")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Green")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Green")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_GreenLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Green")
            
            #BluePoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_BlueLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Blue")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Blue")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Blue")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Blue")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BlueLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Blue")
            
            #PurplePoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_PurpleLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Purple")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_PurpleLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Purple")
            
            #OrangePoolio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_OrangeLoot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_01_Common_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary_Modded',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot").BalancedItems[0].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_1_Common_Orange")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot").BalancedItems[1].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2_Uncommon_Orange")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot").BalancedItems[2].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4_Rare_Orange")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot").BalancedItems[3].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_5_VeryRare_Orange")
            unrealsdk.FindObject("ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom_OrangeLoot").BalancedItems[4].Probability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_6_Legendary_Orange")
            
            
            
            
            
            #Green Raid, MP Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_GreenRaid"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_GreenRaid',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_GreenRaid_MP',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Green Raid, MP + BossUniques Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_GreenRaidBossUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_GreenRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_GreenRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            #Blue Raid, MP Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_BlueRaid"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BlueRaid',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BlueRaid_MP',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Blue Raid, MP + BossUniques Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_BlueRaidBossUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BlueRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BlueRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            #Purple Raid, MP Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_PurpleRaid"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_PurpleRaid',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_PurpleRaid_MP',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Purple Raid, MP + BossUniques Scaled
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_PurpleRaidBossUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_PurpleRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_PurpleRaid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            
            
            #Raid Testing Pools
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Test1"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test1","(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_01_Common',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Test2"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test2","(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Test4"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test4","(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Test5"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test5","(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Test6"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test6","(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            
            
            #KD TESTING POOL
            #CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_KD"])
            
            #AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD","(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Scorch',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            #AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD","(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Laney',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            #AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD","(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Tumba',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            #unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD").ItemPools[0].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2P")
            #unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD").ItemPools[1].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3P")
            #unrealsdk.FindObject("ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD").ItemPools[2].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4P")
            
            #AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KnuckleDragger","(ItemPool=ItemPoolListDefinition'GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"]])
            
            #KD TESTING POOL 2 HELLFIRE BOOGALOO
            #CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom","_KD2"])
            #CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Scorch", "_KD2"])
            #AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Scorch_KD2", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Maliwan_5_HellFire',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            #AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD2","(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Scorch_KD2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            #AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_KnuckleDragger","(ItemPool=ItemPoolListDefinition'GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"]])
            
            #AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.PawnBalance_PrimalBeast_Monglet","(ItemPool=ItemPoolListDefinition'GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"]])
            
            #AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.PawnBalance_PrimalBeastAdult","(ItemPool=ItemPoolListDefinition'GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"]])
            
            #AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.PawnBalance_PrimalBeast","(ItemPool=ItemPoolListDefinition'GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_KD2',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"]])
            
            
            
            
            
            #Warrior Story Kill Guaranteed Leggo/Handsome Sorceror Story Kill Guaranteed Leggo
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Warrior", "_Story"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_Story", 7])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_Story", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_Story", 2])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Warrior_Story", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Warrior", "_StoryCosmetics"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 6])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 5])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 4])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 1])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics", 0])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_WarriorStory"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_WarriorStory", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Warrior_Story',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_WarriorStory", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Warrior_StoryCosmetics',PoolProbability=(BaseValueConstant=0.250000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_59.Behavior_SpawnItems_6", 0],
            [AutoAddBehaviorItemPoolList, "Boss_Volcano_Combat_Monster.TheWorld:PersistentLevel.Main_Sequence.SeqAct_ApplyBehavior_59.Behavior_SpawnItems_6", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_WarriorStory"]])
            
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_ButtStallion_Proto.Character.AIDef_ButtStallion_Proto:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_46", 1],
            [AutoAddBehaviorItemPoolList, "GD_ButtStallion_Proto.Character.AIDef_ButtStallion_Proto:AIBehaviorProviderDefinition_1.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_WarriorStory"]])
            
            
            
            
            
            #Big Sleep Unique Scaling
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_BigSleep"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BigSleep", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_BigSleep',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniqueRares',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BigSleep", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_BigSleep',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BigSleep", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_BigSleep',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BigSleep", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_BigSleep',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Orchid_Pop_Sandman.Balance.PawnBalance_Orchid_BigSleep", 1],
            [AutoAddPawnItemPoolList, "GD_Orchid_Pop_Sandman.Balance.PawnBalance_Orchid_BigSleep", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BigSleep"]])
            
            
            
            
            
            #No Beard Unique Scaling
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_NoBeard"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_NoBeard", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_NoBeardStinkpot',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_NoBeard", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_NoBeardStinkpot',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_NoBeard", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_NoBeardStinkpot',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_NoBeard", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.EnemyDrops_MissionRewards.Pool_Weapons_NoBeardStinkpot',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Orchid_Pop_NoBeard.PawnBalance_Orchid_NoBeard", 1],
            [AutoAddPawnItemPoolList, "GD_Orchid_Pop_NoBeard.PawnBalance_Orchid_NoBeard", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_NoBeard"]])
            unrealsdk
            
            
            
            
            #DIGI ULTIMATE BADASS
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear", "_Digi"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            
            #DIGI SATURN
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Hive"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Hive", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_3_TheHive',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Invader"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Invader", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Hyperion_5_Invader',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_YellowPattern"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_YellowPattern", "(ItmPoolDefinition=KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.YellowPattern',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiSaturn"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Hive',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Hive',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Hive',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Hive',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Invader',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Invader',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Invader',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Invader',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_YellowPattern',PoolProbability=(BaseValueConstant=0.033333,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi",0],
            [AutoRemovePoolFromPawn, "GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi",1],
            [AutoAddPawnItemPoolList, "GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi","GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_LoaderUltimateBadass_Digi.Population.PawnBalance_LoaderUltimateBadass_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSaturn"]])
            
            
            #DIGI DUKINO/SKAGZILLA
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Mongol"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Mongol", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Legendary.RL_Vladof_5_Mongol',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_CyanNinja"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_CyanNinja", "(ItmPoolDefinition=KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.CyanNinja',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiSkagzilla"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Mongol',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Mongol',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Mongol',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Mongol',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_CyanNinja',PoolProbability=(BaseValueConstant=0.050000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi",0],
            [AutoRemovePoolFromPawn, "GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi",0],
            [AutoAddPawnItemPoolList, "GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi","GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_Skagzilla_Digi.Population.PawnBalance_Skagzilla_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiSkagzilla"]])
            
            
            
            
            
            #DIGI SCORCH/BLACK QUEEN/BONE HEAD/DOC MERCY/ASSASSINS
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.BadassEnemyGunsAndGear", "_Digi"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            
            #DIGI SCORCH
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_HellFire"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_HellFire", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Maliwan_5_HellFire',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiScorch"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiScorch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_HellFire',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiScorch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_HellFire',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiScorch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_HellFire',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiScorch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_HellFire',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_SpiderantScorch_Digi.Population.PawnBalance_SpiderantScorch_Digi",0],
            [AutoRemovePoolFromPawn, "GD_SpiderantScorch_Digi.Population.PawnBalance_SpiderantScorch_Digi",0],
            [AutoAddPawnItemPoolList, "GD_SpiderantScorch_Digi.Population.PawnBalance_SpiderantScorch_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_SpiderantScorch_Digi.Population.PawnBalance_SpiderantScorch_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiScorch"]])
            
            
            #DIGI BLACK QUEEN
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Nukem"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Nukem", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Legendary.RL_Torgue_5_Nukem',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiBlackQueen"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBlackQueen", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Nukem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBlackQueen", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Nukem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBlackQueen", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Nukem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBlackQueen", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Nukem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_SpiderantBlackQueen_Digi.Population.PawnBalance_SpiderantBlackQueen_Digi",0],
            [AutoRemovePoolFromPawn, "GD_SpiderantBlackQueen_Digi.Population.PawnBalance_SpiderantBlackQueen_Digi",0],
            [AutoAddPawnItemPoolList, "GD_SpiderantBlackQueen_Digi.Population.PawnBalance_SpiderantBlackQueen_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_SpiderantBlackQueen_Digi.Population.PawnBalance_SpiderantBlackQueen_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBlackQueen"]])
            
            
            #DIGI BONE HEAD
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_BoneShredder"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BoneShredder", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Bandit_3_BoneShredder',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiBoneHead"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBoneHead", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BoneShredder',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBoneHead", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BoneShredder',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBoneHead", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BoneShredder',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBoneHead", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_BoneShredder',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_BoneHead_v3.Population.PawnBalance_BoneHead_V3",0],
            [AutoRemovePoolFromPawn, "GD_BoneHead_v3.Population.PawnBalance_BoneHead_V3",1],
            [AutoAddPawnItemPoolList, "GD_BoneHead_v3.Population.PawnBalance_BoneHead_V3","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_BoneHead_v3.Population.PawnBalance_BoneHead_V3","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiBoneHead"]])
            
            
            #DIGI DOC MERCY
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Infinity"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Infinity", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiMrMercy"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiMrMercy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Infinity',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiMrMercy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Infinity',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiMrMercy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Infinity',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiMrMercy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Infinity',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_MrMercy_Digi.Balance.PawnBalance_MrMercy_Digi",0],
            [AutoRemovePoolFromPawn, "GD_MrMercy_Digi.Balance.PawnBalance_MrMercy_Digi",2],
            [AutoAddPawnItemPoolList, "GD_MrMercy_Digi.Balance.PawnBalance_MrMercy_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_MrMercy_Digi.Balance.PawnBalance_MrMercy_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiMrMercy"]])
            
            
            
            #DIGI ASSASSINS
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Emperor"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Emperor", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Black"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Black", "(ItmPoolDefinition=KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.Black',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiAssassins"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Emperor',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Emperor',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Emperor',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Emperor',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_Digi_4P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Black',PoolProbability=(BaseValueConstant=0.012500,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            
            #DIGI ASSASSIN WOT
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Commerce"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Commerce", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Hyperion_3_Commerce',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiWot"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiWot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Commerce',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiWot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Commerce',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiWot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Commerce',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiWot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Commerce',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi",0],
            [AutoRemovePoolFromPawn, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi",3],
            [AutoRemovePoolFromPawn, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi",2],
            [AutoAddPawnItemPoolList, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins"],
            [AutoAddPawnItemPoolList, "GD_Assassin1_Digi.Population.PawnBalance_Assassin1_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiWot"]])
            
            
            #DIGI ASSASSIN ONEY
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Judge"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Judge", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Jakobs_3_Judge',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiOney"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiOney", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Judge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiOney", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Judge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiOney", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Judge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiOney", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Judge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi",0],
            [AutoRemovePoolFromPawn, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi",4],
            [AutoRemovePoolFromPawn, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi",3],
            [AutoAddPawnItemPoolList, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins"],
            [AutoAddPawnItemPoolList, "GD_Assassin2_Digi.Population.PawnBalance_Assassin2_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiOney"]])
            
            
            #DIGI ASSASSIN REETH
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_FremingtonsEdge"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_FremingtonsEdge", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Hyperion_3_FremingtonsEdge',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiReeth"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiReeth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_FremingtonsEdge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiReeth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_FremingtonsEdge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiReeth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_FremingtonsEdge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiReeth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_FremingtonsEdge',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi",0],
            [AutoRemovePoolFromPawn, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi",2],
            [AutoRemovePoolFromPawn, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi",1],
            [AutoAddPawnItemPoolList, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins"],
            [AutoAddPawnItemPoolList, "GD_Assassin3_Digi.Population.PawnBalance_Assassin3_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiReeth"]])
            
            
            #DIGI ASSASSIN ROUF
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_Custom", "_Dog"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Dog", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Bandit_3_Dog',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DigiRouf"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiRouf", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Dog',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiRouf", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Dog',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiRouf", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Dog',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiRouf", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_Dog',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_Digi_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi",0],
            [AutoRemovePoolFromPawn, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi",3],
            [AutoRemovePoolFromPawn, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi",2],
            [AutoAddPawnItemPoolList, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi","GD_Itempools.ListDefs.BadassEnemyGunsAndGear_Digi"],
            [AutoAddPawnItemPoolList, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiAssassins"],
            [AutoAddPawnItemPoolList, "GD_Assassin4_Digi.Population.PawnBalance_Assassin4_Digi","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DigiRouf"]])
            
            
            
            
            
            #BINARYBOSS/OMGWTH
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_OMGWTH"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_OMGWTH", "(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Gamestage_80',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_OMGWTH", "(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Gamestage_80',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_OMGWTH", "(ItemPool=CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Gamestage_80',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_4P',BaseValueScaleConstant=1.000000))"])

            AddUpdatingEntry([[AutoAddBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_42", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_OMGWTH"]])
            
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear", "_Digi"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi","(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.WeightingPlayerCount.GearDrops_PerPlayer',BaseValueScaleConstant=3.000000))"])
            
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_43", 0],
            [AutoAddBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_43", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi"]])
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_44", 0],
            [AutoAddBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_44", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi"]])
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_46", 0],
            [AutoAddBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi"]])
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_47", 0],
            [AutoAddBehaviorItemPoolList, "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Digi"]])
            
            
            
            
            
            #IRON GOD/ROCK GOD/GOLEM GOD
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Hezel"])
            
            CreateNewObject(["ItemPoolDefinition","GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone", "_Golem"])
            AutoRemoveItemFromPool(["GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem", 0])
            AutoAddItemToPool(["GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem", "(ItmPoolDefinition=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_Pistols_04_Gemstone',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_2_Uncommon',BaseValueScaleConstant=1.600000),bDropOnDeath=True)"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel","(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.WeaponPools.Pool_Weapons_04_Gemstone_Golem',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_45", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_45", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemRock.Character.AIDef_GolemRock:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_145", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_145", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_144", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_144", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_144", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_144", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            AddUpdatingEntry([[AutoAddChangeInventoryItemPoolList, "GD_GolemBadass.Character.AIDef_GolemBadass:AIBehaviorProviderDefinition_0.Behavior_AIChangeInventory_146", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Hezel"]])
            
            
            
            
            
            #PISTON/TRUCKASAURUS
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Piston"])
            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston","(ItemPool=ItemPoolDefinition'GD_Iris_ItemPools.EnemyDropPools.Pool_Weapons_Piston',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniqueRares',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston","(ItemPool=ItemPoolDefinition'GD_Iris_ItemPools.EnemyDropPools.Pool_Weapons_Piston',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston","(ItemPool=ItemPoolDefinition'GD_Iris_ItemPools.EnemyDropPools.Pool_Weapons_Piston',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston","(ItemPool=ItemPoolDefinition'GD_Iris_ItemPools.EnemyDropPools.Pool_Weapons_Piston',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Iris_Population_PistonBoss.Balance.Iris_PawnBalance_PistonBoss", 2],
            [AutoAddPawnItemPoolList, "GD_Iris_Population_PistonBoss.Balance.Iris_PawnBalance_PistonBoss", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston"]])
            
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Iris_Population_TAS.Balance.Iris_PawnBalance_Truckasaurus_Runable", 0],
            [AutoAddPawnItemPoolList, "GD_Iris_Population_TAS.Balance.Iris_PawnBalance_Truckasaurus_Runable", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Piston"]])
            
            
            
            
            
            #TORGUE VAULT IN BADASS CRATER ARENA TORGUE TORGUEEEEEEEE
            
            #FOUR TIMES, DEFAULT WEAPONSALL
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Torguesplosion75"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion75", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion75", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion75", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion75", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #TWELVE TIMES, DEFAULT MONEY_1_BIG
            #CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Torguesplosion76"])
            #AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion76", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #FIVE TIMES, DEFAULT WEAPONSALL
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Torguesplosion77"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #THREE TIMES, DEFAULT RAIDBOSSENEMYGUNSANDGEAR
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear", "_Torguesplosion78"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Torguesplosion78", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Torguesplosion78", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Torguesplosion78", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #FOUR TIMES, DEFAULT WEAPONSALL
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Torguesplosion79"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion79", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniques',InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion79", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_05_VeryRare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion79", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion79", "(ItemPool=ItemPoolDefinition'GD_Itempools.EnemyDropPools.Pool_GunsAndGear_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_75", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_75", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion75"]])
            
            #AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_76", 0],
            #[AutoAddBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_76", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion76"]])
            
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_77", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_77", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion77"]])
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_78", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_78", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Torguesplosion78"]])    
            
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_79", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_79", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Torguesplosion79"]])
            
            
            #AutoAddPoolToList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_76", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_02_Uncommon',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"]])
            #AutoAddPoolToList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_77", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_04_Rare',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"]])
            #AutoAddPoolToList, "GD_Iris_Lootsploder.Character.AIDef_Iris_Lootsploder:AIBehaviorProviderDefinition_0.Behavior_SpawnItems_79", "(ItmPoolDefinition=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_Shotguns_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"]])
            
            
            
            
            
            #TERRAMORPHOUS THE INVINCIBLE
            
            #Terra's Coms and Cosmetics
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous", "_Cosmetics"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics", 4])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics", 2])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics", 1])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics", 0])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_TerraComsAndCosmetics"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_2P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_3P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_4P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Should Retain Original Rate of 2/7 x 0.1 x 2
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.028571,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Cosmetics',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.028571,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            
            #Terra's Uniques
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous", "_"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 6])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 5])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 4])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 2])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 1])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Terramorphous_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous_", "Teeth"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Terramorphous_Teeth", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Bandit_3_Teeth',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous_", "Hide"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Terramorphous_Hide", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Roid_ThresherRaid',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous_", "Breath"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Terramorphous_Breath", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_FlameSpurt',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous_", "Blood"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Terramorphous_Blood", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Terramorphous',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Terramorphous_", "Randolph"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Terramorphous_Randolph", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Dahl_5_Pitchfork',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_TerraUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Teeth',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Hide',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Breath',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Blood',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Terramorphous_Randolph',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Terra"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            
            
            #FOUR TIMES, ONCE AT TORSO, THRICE AT HEAD
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45", 0],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_45", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra"]])
            
            #ONE TIME, AT HEAD
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", 0],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_46", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"]])
            
            #ONE TIME, AT HEAD
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", 0],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Terra"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"],
            [AutoAddBehaviorItemPoolList, "GD_ThresherShared.Anims.Anim_Raid_Death1:BehaviorProviderDefinition_29.Behavior_SpawnItems_47", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"]])
            
            #ONE TIME, AT GROUND
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Population_Thresher.Balance.Unique.PawnBalance_ThresherRaid", 0],
            [AutoAddPawnItemPoolList, "GD_Population_Thresher.Balance.Unique.PawnBalance_ThresherRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraUniques"],
            [AutoAddPawnItemPoolList, "GD_Population_Thresher.Balance.Unique.PawnBalance_ThresherRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_TerraComsAndCosmetics"]])
            
            
            
            
            
            #HYPERIUS
            
            #THIS BREAKS VENDORS
            #unrealsdk.FindObject("CrossDLCItemPoolDefinition","GD_Gladiolus_Itempools.Raid.Pool_Orchid_Raid1_PinkWeapons_Revised").BalancedItemsMirror = ()
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary", "_"])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 5])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 4])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 3])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 2])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 1])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "Hornet"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Hornet", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Dahl_5_Hornet',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "Sherdifier"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Sherdifier", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Legendary.AR_Vladof_5_Sherdifier',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "Nordfleet"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Nordfleet", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_Alien_Norfleet',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "Fuck"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Fuck", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Booster_05_Legendary',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "KissOfDeath"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_KissOfDeath", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_KissOfDeath',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "SledgesShotgun"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_SledgesShotgun", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Legendary.SG_Bandit_5_SledgesShotgun',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_", "Pyrophobia"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Pyrophobia", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Legendary.RL_Maliwan_5_Pyrophobia',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons", "_"])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 6])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 5])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 4])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 3])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 2])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 1])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", "Devastator"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Devastator", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.Pistol.Devastator.Orchid_Seraph_Devastator_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", "Actualizer"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Actualizer", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.SMG.Actualizer.Orchid_Seraph_Actualizer_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", "Tattler"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Tattler", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.SMG.Tattler.Orchid_Seraph_Tattler_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", "Spitter"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Spitter", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.Shotgun.Spitter.Orchid_Seraph_Spitter_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_", "Evolution"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Evolution", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Orchid_RaidWeapons.Shield.Anshin.Orchid_Seraph_Anshin_Shield_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_HyperiusUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Hornet',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Sherdifier',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Fuck',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_KissOfDeath',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_SledgesShotgun',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_HyperiusUniques_Rare"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Pyrophobia',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_Legendary_Nordfleet',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Devastator',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Actualizer',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_HyperiusSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Tattler',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Spitter',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid1_PinkWeapons_Evolution',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            #Can use this for Master Gee, too
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom", "_Orchid"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.SeraphCrystal.Pool_Orchid_SeraphCrystals',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_SeraphCrystal',BaseValueScaleConstant=1.000000))"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom", "_Orchid_20"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid_20", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.SeraphCrystal.Pool_SeraphCrystal_10_Drop',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_SeraphCrystal',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid_20", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.SeraphCrystal.Pool_SeraphCrystal_10_Drop',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            
            
            
            #Used For Both Pools
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_HyperiusMisc"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            #REGULAR POOL, DROPS A LOT
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", 0],
            [AutoRemovePoolFromBehavior, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", 0],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_203", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid"]])
            
            #RARE POOL, DROPS RARELY, REPLACES 203 WHEN IT DOES DROP
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", 0],
            [AutoRemovePoolFromBehavior, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", 0],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_HyperiusMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Orchid_RaidEngineer.Death.BodyDeath_Orchid_RaidEngineer:BehaviorProviderDefinition_6.Behavior_SpawnItems_204", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid_20"]])
            
            
            
            
            
            
            
            
            #MASTER GEE
            
            #THIS BREAKS VENDORS
            #unrealsdk.FindObject("CrossDLCItemPoolDefinition","GD_Gladiolus_Itempools.Raid.Pool_Orchid_Raid3_PinkWeapons_Revised").BalancedItemsMirror = ()
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary", "_"])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 5])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 4])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 3])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 2])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 1])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "Bee"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Bee", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Impact_05_Legendary',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "StormFront"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_StormFront", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_StormFront',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "Zidane"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Zidane", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Impact_05_Legendary',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "Randolph"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Randolph", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Dahl_5_Pitchfork',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "Bitch"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Bitch", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Hyperion_5_Bitch',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_", "Gunerang"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Gunerang", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Tediore_5_Gunerang',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons", "_"])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", 3])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", 2])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", 1])
            AutoRemoveItemFromPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", "Seraphim"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Seraphim", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.AssaultRifle.Seraphim.Orchid_Seraph_Seraphim_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", "Evolution"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Evolution", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Orchid_RaidWeapons.Shield.Anshin.Orchid_Seraph_Anshin_Shield_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", "Patriot"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Patriot", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.sniper.Patriot.Orchid_Seraph_Patriot_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", "Ahab"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Ahab", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.RPG.Ahab.Orchid_Seraph_Ahab_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_", "Devastator"])
            AutoAddItemToPool(["GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Devastator", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_RaidWeapons.Pistol.Devastator.Orchid_Seraph_Devastator_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_MasterGeeUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Bee',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_StormFront',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Zidane',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Randolph',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Bitch',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_Legendary_Gunerang',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_MasterGeeUniques_Rare"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Seraphim',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Evolution',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_MasterGeeSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Patriot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Ahab',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs", "(ItemPool=ItemPoolDefinition'GD_Orchid_ItemPools.Raid.Pool_Orchid_Raid3_PinkWeapons_Devastator',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_MasterGeeMisc"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", 0],
            [AutoRemovePoolFromBehavior, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", 0],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Orchid"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeUniques_Rare"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeSeraphs"],
            [AutoAddBehaviorItemPoolList, "Transient.Behavior_SpawnItems_Orchid_MasterGeeDeath", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_MasterGeeMisc"]])
            
            
            
            
            #PYRO PETE
            
            #THIS BREAKS VENDORS
            #unrealsdk.FindObject("CrossDLCItemPoolDefinition","GD_Gladiolus_Itempools.Raid.Pool_Iris_Raid1_PinkWeapons_Revised").BalancedItemsMirror = ()
            
            #Seraph Crystal Pool Adjustments
            '''CreateNewObject(["ItemPoolDefinition","GD_Iris_ItemPools.SeraphCrystal.Pool_SeraphCrystal_7","_Empty"])
            AutoRemoveItemFromPool(["GD_Iris_ItemPools.SeraphCrystal.Pool_SeraphCrystal_7_Empty", 0])
            AutoAddItemToPool(["GD_Iris_ItemPools.SeraphCrystal.Pool_Iris_SeraphCrystals", "(ItmPoolDefinition=ItemPoolDefinition'GD_Iris_ItemPools.SeraphCrystal.Pool_SeraphCrystal_7_Empty',InvBalanceDefinition=None,Probability=(BaseValueConstant=1000.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            '''
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "ONegative"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_ONegative", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Iris_SeraphItems.ONegative.Iris_Seraph_GrenadeMod_ONegative_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "Hoplite"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Hoplite", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Iris_SeraphItems.Hoplite.Iris_Seraph_Shield_Juggernaut_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "BigBoomBlaster"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_BigBoomBlaster", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Iris_SeraphItems.BigBoomBlaster.Iris_Seraph_Shield_Booster_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_ONegative',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Hoplite',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_BigBoomBlaster',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteLegendaries"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries", "(ItemPool=ItemPoolDefinition'GD_Itempools.GrenadeModPools.Pool_GrenadeMods_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries", "(ItemPool=ItemPoolDefinition'GD_Itempools.ShieldPools.Pool_Shields_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteMoney"])
            #1A
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #1B
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #SuperBadassEnemyGunsAndGear
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom"])
            #UltimateBadassEnemyGunsAndGear
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney", "GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteTokens"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteTokens", "(ItemPool=ItemPoolDefinition'GD_Iris_ItemPools.TorgueToken.ItemPool_TorgueToken_Qty15',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_SeraphCrystal',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteMisc1"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_PeteMisc2"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            
            #USE THIS
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteTokens"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_5","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc1"]])
            #USE THIS
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7", 0],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteLegendaries"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_7","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PeteMisc2"]])
            #UNUSED
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_6", 0]])
            #DOESN'T WORK WITH BLOODSPLOSION
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_8", 0]])
            #DOESN'T WORK WITH BLOODSPLOSION
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Iris_Raid_PyroPete.Death.BodyDeath_Iris_Raid_PyroPete:BehaviorProviderDefinition_6.Behavior_SpawnItems_9", 0]])
            
            
            
            
            
            #VORACIDOUS
            
            #Vorac Coms
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_VoracidousLegendaryComs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_2P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_3P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_4P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Dexi/OOO Coms
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_SageLegendaryComs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous_Voracidous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous_Voracidous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous_Voracidous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_SlayerOfTerramorphous_Voracidous',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            #Fuck Tubbies
            #6 of em cuz i normally do 2 per item and there's 3 variants of tubby coms per class
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_VoracidousTubbyComs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs", "(ItemPool=ItemPoolDefinition'GD_Lobelia_Itempools.ClassModPools.Pool_ClassMod_Lobelia_All',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons", "_"])
            AutoRemoveItemFromPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", 3])
            AutoRemoveItemFromPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", 2])
            AutoRemoveItemFromPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", 1])
            AutoRemoveItemFromPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", "HawkEye"])
            AutoAddItemToPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_HawkEye", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Sage_RaidWeapons.sniper.Sage_Seraph_HawkEye_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", "Infection"])
            AutoAddItemToPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Infection", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Sage_RaidWeapons.Pistol.Sage_Seraph_Infection_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", "Interfacer"])
            AutoAddItemToPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Interfacer", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Sage_RaidWeapons.Shotgun.Sage_Seraph_Interfacer_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_", "LeadStorm"])
            AutoAddItemToPool(["GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_LeadStorm", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Sage_RaidWeapons.AssaultRifle.Sage_Seraph_LeadStorm_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_VoracidousSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Infection',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_LeadStorm',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_HawkEye',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Interfacer',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Seraphs_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_SageSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Infection',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_LeadStorm',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_HawkEye',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Raid.Pool_Sage_Raid_PinkWeapons_Interfacer',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques_Rare',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            #Stolen From Hyperius And Crew
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom", "_Sage"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.SeraphCrystal.Pool_Sage_SeraphCrystals',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_SeraphCrystal',BaseValueScaleConstant=1.000000))"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom", "_Sage_20"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage_20", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.SeraphCrystal.Pool_SeraphCrystal_10_Drop',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_SeraphCrystal',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage_20", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.SeraphCrystal.Pool_SeraphCrystal_10_Drop',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition==AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_SageMisc1"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_SageMisc2"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            
            #NORMAL DROP
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", 0],
            [AutoRemovePoolFromBehavior, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", 0],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_0", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage"]])
            #DA 20 DROP
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", 0],
            [AutoRemovePoolFromBehavior, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", 0],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_1", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage_20"]])
            #UNUSED IS ACTUALLY USED IN NORMAL MOD FUUUUUUUUUUCK
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", 0],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousLegendaryComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousTubbyComs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VoracidousSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc1"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2"],
            [AutoAddBehaviorItemPoolList, "GD_Sage_Raid_Beast.Character.DeathDef_Sage_Raid_Beast:BehaviorProviderDefinition_0.Behavior_SpawnItems_2", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom_Sage"]])
            
            
            
            
            
            #DEXI
            
            #Spare Chopper Ma'am?
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_SpareChopperMaam"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SpareChopperMaam", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Runnables.Pool_Sage_DrifterRaid',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=AttributeDefinition'GD_Itempools.DropWeights.DropODDS_BossUniqueRares',InitializationDefinition=None,BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SpareChopperMaam", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Runnables.Pool_Sage_DrifterRaid',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SpareChopperMaam", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Runnables.Pool_Sage_DrifterRaid',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SpareChopperMaam", "(ItemPool=ItemPoolDefinition'GD_Sage_ItemPools.Runnables.Pool_Sage_DrifterRaid',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            
            #ONE TIME
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Sage_Pop_Drifter.Balance.PawnBalance_DrifterRaid", 0],
            [AutoAddPawnItemPoolList, "GD_Sage_Pop_Drifter.Balance.PawnBalance_DrifterRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SpareChopperMaam"]])
            
            #THREE TIMES
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38", 0],
            [AutoAddBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs"],
            [AutoAddBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38","GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2"],
            [AutoAddBehaviorItemPoolList, "GD_DrifterRaid.Anims.Anim_Raid_Death:BehaviorProviderDefinition_29.Behavior_SpawnItems_38","GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"]])
            
            
            
            
            
            #TRIPLE O/OMND OMND OHK/OOO
            
            AddUpdatingEntry([[AutoRemoveChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", 0],
            [AutoAddChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageLegendaryComs"],
            [AutoAddChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs"],
            [AutoAddChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageSeraphs"],
            [AutoAddChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_SageMisc2"],
            [AutoAddChangeInventoryItemPoolList, "GD_Native_Badass.Anims.Anim_Badass_Warcry:BehaviorProviderDefinition_0.Behavior_AIChangeInventory_38", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"]])
            
            
            
            
            
            #VERMIVOROUS
            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Verm", "_Cosmetics"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_Cosmetics", 4])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_Cosmetics", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_Cosmetics", 0])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_VermiCosmetics"])
            #Should Retain Original Rate of 2/5 x 0.1
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiCosmetics", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Verm_Cosmetics',InvBalanceDefinition=None,Probability=(BaseValueConstant=0.040000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Verm", "_"])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_", 4])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_", 3])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_", 2])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_", 1])
            AutoRemoveItemFromPool(["GD_Itempools.Runnables.Pool_Verm_", 0])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Verm_", "Nasty"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Verm_Nasty", "(ItemPool=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_NastySurprise',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.Runnables.Pool_Verm_", "Nordfleet"])
            AutoAddItemToPool(["GD_Itempools.Runnables.Pool_Verm_Nordfleet", "(ItemPool=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_Alien_Norfleet',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_VermiUniques"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Verm_Nasty',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques", "(ItemPool=ItemPoolDefinition'GD_Itempools.Runnables.Pool_Verm_Nordfleet',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_Vermi"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            
            
            AddUpdatingEntry([[AutoRemovePoolFromPawn, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", 0],
            [AutoRemovePawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", 0],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiCosmetics"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_VermiUniques"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Vermi"],
            [AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.PawnBalance_BugMorphRaid", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"]])
            
            
            
            
            
            #DRAGONS #FlareV2
            
            #Also explodes a bunch of eridium and cash at the end, cant find it
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "Omen"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Omen", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_RaidWeapons.Shotguns.Aster_Seraph_Omen_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "Blockade"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Blockade", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Aster_ItemGrades.Shields.Aster_Seraph_Blockade_Shield_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_", "Stinger"])
            AutoAddItemToPool(["GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Stinger", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_RaidWeapons.Pistols.Aster_Seraph_Stinger_Balance',Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonSeraphs"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Omen',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Blockade',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary_Stinger',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonLegendariesA"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA", "(ItemPool=ItemPoolDefinition'GD_Itempools.WeaponPools.Pool_Weapons_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA", "(ItemPool=ItemPoolDefinition'GD_Itempools.GrenadeModPools.Pool_GrenadeMods_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonLegendariesB"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB", "(ItemPool=ItemPoolDefinition'GD_Itempools.ClassModPools.Pool_ClassMod_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB", "(ItemPool=ItemPoolDefinition'GD_Itempools.ShieldPools.Pool_Shields_All_06_Legendary',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.500000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonCrystals"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonCrystals", "(ItemPool=ItemPoolDefinition'GD_Aster_ItemPools.Raid.Pool_Aster_SeraphCrystals',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonFountain"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFountain", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_Custom_RaidLoot',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_BossUniques',BaseValueScaleConstant=1.75000)bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick", "_And_Money"])
            AutoAddItemToPool(["GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick_And_Money", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Currency.ItemGrade_Currency_Money_Big',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonFountainMoney"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFountainMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Eridium_Stick_And_Money',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonFireworkMoney"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',InvBalanceDefinition=None,Probability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=None,BaseValueScaleConstant=1.00000),bDropOnDeath=True)"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_DragonsMisc"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            
            
            
            #One Hundred Times
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_702", 1],
            [AutoRemovePoolFromBehavior, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_702", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_702", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFountainMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_702", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFountain"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_703", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_703", "GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_703", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonCrystals"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_703", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_704", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_704", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_704", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_704", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_704", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_705", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_705", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_705", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_705", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_705", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB"]])
            
            #Once
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_706", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_706", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_706", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_706", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_706", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_707", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_707", "GD_Itempools.ListDefs.UltimateBadassEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_707", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonCrystals"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_707", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_708", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_708", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_708", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_708", "GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_708", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_709", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_709", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_709", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_709", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_709", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesB"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_710", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_710", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_710", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_710", "GD_Itempools.ListDefs.SuperBadassEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_710", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonSeraphs"]])
            
            #Once
            AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_711", 0],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_711", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonFireworkMoney"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_711", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonsMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_711", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA"],
            [AutoAddBehaviorItemPoolList, "GD_Aster_RaidBossData.IOs.IO_LootSpewer:BehaviorProviderDefinition_0.Behavior_SpawnItems_711", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_DragonLegendariesA"]])
            
            
            
            
            
            #CRAB
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_CrawDosh"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawDosh", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1',PoolProbability=(BaseValueConstant=1.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawDosh", "(ItemPool=ItemPoolDefinition'GD_Itempools.AmmoAndResourcePools.Pool_Money_1_BIG',PoolProbability=(BaseValueConstant=0.250000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_Raid_Money',BaseValueScaleConstant=1.000000))"])
            
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom", "_CrawMisc"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaid"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_PurpleRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_BlueRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            AutoAddListToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_GreenRaidBossUniques"])
            
            #Da Crab
            #AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Crawmerax_Son.Population.PawnBalance_Crawmerax_Son", 0]])
            AddUpdatingEntry([[AutoRemovePawnItemPoolList, "GD_Crawmerax_Son.Population.PawnBalance_Crawmerax_Son_Raid", 0],
            [AutoAddPawnItemPoolList, "GD_Crawmerax_Son.Population.PawnBalance_Crawmerax_Son_Raid", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"]])
            
            
            #Supplies During The Fight
            #AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_16", 10]])
            
            #Don't Fuck With It
            #AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_502", 0],
            #[AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_502", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test2"]])
            
            #Raid More Rarely So Not Every Time
            AddUpdatingEntry([[AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6", "GD_Itempools.ListDefs.RaidBossEnemyGunsAndGear_Custom"],
            [AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_6", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc"]])
            
            #Raid Every Time
            AddUpdatingEntry([[AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", 3],
            [AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", 2],
            [AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", 1],
            [AutoRemovePoolFromBehavior, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", 0],
            [AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawDosh"],
            [AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc"],
            [AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_7", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_CrawMisc"]])
            
            #Raid Never?
            #AddUpdatingEntry([[AutoRemoveBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_8", 0],
            #[AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_8", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Test3"]])
            #[AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_8", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Craw"],
            #[AutoAddBehaviorItemPoolList, "GD_Nasturtium_Lootables.IOs.IO_BossLootSpout:BehaviorProviderDefinition_0.Behavior_SpawnItems_8", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_Custom_Craw"]])
            
            
            #gotta scale with funky commands
            #CrossDLCItemPoolDefinition'GD_Lobelia_Itempools.WeaponPools.Pool_Lobelia_Pearlescent_Weapons_All'
            #AttributeInitializationDefinition'GD_Lobelia_Itempools.Weighting.Weight_Lobelia_Pearlescent_Tubbies'
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
        
        def ScuffedUCPLoot():
            #Empty UCP ItemPool Creator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear", "_UCP"])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP", 3])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP", 2])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP", 1])
            AutoRemoveItemFromPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP", 0])
            #Empty UCP ItemPoolList Creator
            CreateNewObject(["ItemPoolListDefinition","GD_Itempools.ListDefs.StandardEnemyGunsAndGear","_UCP"])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",7])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",6])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",5])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",4])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",3])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",2])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",1])
            AutoRemovePoolFromList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP",0])
            
            
            
            #Base Game
            #Shirtless Man/Afterburner
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Afterburner"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Afterburner"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Afterburner", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Afterburner',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Afterburner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Afterburner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Afterburner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Afterburner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Afterburner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Afterburner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Afterburner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Afterburner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Marauder.Balance.Unique.PawnBalance_ShirtlessMan", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Afterburner"]])
            
            #MadDog/Bane
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Bane"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Bane"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bane", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Hyperion_3_Bane',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bane", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bane',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bane", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bane',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bane", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bane',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bane", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bane',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Psycho.Balance.Unique.PawnBalance_MadDog", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bane"]])
            
            #Sinkhole/Bitch
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Bitch"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Bitch"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bitch", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Hyperion_5_Bitch',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bitch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bitch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bitch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bitch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Stalker.Balance.Unique.PawnBalance_Stalker_SwallowedWhole", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch"]])
            
            #Wilhelm/BouncingBonny
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_BouncingBonny"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_BouncingBonny"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BouncingBonny", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_BouncingBonny',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BouncingBonny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BouncingBonny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BouncingBonny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BouncingBonny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BouncingBonny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BouncingBonny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BouncingBonny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BouncingBonny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Loader.Balance.Unique.PawnBalance_Willhelm", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BouncingBonny"]])
            
            #Dukino'sBitchAssMom/Buffalo
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Buffalo"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Buffalo"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Buffalo", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Jakobs_3_Buffalo',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Buffalo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Buffalo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Buffalo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Buffalo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Buffalo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Buffalo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Buffalo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Buffalo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Skag.Balance.Unique.PawnBalance_Skagzilla", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Buffalo"]])
            
            #BadMaw/Deliverance
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Deliverance"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Deliverance"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deliverance", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Legendary.SG_Tediore_5_Deliverance',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deliverance", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deliverance',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deliverance", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deliverance',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deliverance", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deliverance',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deliverance", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deliverance',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Nomad.Balance.PawnBalance_BadMaw", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deliverance"]])
            
            #DeputyWinger/Deputy'sBadge/Order
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Deputy"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Deputy"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deputy", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Deputy',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deputy',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deputy',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deputy',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Deputy',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Sheriff.Balance.PawnBalance_Deputy", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Order"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Order"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Order", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Roid_Order',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Order',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Order',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Order',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Order',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Sheriff.Balance.PawnBalance_Deputy", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order"]])
            
            #Mortar/EvilSmasher
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_EvilSmasher"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_EvilSmasher"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_EvilSmasher", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Torgue_3_EvilSmasher',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_EvilSmasher',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_EvilSmasher',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_EvilSmasher',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_EvilSmasher',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Rat.Balance.Unique.PawnBalance_Mortar", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher"]])
            
            #IncineratorClayton/FlameOfTheFirehawk
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_FOTFH"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_FOTFH"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FOTFH", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Nova_Phoenix',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FOTFH',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FOTFH',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FOTFH',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FOTFH',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Psycho.Balance.Unique.PawnBalance_IncineratorVanya_Combat", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH"]])
            
            #Blue/HeartBreaker
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_HeartBreaker"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_HeartBreaker"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HeartBreaker", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Hyperion_3_HeartBreaker',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HeartBreaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HeartBreaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HeartBreaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HeartBreaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HeartBreaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HeartBreaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HeartBreaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HeartBreaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Crystalisk.Balance.Unique.PawnBalance_Blue", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HeartBreaker"]])
            
            #Henry/LoveThumper/DeadlyBloom
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_LoveThumper"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_LoveThumper"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LoveThumper", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Roid_04_LoveThumper',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LoveThumper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LoveThumper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LoveThumper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LoveThumper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LoveThumper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LoveThumper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LoveThumper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LoveThumper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LoveThumper"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_DeadlyBloom"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_DeadlyBloom"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_DeadlyBloom", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Nova_Explosive_DeadlyBloom',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_DeadlyBloom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_DeadlyBloom',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_DeadlyBloom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_DeadlyBloom',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_DeadlyBloom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_DeadlyBloom',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_DeadlyBloom", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_DeadlyBloom',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Stalker.Balance.Unique.PawnBalance_Henry", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_DeadlyBloom"]])
            
            #MadMike/Madhous!
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Madhous"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Madhous"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Madhous", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Legendary.AR_Bandit_5_Madhouse',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Madhous", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Madhous',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Madhous", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Madhous',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Madhous", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Madhous',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Madhous", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Madhous',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Nomad.Balance.Unique.PawnBalance_MadMike", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Madhous"]])
            
            #Gettle's a cuck
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Endowment"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Endowment"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Endowment", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Endowment',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Endowment", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Endowment',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Endowment", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Endowment',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Endowment", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Endowment',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Endowment", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Endowment',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Marauder.Balance.Unique.PawnBalance_Mobley", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Endowment"]])
            
            #OldSlappy/Octo
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Octo"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Octo"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Octo", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Tediore_3_Octo',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Octo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Octo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Octo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Octo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Octo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Octo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Octo", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Octo',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Thresher.Balance.Unique.PawnBalance_Slappy", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Octo"]])
            
            #ProspectorZeke/FusterCluck/Pitchfork
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_FusterCluck"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_FusterCluck"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FusterCluck", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_FusterCluck',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FusterCluck", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FusterCluck',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FusterCluck", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FusterCluck',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FusterCluck", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FusterCluck',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FusterCluck", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_FusterCluck',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Nomad.Balance.Unique.PawnBalance_Prospector", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FusterCluck"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Pitchfork"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Pitchfork"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pitchfork", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Dahl_5_Pitchfork',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pitchfork", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pitchfork',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pitchfork", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pitchfork',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pitchfork", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pitchfork',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pitchfork", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pitchfork',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Nomad.Balance.Unique.PawnBalance_Prospector", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pitchfork"]])
            
            #DonkeyMong/PotOGold
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_PotOGold"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_PotOGold"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_PotOGold", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Booster_PotOGold',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_PotOGold", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_PotOGold',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_PotOGold", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_PotOGold',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_PotOGold", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_PotOGold',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_PotOGold", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_PotOGold',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_PrimalBeast.Balance.Unique.PawnBalance_PrimalBeast_DonkeyMong", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_PotOGold"]])
            
            #SmashHead/Roaster
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Roaster"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Roaster"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Roaster", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Unique.RL_Bandit_3_Roaster',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Roaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Roaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Roaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Roaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Roaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Roaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Roaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Roaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Goliath.Balance.Unique.PawnBalance_SmashHead", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Roaster"]])
            
            #Flinter/Roksalt
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_RokSalt"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_RokSalt"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_RokSalt", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Bandit_3_RokSalt',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_RokSalt", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_RokSalt',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_RokSalt", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_RokSalt',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_RokSalt", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_RokSalt',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_RokSalt", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_RokSalt',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Rat.Balance.Unique.PawnBalance_RatEasterEgg", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_RokSalt"]])
            
            #BoneHead/Shredifier
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Shredifier"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Shredifier"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shredifier", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Legendary.AR_Vladof_5_Sherdifier',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shredifier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shredifier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shredifier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shredifier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shredifier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shredifier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shredifier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shredifier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Loader.Balance.Unique.PawnBalance_BoneHead2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shredifier"]])
            
            #Bewm/Skyrocket
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Skyrocket"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Skyrocket"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Skyrocket", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_SkyRocket',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Skyrocket", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Skyrocket',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Skyrocket", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Skyrocket',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Skyrocket", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Skyrocket',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Skyrocket", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Skyrocket',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Marauder.Balance.PawnBalance_BoomBoom", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Skyrocket"]])
            
            #MadameVonBartlesBy/Teapot
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Teapot"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Teapot"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Teapot", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Dahl_3_Teapot',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Teapot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Teapot',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Teapot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Teapot',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Teapot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Teapot',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Teapot", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Teapot',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_BugMorph.Balance.Unique.PawnBalance_SirReginald", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Teapot"]])
            
            #Saturn/LadyFist/TidalWave
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_LadyFist"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_LadyFist"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LadyFist", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Hyperion_3_LadyFist',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LadyFist", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LadyFist',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LadyFist", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LadyFist',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LadyFist", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LadyFist',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LadyFist", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LadyFist',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LadyFist"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_TidalWave"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_TidalWave"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_TidalWave", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Jakobs_3_TidalWave',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_TidalWave", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_TidalWave',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_TidalWave", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_TidalWave',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_TidalWave", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_TidalWave',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_TidalWave", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_TidalWave',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Loader.Balance.Unique.PawnBalance_LoaderGiant", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_TidalWave"]])
            
            #SonOfMothrakk/Trespasser
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Trespasser"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Trespasser"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Trespasser", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Jakobs_3_Tresspasser',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Trespasser", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Trespasser',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Trespasser", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Trespasser',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Trespasser", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Trespasser',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Trespasser", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Trespasser',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Rakk.Balance.Unique.PawnBalance_SonMothrakk", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Trespasser"]])
            
            #Geary/Volcano
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Volcano"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Volcano"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Volcano", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Maliwan_5_Volcano',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Volcano", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Volcano',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Volcano", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Volcano',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Volcano", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Volcano',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Volcano", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Volcano',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EasterEggs.Balance.Unique.PawnBalance_Smagal", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Volcano"]])
            
            #Muscles/Sledge's Shotgun
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_SledgesShotgun"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_SledgesShotgun"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SledgesShotgun", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Legendary.SG_Bandit_5_SledgesShotgun',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SledgesShotgun',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SledgesShotgun',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SledgesShotgun',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SledgesShotgun',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Population_Bruiser.Balance.PawnBalance_Bruiser_Muscles", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun"]])
            
            
            
            #Scarlett DLC
            #Perv-E/BadTough
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_BadTouch"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_BadTouch"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BadTouch", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Maliwan_3_BadTouch',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BadTouch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BadTouch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BadTouch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BadTouch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BadTouch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BadTouch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BadTouch", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BadTouch',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_Pervbot.PawnBalance_Orchid_Pervbot", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BadTouch"]])
            
            #H3RL-E/ManlyManShield
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_ManlyMan"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_ManlyMan"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ManlyMan", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Orchid_Shields.A_Item_Custom.S_BladeShield',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ManlyMan", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ManlyMan',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ManlyMan", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ManlyMan',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ManlyMan", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ManlyMan',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ManlyMan", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ManlyMan',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_LoaderBoss.Balance.PawnBalance_Orchid_LoaderBoss", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ManlyMan"]])
            
            #LieutenantWhite/MidnightStar
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_MidnightStar"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_MidnightStar"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_MidnightStar", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Orchid_GrenadeMods.A_Item_Custom.GM_Blade',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_MidnightStar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_MidnightStar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_MidnightStar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_MidnightStar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_MidnightStar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_MidnightStar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_MidnightStar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_MidnightStar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_ScarlettCrew.Balance.PawnBalance_Orchid_PirateHenchman", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_MidnightStar"]])
            
            #lieutenantHoffman/OttoIdol
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_OttoIdol"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_OttoIdol"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OttoIdol", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Orchid_Artifacts.A_Item_Unique.A_Blade',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OttoIdol", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OttoIdol',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OttoIdol", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OttoIdol',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OttoIdol", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OttoIdol',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OttoIdol", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OttoIdol',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_ScarlettCrew.Balance.PawnBalance_Orchid_PirateHenchman2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OttoIdol"]])
            
            #Roscoe/Hive
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Hive"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Hive"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hive", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Unique.RL_Maliwan_3_TheHive',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hive", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hive',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hive", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hive',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hive", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hive',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hive", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hive',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_RakkHive.Character.PawnBalance_Orchid_RakkHive", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hive"]])
            
            #DeckHand/JollyRoger
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_JollyRoger"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_JollyRoger"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_JollyRoger", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_BossWeapons.Shotgun.SG_Bandit_3_JollyRoger',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_JollyRoger", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_JollyRoger',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_JollyRoger", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_JollyRoger',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_JollyRoger", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_JollyRoger',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_JollyRoger", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_JollyRoger',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_Deserters.Deserter2.PawnBalance_Orchid_Deserter2", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_JollyRoger"]])
            
            #Tinkles/OrphanMaker
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_OrphanMaker"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_OrphanMaker"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OrphanMaker", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_BossWeapons.Shotgun.SG_Jakobs_3_OrphanMaker',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OrphanMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OrphanMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OrphanMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OrphanMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OrphanMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OrphanMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OrphanMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_OrphanMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_StalkerPet.PawnBalance_Orchid_StalkerPet", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_OrphanMaker"]])
            
            #ToothlessTerry/Pimpernel
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Pimpernel"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Pimpernel"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pimpernel", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_BossWeapons.SniperRifles.Sniper_Maliwan_3_Pimpernel',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pimpernel", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pimpernel',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pimpernel", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pimpernel',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pimpernel", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pimpernel',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pimpernel", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pimpernel',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_Deserters.Deserter3.PawnBalance_Orchid_Deserter3", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pimpernel"]])
            
            #Grendel/Rapier
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Rapier"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Rapier"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rapier", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_BossWeapons.AssaultRifle.AR_Vladof_3_Rapier',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rapier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rapier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rapier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rapier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rapier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rapier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rapier", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rapier',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_Grendel.PawnBalance_Orchid_Grendel", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rapier"]])
            
            #BennyTheBooster/Sandhawk
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Sandhawk"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Sandhawk"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sandhawk", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Orchid_BossWeapons.SMG.SMG_Dahl_3_SandHawk',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sandhawk", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sandhawk',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sandhawk", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sandhawk',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sandhawk", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sandhawk',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sandhawk", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sandhawk',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_Deserters.Deserter1.PawnBalance_Orchid_Deserter1", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sandhawk"]])
            
            #DJTanner/Sham
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Sham"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Sham"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sham", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_05_LegendaryNormal',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sham", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sham',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sham", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sham',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sham", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sham',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sham", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sham',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Orchid_Pop_PirateRadioGuy.PawnBalance_Orchid_PirateRadioGuy", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sham"]])
            
            
            
            #Torgue DLC
            #MotorMama/Kitten/BabyMaker
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Kitten"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Kitten"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kitten", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Iris_Weapons.AssaultRifles.AR_Vladof_3_Kitten',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kitten", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kitten',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kitten", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kitten',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kitten", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kitten',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kitten", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kitten',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Iris_Population_MotorMama.Balance.Iris_PawnBalance_MotorMama", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kitten"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_BabyMaker"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_BabyMaker"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BabyMaker", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Tediore_5_BabyMaker',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BabyMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BabyMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BabyMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BabyMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BabyMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BabyMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BabyMaker", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BabyMaker',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Iris_Population_MotorMama.Balance.Iris_PawnBalance_MotorMama", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BabyMaker"]])
            
            
            
            #Hammerlock DLC
            #DerMonstrositat/CHOPPER
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_CHOPPER"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_CHOPPER"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_CHOPPER", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Sage_Weapons.AssaultRifle.AR_Bandit_3_Chopper',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_CHOPPER", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_CHOPPER',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_CHOPPER", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_CHOPPER',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_CHOPPER", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_CHOPPER',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_CHOPPER", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_CHOPPER',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Sage_SM_BorokCageData.Population.PawnBalance_Sage_BorokCage_Creature", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_CHOPPER"]])
            
            #Thermitage/Dahlminator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Dahlminator"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Dahlminator"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Dahlminator", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Dahl_3_Dahlminator',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Dahlminator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Dahlminator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Dahlminator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Dahlminator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Dahlminator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Dahlminator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Dahlminator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Dahlminator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Sage_Ep3_Data.Creature.PawnBalance_Sage_Ep3_Creature", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Dahlminator"]])
            
            #Woundspike/Maggie
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Maggie"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Maggie"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Maggie", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Jakobs_5_Maggie',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Maggie", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Maggie',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Maggie", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Maggie',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Maggie", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Maggie',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Maggie", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Maggie',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Sage_Ep4_Data.Creature.PawnBalance_Sage_Ep4_Creature", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Maggie"]])
            
            #Dribbles/Stomper
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Stomper"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Stomper"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Stomper", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Jakobs_3_Stomper',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Stomper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Stomper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Stomper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Stomper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Stomper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Stomper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Stomper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Stomper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Sage_SM_FollowGlowData.Creature.PawnBalance_Sage_FollowGlow_Creature", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Stomper"]])
            
            
            
            #Tina DLC
            #MrBoneyPantsGuy/Bunny
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Bunny"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Bunny"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bunny", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Legendary.RL_Tediore_5_Bunny',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bunny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bunny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bunny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bunny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bunny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bunny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bunny", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Bunny',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Skeletons.Balance.PawnBalance_BoneyPants", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bunny"]])
            
            #ArgukTheButcher/Crit
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Crit"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Crit"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Crit", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_Weapons.SMGs.SMG_Maliwan_3_Crit',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Crit", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Crit',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Crit", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Crit',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Crit", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Crit',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Crit", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Crit',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Orcs.Balance.PawnBalance_Orc_Butcher", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Crit"]])
            
            #SkeletonKings/Emperor
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Emperor"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Emperor"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Emperor", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Dahl_5_Emperor',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Emperor',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Emperor',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Emperor',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Emperor',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonKing_Aliah", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor"]])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonKing_Nazar", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor"]])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonKing_Crono", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor"]])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Skeletons.Balance.PawnBalance_SkeletonKing_Seth", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Emperor"]])
            
            #Mimic/Fibber
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Fibber"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Fibber"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Fibber", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Hyperion_3_Fibber',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Fibber", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Fibber',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Fibber", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Fibber',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Fibber", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Fibber',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Fibber", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Fibber',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Mimic.Balance.PawnBalance_Mimic", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Fibber"]])
            
            #GoldGolem/GrogNozzle
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Grogs4Dummies"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Grogs4Dummies"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Grogs4Dummies", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_Weapons.Pistols.Pistol_Maliwan_3_GrogNozzle',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Grogs4Dummies", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Grogs4Dummies',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Grogs4Dummies", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Grogs4Dummies',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Grogs4Dummies", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Grogs4Dummies',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Grogs4Dummies", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Grogs4Dummies',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Golems.Balance.PawnBalance_GolemGold", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Grogs4Dummies"]])
            
            #WarlordSlog/Orc
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Orc"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Orc"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Orc", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_Weapons.SMGs.SMG_Bandit_3_Orc',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Orc", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Orc',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Orc", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Orc',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Orc", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Orc',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Orc", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Orc',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Orcs.Balance.PawnBalance_Orc_WarlordSlog", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Orc"]])
            
            #Spiderpants/Quasar
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Quasar"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Quasar"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Quasar", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_Quasar',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Quasar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Quasar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Quasar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Quasar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Quasar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Quasar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Quasar", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Quasar',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Spiders.Unique.PawnBalance_Spiderpants", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Quasar"]])
            
            #UnmotivatedGolem/SwordSplosion
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_SwordSplosion"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_SwordSplosion"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SwordSplosion", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Aster_Weapons.Shotguns.SG_Torgue_3_SwordSplosion',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SwordSplosion", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SwordSplosion',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SwordSplosion", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SwordSplosion',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SwordSplosion", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SwordSplosion',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SwordSplosion", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SwordSplosion',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Aster_Pop_Golems.Balance.PawnBalance_Golem_SwordInStone", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SwordSplosion"]])
            
            
            
            #Headhunter1
            #SullyTheBlacksmith/FireBee
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Firebee"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Firebee"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Firebee", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_FireBee',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Firebee", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Firebee',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Firebee", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Firebee',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Firebee", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Firebee',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Firebee", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Firebee',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Spycho.Population.PawnBalance_Spycho", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Firebee"]])
            
            
            
            #HeadHunter2 (PAIN)
            #Rose/Bitch/BlackHole/Shotgun1340 (Sinkhole/Bitch)
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineeFemale.Balance.PawnBalance_EngineerFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Bitch"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_BlackHole"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_BlackHole"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BlackHole", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Nova_Singularity',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BlackHole", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BlackHole',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BlackHole", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BlackHole',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BlackHole", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BlackHole',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BlackHole", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BlackHole',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineeFemale.Balance.PawnBalance_EngineerFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BlackHole"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Shotgun1340"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Shotgun1340"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shotgun1340", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Hyperion_3_Shotgun1340',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shotgun1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shotgun1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shotgun1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shotgun1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shotgun1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shotgun1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shotgun1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shotgun1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineeFemale.Balance.PawnBalance_EngineerFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shotgun1340"]])
            
            #Strip/BonusPackage/Kerblaster
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_BonusPackage"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_BonusPackage"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BonusPackage", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_BonusPackage',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BonusPackage", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BonusPackage',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BonusPackage", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BonusPackage',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BonusPackage", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BonusPackage',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BonusPackage", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_BonusPackage',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_FleshripperFemale.Balance.PawnBalance_FleshripperFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_BonusPackage"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Kerblaster"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Kerblaster"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kerblaster", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Legendary.AR_Torgue_5_KerBlaster',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kerblaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kerblaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kerblaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kerblaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kerblaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kerblaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kerblaster", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Kerblaster',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_FleshripperFemale.Balance.PawnBalance_FleshripperFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Kerblaster"]])
            
            #Garret/Deputy'sBadge/Order
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Lynchwood_Male.Balance.PawnBalance_Lynchwood_Male", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Deputy"]])
            
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Lynchwood_Male.Balance.PawnBalance_Lynchwood_Male", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Order"]])
            
            #Moretus/EvilSmasher
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_CraterMale.Balance.PawnBalance_CraterMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_EvilSmasher"]])
            
            #Cynder/FOTFH/Pyrophobia
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_IncineratorFemale.Balance.PawnBalance_IncineratorFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_FOTFH"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Pyrophobia"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Pyrophobia"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pyrophobia", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Launchers.A_Weapons_Legendary.RL_Maliwan_5_Pyrophobia',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pyrophobia", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pyrophobia',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pyrophobia", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pyrophobia',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pyrophobia", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pyrophobia',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pyrophobia", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Pyrophobia',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_IncineratorFemale.Balance.PawnBalance_IncineratorFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Pyrophobia"]])
            
            #Fuse/Hellfire/Neogenator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_HellFire"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_HellFire"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HellFire", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Legendary.SMG_Maliwan_5_HellFire',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HellFire", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HellFire',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HellFire", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HellFire',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HellFire", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HellFire',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HellFire", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HellFire',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_IncineratorMale.Balance.PawnBalance_IncineratorMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HellFire"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Neogenator"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Neogenator"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Neogenator", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Chimera_05_Legendary',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Neogenator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Neogenator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Neogenator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Neogenator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Neogenator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Neogenator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Neogenator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Neogenator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_IncineratorMale.Balance.PawnBalance_IncineratorMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Neogenator"]])
            
            #Max/LucrativeOpportunity
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_LucrativeOpportunity"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_LucrativeOpportunity"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LucrativeOpportunity", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Opportunity',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LucrativeOpportunity", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LucrativeOpportunity',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LucrativeOpportunity", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LucrativeOpportunity',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LucrativeOpportunity", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LucrativeOpportunity',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LucrativeOpportunity", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_LucrativeOpportunity',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_RaiderMale.Balance.PawnBalance_RaiderMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_LucrativeOpportunity"]])
            
            #Axel/NastySurprise/Invader/Shield1340
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_NastySurprise"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_NastySurprise"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_NastySurprise", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Legendary.GM_NastySurprise',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_NastySurprise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_NastySurprise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_NastySurprise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_NastySurprise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_NastySurprise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_NastySurprise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_NastySurprise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_NastySurprise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineerMale.Balance.PawnBalance_EngineerMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_NastySurprise"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Invader"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Invader"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Invader", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Legendary.Sniper_Hyperion_5_Invader',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Invader", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Invader',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Invader", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Invader',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Invader", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Invader',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Invader", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Invader',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineerMale.Balance.PawnBalance_EngineerMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Invader"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Shield1340"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Shield1340"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shield1340", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_1340',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shield1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shield1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shield1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shield1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shield1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shield1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shield1340", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Shield1340',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_EngineerMale.Balance.PawnBalance_EngineerMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Shield1340"]])
            
            #Fiona/Scorpio
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Scorpio"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Scorpio"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Scorpio", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_3_Scorpio',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Scorpio", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Scorpio',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Scorpio", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Scorpio',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Scorpio", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Scorpio',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Scorpio", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Scorpio',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_RaiderFemale.Balance.PawnBalance_RaiderFemale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Scorpio"]])
            
            #Annie/SheriffsBadge/Law
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_SheriffsBadge"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_SheriffsBadge"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SheriffsBadge", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_Sheriff',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SheriffsBadge", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SheriffsBadge',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SheriffsBadge", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SheriffsBadge',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SheriffsBadge", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SheriffsBadge',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SheriffsBadge", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_SheriffsBadge',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Lynchwood_Female.Balance.PawnBalance_Lynchwood_Female", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SheriffsBadge"]])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Law"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Law"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Law", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Jakobs_3_Law',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Law", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Law',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Law", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Law',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Law", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Law',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Law", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Law',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Lynchwood_Female.Balance.PawnBalance_Lynchwood_Female", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Law"]])
            
            #Flay/ThunderballFists/Hornet
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_ThunderBallFists"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_ThunderBallFists"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ThunderBallFists", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Maliwan_5_ThunderballFists,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ThunderBallFists", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ThunderBallFists',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ThunderBallFists", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ThunderBallFists',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ThunderBallFists", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ThunderBallFists',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ThunderBallFists", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ThunderBallFists',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_FleshripperMale.Balance.PawnBalance_FleshripperMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ThunderBallFists"]])
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Hornet"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Hornet"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hornet", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Dahl_5_Hornet',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hornet", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hornet',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hornet", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hornet',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hornet", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hornet',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hornet", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Hornet',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_FleshripperMale.Balance.PawnBalance_FleshripperMale", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Hornet"]])
            
            
            
            #Headhunter4
            #Moby/Aequitas
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Aequitas"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Aequitas"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Aequitas", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_ItemGrades.Shields.ItemGrade_Gear_Shield_Absorption_Equitas',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Aequitas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Aequitas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Aequitas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Aequitas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Aequitas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Aequitas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Aequitas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Aequitas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherBlue", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Aequitas"]])
            
            #FireCrak'n/Chulainn
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Chulainn"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Chulainn"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Chulainn", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Maliwan_3_Chulainn',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Chulainn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Chulainn',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Chulainn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Chulainn',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Chulainn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Chulainn',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Chulainn", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Chulainn',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherPurple", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Chulainn"]])
            
            #BridgetHodunk/KissOfDeath
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_KissOfDeath"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_KissOfDeath"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_KissOfDeath", "(ItmPoolDefinition=None,InvBalanceDefinition=InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_KissOfDeath',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_KissOfDeath", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_KissOfDeath',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_KissOfDeath", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_KissOfDeath',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_KissOfDeath", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_KissOfDeath',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_KissOfDeath", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_KissOfDeath',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_GoliathBride.Population.PawnBalance_GoliathBride", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_KissOfDeath"]])
            
            #Sigmand/Landscaper
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Landscaper"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Landscaper"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Landscaper", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Torgue_3_Landscaper',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Landscaper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Landscaper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Landscaper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Landscaper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Landscaper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Landscaper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Landscaper", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Landscaper',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherWhite", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Landscaper"]])
            
            #ColinZaford/Rubi
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Rubi"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Rubi"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rubi", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Maliwan_3_Rubi,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rubi',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rubi',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rubi',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Rubi',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_GoliathGroom.Population.PawnBalance_GoliathGroom", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi"]])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_GoliathGroom.Population.PawnBalance_GoliathGroomRaid", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Rubi"]])
            
            #BLNGLoader/SledgesShotgun
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_BlingLoader.Population.PawnBalance_BlingLoader", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_SledgesShotgun"]])
            
            #DrunkThreshers/Sloth
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Sloth"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Sloth"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sloth", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Dahl_3_Sloth',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sloth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sloth',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sloth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sloth',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sloth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sloth',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sloth", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Sloth',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherDrunk.Population.PawnBalance_Nast_ThresherDrunk", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Sloth"]])
            
            #RueTheLoveThresher/Triquetra
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Triquetra"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Triquetra"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Triquetra", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Shotgun.A_Weapons_Unique.SG_Jakobs_3_Triquetra',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Triquetra", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Triquetra',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Triquetra", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Triquetra',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Triquetra", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Triquetra',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Triquetra", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Triquetra',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherOrange", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Triquetra"]])
            
            #Ikaroa/Veritas
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Veritas"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Veritas"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Veritas", "(ItmPoolDefinition=None,InvBalanceDefinition=WeaponBalanceDefinition'GD_Weap_Pistol.A_Weapons_Unique.Pistol_Vladof_3_Veritas',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Veritas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Veritas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Veritas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Veritas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Veritas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Veritas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Veritas", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Veritas',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Nast_ThresherShared.Population.PawnBalance_Nast_ThresherGreen", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Veritas"]])
            
            
            
            #Lilith DLC
            #Cassius/HectorsParadise
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_HectorsParadise"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_HectorsParadise"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HectorsParadise", "(ItmPoolDefinition=None,InvBalanceDefinition=ItemPoolDefinition'GD_Anemone_ItemPools.WeaponPools.Pool_Pistol_Hector_Paradise',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HectorsParadise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HectorsParadise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HectorsParadise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HectorsParadise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HectorsParadise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HectorsParadise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HectorsParadise", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_HectorsParadise',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Anemone_Pop_Cassius.PawnBalance_Anemone_Cassius", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_HectorsParadise"]])
            
            #LtAngvar/Nirvana
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Nirvana"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Nirvana"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Nirvana", "(ItmPoolDefinition=None,InvBalanceDefinition=ItemPoolDefinition'GD_Anemone_ItemPools.WeaponPools.Pool_Weapons_Ever_SMG',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Nirvana", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Nirvana',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Nirvana", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Nirvana',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Nirvana", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Nirvana',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Nirvana", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Nirvana',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Anemone_Pop_NP.Balance.PawnBalance_NP_Lt_Angvar", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Nirvana"]])
            
            #LtTetra/InfectionCleaner/Overcompensator
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_InfectionCleaner"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_InfectionCleaner"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_InfectionCleaner", "(ItmPoolDefinition=None,InvBalanceDefinition=ItemPoolDefinition'GD_Anemone_ItemPools.WeaponPools.Pool_Weapons_Infection_Cleaner',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_InfectionCleaner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_InfectionCleaner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_InfectionCleaner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_InfectionCleaner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_InfectionCleaner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_InfectionCleaner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_InfectionCleaner", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_InfectionCleaner',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Anemone_Pop_NP.Balance.PawnBalance_NP_Lt_Tetra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_InfectionCleaner"]])
            
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Overcompensator"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Overcompensator"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Overcompensator", "(ItmPoolDefinition=None,InvBalanceDefinition=ItemPoolDefinition'GD_Anemone_ItemPools.WeaponPools.Pool_Weapons_Overcompensator',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Overcompensator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Overcompensator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Overcompensator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Overcompensator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Overcompensator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Overcompensator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Overcompensator", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Overcompensator',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Anemone_Pop_NP.Balance.PawnBalance_NP_Lt_Tetra", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Overcompensator"]])
            
            #SandwormQueen/Mouthwash
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_Mouthwash"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_Mouthwash"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Mouthwash", "(ItmPoolDefinition=None,InvBalanceDefinition=ItemPoolDefinition'GD_Anemone_ItemPools.WeaponPools.Pool_Artifact_Lust_Relic',Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Mouthwash", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Mouthwash',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Mouthwash", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Mouthwash',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Mouthwash", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Mouthwash',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Mouthwash", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_Mouthwash',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniques_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "GD_Anemone_Pop_WildLife.Balance.PawnBalance_SandWorm_Queen", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_Mouthwash"]])
            
            #Template
            CreateNewObject(["ItemPoolDefinition", "GD_Itempools.GeneralItemPools.Pool_Gear_UCP", "_ITEM"])
            CreateNewObject(["ItemPoolListDefinition", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP", "_ITEM"])
            AutoAddItemToPool(["GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ITEM", "(ItmPoolDefinition=None,InvBalanceDefinition=,Probability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_1_Common',BaseValueScaleConstant=1.000000),bDropOnDeath=True)"])            
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ITEM", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ITEM',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ITEM", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ITEM',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_2P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ITEM", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ITEM',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_3P',BaseValueScaleConstant=1.000000))"])
            AutoAddPoolToList(["GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ITEM", "(ItemPool=ItemPoolDefinition'GD_Itempools.GeneralItemPools.Pool_Gear_UCP_ITEM',PoolProbability=(BaseValueConstant=0.000000,BaseValueAttribute=None,InitializationDefinition=AttributeInitializationDefinition'GD_Balance.Weighting.Weight_BossUniqueRares_4P',BaseValueScaleConstant=1.000000))"])
            AddUpdatingEntry([[AutoAddPawnItemPoolList, "", "GD_Itempools.ListDefs.StandardEnemyGunsAndGear_UCP_ITEM"]])
            
        def ScaleHaderaxLauncherBox(): #FlareV2
            unrealsdk.FindObject("InteractiveObjectBalanceDefinition", "GD_Anemone_Lobelia_DahDigi.LootableGradesUnique.ObjectGrade_DalhEpicCrate_Digi_RocketLauncher").DefaultLoot[0].ItemAttachments[1].PoolProbability.BaseValueConstant = 0
            unrealsdk.FindObject("InteractiveObjectBalanceDefinition", "GD_Anemone_Lobelia_DahDigi.LootableGradesUnique.ObjectGrade_DalhEpicCrate_Digi_RocketLauncher").DefaultLoot[0].ItemAttachments[1].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_BossUniques")
            unrealsdk.FindObject("InteractiveObjectBalanceDefinition", "GD_Anemone_Lobelia_DahDigi.LootableGradesUnique.ObjectGrade_DalhEpicCrate_Digi_RocketLauncher").DefaultLoot[0].ItemAttachments[1].PoolProbability.BaseValueScaleConstant = 2.5
            
        
        if self.hasBeenEnabled == False and self.lootPoolOption.CurrentValue == True:
            FlarePoolChanges()
        
        if self.hasBeenEnabled == False and self.UCPCompatibilityOption.CurrentValue == True:
            ScuffedUCPLoot()
        
        
        
        
        
        
        '''
        This is will always try to run, so you shouldn't try to expand pools, for instance, since it will do it a whole bunch of times
        To check if soemthing is loaded, use if unrealsdk.FindObject("OBJECT CLASS", "OBJECT NAME"): then indent following line which are to run if the object is found to be loaded
        For example:
        if unrealsdk.FindObject("Behavior_SpawnItems", "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_42"):
            unrealsdk.FindObject("Behavior_SpawnItems", "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_42").ItemPoolList[1].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_2P")
            unrealsdk.FindObject("Behavior_SpawnItems", "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_42").ItemPoolList[2].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_3P")
            unrealsdk.FindObject("Behavior_SpawnItems", "GD_SpiderTank_Boss.Death.DeathDef_SpiderTank_Boss:BehaviorProviderDefinition_0.Behavior_SpawnItems_42").ItemPoolList[3].PoolProbability.InitializationDefinition = unrealsdk.FindObject("AttributeInitializationDefinition","GD_Balance.Weighting.Weight_4P")
    
        '''
        def AlwaysRunFlarePoolChanges():
            #This is filler
            PC = GetEngine().GamePlayers[0].Actor
        
        #Makes dlc raid bosses available early
        def MakeRaidsAvailable(availableBool):
            #[Raid boss mission, default mission, mission to adjust to]
            raidBossMissionList = [
                ["GD_IrisRaidBoss.M_Iris_RaidPete", "GD_IrisEpisode01.M_IrisEp1_HighwayToHell", "GD_IrisEpisode06.M_IrisEp6_LongWayToTheTop"], #Pete
                ["GD_Orchid_Raid.M_Orchid_Raid1", "GD_Orchid_Plot_Mission09.M_Orchid_PlotMission09", "GD_Orchid_Plot_Mission07.M_Orchid_PlotMission07"], #Hyperius
                ["GD_Sage_Raid.M_Sage_Raid", "GD_Sage_Ep5.M_Sage_Mission05", "GD_Sage_Ep4.M_Sage_Mission04"] #Vorac
            ]
            if availableBool == True:
                for mission in raidBossMissionList:
                    if unrealsdk.FindObject("MissionDefinition",mission[0]) and unrealsdk.FindObject("MissionDefinition",mission[2]):
                        unrealsdk.FindObject("MissionDefinition",mission[0]).Dependencies[0] = unrealsdk.FindObject("MissionDefinition",mission[2])
            else:
                for mission in raidBossMissionList:
                    if unrealsdk.FindObject("MissionDefinition",mission[0]) and unrealsdk.FindObject("MissionDefinition",mission[1]):
                        unrealsdk.FindObject("MissionDefinition",mission[0]).Dependencies[0] = unrealsdk.FindObject("MissionDefinition",mission[1])
        
        if self.hasBeenEnabled == False and self.earlierRaidAccessOption.CurrentValue == True:
            MakeRaidsAvailable(True)
        
        #Makes Axton's turret throw faster
        def AxtonTurretAnimationChanges():
            if unrealsdk.FindObject("WillowAnimDefinition","GD_Soldier_Skills.Misc.SpecialMove_ThrowScorpio_Master") and unrealsdk.FindObject("SpecialMove_FirstPerson","GD_Soldier_Skills.Misc.SpecialMove_ThrowScorpio_1st"):
                animationObject = unrealsdk.FindObject("WillowAnimDefinition","GD_Soldier_Skills.Misc.SpecialMove_ThrowScorpio_Master")
                firstPersonObject = unrealsdk.FindObject("SpecialMove_FirstPerson","GD_Soldier_Skills.Misc.SpecialMove_ThrowScorpio_1st")
                if self.TurretThrowSpeedOption.CurrentValue == "Grenade":
                    animationObject.BlendInTime = self.throwBlendInTime
                    animationObject.BlendOutTime = self.throwBlendOutTime
                    animationObject.PlayRate = self.throwPlayRate
                    firstPersonObject.BlendInTime = self.throwAnimationBlendInTime
                    firstPersonObject.BlendOutTime = self.throwAnimationBlendOutTime
                    firstPersonObject.PlayRate = self.throwAnimationPlayRate
                else:
                    animationObject.BlendInTime = 0.1
                    animationObject.BlendOutTime = 0.1
                    animationObject.PlayRate = 0.65
                    firstPersonObject.BlendInTime = 0.1
                    firstPersonObject.BlendOutTime = 0.1
                    firstPersonObject.PlayRate = 0.65
        
        #Makes the dust's caravan have a red chest
        def UpgradeCaravan():
            if unrealsdk.FindObject("Behavior_AISpawn","GD_CaraVan.Vehicle.Class_CaraVan:BehaviorProviderDefinition_0.Behavior_AISpawn_5"):
                caravanChestSpawn = unrealsdk.FindObject("Behavior_AISpawn","GD_CaraVan.Vehicle.Class_CaraVan:BehaviorProviderDefinition_0.Behavior_AISpawn_5")
                caravanChestSpawn.PopDef = unrealsdk.FindObject("PopulationDefinition","GD_Population_Treasure.TreasureChests.EpicChest_Dahl")
        
        #Make sure this is the last thing before the hooks
        self.hasBeenEnabled = True
                
        #Main hook
        def HookCreateWeaponScopeMovie(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True:
                PC = GetEngine().GamePlayers[0].Actor
                mapname=PC.WorldInfo.GetMapName()

                if mapname != "menumap":

                    #Scales boss uniques, boss unique rares, and boss uniques rare spawn monster off of your current playthrough and OP level
                    if self.uniqueDropRateOption.CurrentValue == True:
                        ScaleDropRates()
                    
                    #Changes the math in the randomizers for item drops and enemy spawns
                    if self.gearLevelOption.CurrentValue == True:
                        SetLevelRandomizers()
                    
                    #Scales prices for ammo, health, and skill point resets off your current playthrough
                    if self.vendorPriceOption.CurrentValue == True:
                        ScaleCosts()
                    
                    #Scales EXP rates from enemies off your playthrough
                    if self.EXPRateOption.CurrentValue == True:
                        ScaleEXPRates()

                    #Increase all tubby chances and Vermi chance by 50% but only in UVHM+
                    if self.enemySpawnRateOption.CurrentValue == True:
                        ScaleTubbySpawnRates()

                    #Updates Custom weight
                    UpdateCustomWeights()
                    
                    #Allows enemies to wield legendary weapons
                    if self.legendaryGunsForEnemiesOption.CurrentValue == True:
                        EnableEnemyLegendaries()
                    
                    #Causes enemies to drop their weapons if the quality is blue or purple
                    if self.heldGunDropOption.CurrentValue == True:
                        EnableEnemyWeaponDropping()
                    
                    #Adjusts general loot rates
                    if self.lootPoolOption.CurrentValue == True:
                        AdjustGeneralLoot(True)
                    
                    #Sets the scale constants in chest pools to the correct values
                    if self.lootPoolOption.CurrentValue == True:
                        FixChestLoot(True)
                    
                    #Adjusts the ratio of the types of relics that drop
                    if self.relicPartsOption.CurrentValue == True:
                        ScaleRelics(True)
                    
                    #Makes vendor loot able to roll above and below rarity
                    if self.lootPoolOption.CurrentValue == True:
                        FixVendorLoot()

                    #Replaces LWT Loader loot with red chest loot
                    if self.lootPoolOption.CurrentValue == True:
                        FixLWTLoaderLoot()
                    
                    #Makes the loaders in control core angel drop loot
                    if self.lootPoolOption.CurrentValue == True:
                        FixControlCoreLoadersLoot()
                    
                    #Makes OOO spawn more frequently
                    if self.enemySpawnRateOption.CurrentValue == True:
                        ScaleOOOSpawnRates()
                    
                    #Allows Krieg to perform his raving retribution rants
                    if self.ravingRetributionOption.CurrentValue == True:
                        ReactivateRavingRetribution()
                    
                    #Runs the commands we borrowed from other mods
                    StolenChangesAlwaysRun()
                    
                    #Makes standard enemies drop gunsandgear loot more often
                    if self.gunsAndGearRateOption.CurrentValue == True:
                        UpdateGunsAndGear()
                    
                    #Runs the AlwaysCheckButRunOnce objects' functions
                    RunAutoCheckFunctions()
                    
                    if self.lootPoolOption.CurrentValue == True:
                        AlwaysRunFlarePoolChanges()
                    
                    #Makes Axton's turret throw faster
                    AxtonTurretAnimationChanges()
                    
                    #Runs the audio fixes STOLEN FROM UCP
                    FixAudio()
                    
                    #Makes the dust's caravan have a red chest at a 50% chance to allow for the completion of the BAR challenge associated with it
                    if random.randint(0, 1) == 0 and self.caravanChestOption.CurrentValue == True:
                        UpgradeCaravan()
                    
                    #Gives Michael Mamaril better loot
                    if self.lootPoolOption.CurrentValue == True:
                        FixMamarilLoot()
                    
                    #Cutscene disabler STOLEN FROM FromDarkHell's CUTSCENE DISABLER (we ported it to python)
                    DisableCutscenes(mapname)
                    '''
                    #Adjusts the play speed of vehicle entering and exiting animations
                    if self.vehicleAnimationsOption.CurrentValue == True:
                        FixVehicleAnimations()
                    '''
                    if self.autopickupOption.CurrentValue == "UVHM":
                        if PC.GetCurrentPlaythrough() == 2:
                            MakeEridiumPickupAutomatically(True)

                        else:
                            MakeEridiumPickupAutomatically(False)
            
                    #Weapon parts coded poorly and shield parts
                    if PC.GetCurrentPlaythrough() != self.lastPlaythrough:
                        if self.weaponPartsOption.CurrentValue == True:
                            if PC.GetCurrentPlaythrough() == 0:
                                #NVHM part chances
                                #Elements
                                #Pistols
                                undoElements("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                undoElements("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                undoElements("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                undoElements("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                undoElements("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} ElementalPartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=4),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Fire',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=11,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Shock',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=12,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Corrosive',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=13,MaxGameStageIndex=1,DefaultWeightIndex=6)))")
                                #ARs
                                undoElements("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoElements("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoElements("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                #SMGs
                                undoElements("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                undoElements("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                undoElements("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                undoElements("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                #Shotguns
                                undoElements("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                undoElements("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                undoElements("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Launchers
                                undoElements("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoElements("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoElements("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                #Grips
                                #Pistols
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                undoGrip("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                #SMGs
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Accessories
                                #Pistols
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_3_Rare")
                                undoAccessory1("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_3_Rare")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} Accessory1PartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=3),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Bayonet_1',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Accuracy',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Double_DvaInfinity',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Stock_Stability',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_1_Mag',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_2_Damage',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_3_Firerate',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=6)))")
                                #ARs
                                undoAccessory1("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                undoAccessory1("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                undoAccessory1("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                undoAccessory1("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                undoAccessory1("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #SMGs
                                undoAccessory1("GD_Weap_SMG.A_Weapons.SMG_Bandit_3_Rare")
                                undoAccessory1("GD_Weap_SMG.A_Weapons.SMG_Tediore_3_Rare")
                                undoAccessory1("GD_Weap_SMG.A_Weapons.SMG_Dahl_3_Rare")
                                undoAccessory1("GD_Weap_SMG.A_Weapons.SMG_Maliwan_3_Rare")
                                undoAccessory1("GD_Weap_SMG.A_Weapons.SMG_Hyperion_3_Rare")
                                #Shotguns
                                undoAccessory1("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                undoAccessory1("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                undoAccessory1("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                undoAccessory1("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                undoAccessory1("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Launchers
                                undoAccessory1("GD_Weap_Launchers.A_Weapons.RL_Bandit_3_Rare")
                                undoAccessory1("GD_Weap_Launchers.A_Weapons.RL_Tediore_3_Rare")
                                undoAccessory1("GD_Weap_Launchers.A_Weapons.RL_Vladof_3_Rare")
                                undoAccessory1("GD_Weap_Launchers.A_Weapons.RL_Maliwan_3_Rare")
                                undoAccessory1("GD_Weap_Launchers.A_Weapons.RL_Torgue_3_Rare")
                                #Barrels
                                #Greens
                                #Pistols
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                #SMGs
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Blues
                                #ARs
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Purples
                                #Pistols
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_4_VeryRare")
                                #SMGs
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Dahl_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Maliwan_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Hyperion_4_VeryRare")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_4_VeryRare")
                                #Stocks
                                #ARs
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                fixStock("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                #SMGs
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Bandit")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Tediore")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Dahl")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Maliwan")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Hyperion")
                                #Snipers
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                fixStock("GD_Anemone_Weapons.sniper.Sniper_Jakobs_6_Chaude_Mama")
                                #Launchers
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                            elif PC.GetCurrentPlaythrough() == 1:
                                #TVHM part chances
                                #Elements
                                #Pistols
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} ElementalPartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Fire',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=11,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Shock',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=12,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Corrosive',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=13,MaxGameStageIndex=1,DefaultWeightIndex=0)))")
                                #ARs
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                #SMGs
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                #Shotguns
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Launchers
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                #Grips
                                #Pistols
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                undoGrip("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                #SMGs
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoGrip("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Accessories
                                #Pistols
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_3_Rare")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} Accessory1PartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Bayonet_1',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Accuracy',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Double_DvaInfinity',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Stock_Stability',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_1_Mag',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_2_Damage',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_3_Firerate',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0)))")
                                #ARs
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #SMGs
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Hyperion_3_Rare")
                                #Shotguns
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Launchers
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Vladof_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Torgue_3_Rare")
                                #Barrels
                                #Greens
                                #Pistols
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                #SMGs
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoBarrel("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Blues
                                #ARs
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Purples
                                #Pistols
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_4_VeryRare")
                                undoBarrel("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_4_VeryRare")
                                #SMGs
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Dahl_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Maliwan_4_VeryRare")
                                undoBarrel("GD_Weap_SMG.A_Weapons.SMG_Hyperion_4_VeryRare")
                                #Shotguns
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Bandit_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Tediore_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Torgue_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_4_VeryRare")
                                undoBarrel("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_4_VeryRare")
                                #Stocks
                                #ARs
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                fixStock("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                #SMGs
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Bandit")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Tediore")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Dahl")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Maliwan")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Hyperion")
                                #Snipers
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoStock("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                fixStock("GD_Anemone_Weapons.sniper.Sniper_Jakobs_6_Chaude_Mama")
                                #Launchers
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                undoStock("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                            else:
                                #UVHM part chances
                                #Pistols
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} ElementalPartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Fire',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=11,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Shock',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=12,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.elemental.Pistol_Elemental_Corrosive',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=13,MaxGameStageIndex=1,DefaultWeightIndex=0)))")
                                #ARs
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                #SMGs
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                #Shotguns
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                makeAllElementsEqual("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Launchers
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                balanceElementsForLaunchers("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                #Grips
                                #Pistols
                                weighGripForBandit("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                weighGripForTediore("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                weighGripForVladof("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                weighGripForDahl("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                weighGripForTorgue("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                weighGripForMaliwan("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                weighGripForJakobs("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                weighGripForHyperion("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                weighGripForBandit("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                weighGripForDahl("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                weighGripForJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                weighGripForTorgue("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                weighGripForVladof("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                weighGripForTorgue("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                undoGrip("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                #SMGs
                                weighGripForBandit("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                weighGripForTediore("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                weighGripForDahl("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                weighGripForMaliwan("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                weighGripForHyperion("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                weighGripForBandit("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                weighGripForTediore("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                weighGripForTorgue("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                weighGripForJakobs("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                weighGripForHyperion("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                weighGripForDahl("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                weighGripForVladof("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                weighGripForMaliwan("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                weighGripForJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                weighGripForHyperion("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoGrip("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                weighGripForBandit("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                weighGripForTediore("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                weighGripForVladof("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                weighGripForMaliwan("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                weighGripForTorgue("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Accessories
                                #Pistols
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_3_Rare")
                                infinityObject = unrealsdk.FindObject("WeaponPartListCollectionDefinition", "GD_Weap_Pistol.A_Weapons_Legendary.Pistol_Vladof_5_Infinity:WeaponPartListCollectionDefinition_107")
                                PC.ServerRCon(f"set {PC.PathName(infinityObject)} Accessory1PartData (bEnabled=True,WeightedParts=((Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_None',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Bayonet_1',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Accuracy',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Laser_Double_DvaInfinity',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Stock_Stability',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_1_Mag',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_2_Damage',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0),(Part=WeaponPartDefinition'GD_Weap_Pistol.Accessory.Pistol_Accessory_Tech_3_Firerate',Manufacturers=((Manufacturer=None,DefaultWeightIndex=1)),MinGameStageIndex=0,MaxGameStageIndex=1,DefaultWeightIndex=0)))")
                                #ARs
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #SMGs
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Dahl_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_SMG.A_Weapons.SMG_Hyperion_3_Rare")
                                #Shotguns
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Launchers
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Bandit_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Tediore_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Vladof_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Maliwan_3_Rare")
                                makeAllAccessory1Equal("GD_Weap_Launchers.A_Weapons.RL_Torgue_3_Rare")
                                #Barrels
                                #Greens
                                #Pistols
                                weighBarrelForBandit("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_2_Uncommon")
                                weighBarrelForTediore("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_2_Uncommon")
                                weighBarrelForVladof("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_2_Uncommon")
                                weighBarrelForDahl("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_2_Uncommon")
                                weighBarrelForTorgue("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_2_Uncommon")
                                weighBarrelForMaliwan("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_2_Uncommon")
                                weighBarrelForJakobs("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_2_Uncommon")
                                weighBarrelForHyperion("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_2_Uncommon")
                                #ARs
                                weighBarrelForBandit("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                weighBarrelForDahl("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                weighBarrelForJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                weighBarrelForTorgue("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                weighBarrelForVladof("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                undoBarrel("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                #SMGs
                                weighBarrelForBandit("GD_Weap_SMG.A_Weapons.SMG_Bandit_2_Uncommon")
                                weighBarrelForTediore("GD_Weap_SMG.A_Weapons.SMG_Tediore_2_Uncommon")
                                weighBarrelForDahl("GD_Weap_SMG.A_Weapons.SMG_Dahl_2_Uncommon")
                                weighBarrelForMaliwan("GD_Weap_SMG.A_Weapons.SMG_Maliwan_2_Uncommon")
                                weighBarrelForHyperion("GD_Weap_SMG.A_Weapons.SMG_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1")
                                #Shotguns
                                weighBarrelForBandit("GD_Weap_Shotgun.A_Weapons.SG_Bandit_2_Uncommon")
                                weighBarrelForTediore("GD_Weap_Shotgun.A_Weapons.SG_Tediore_2_Uncommon")
                                weighBarrelForTorgue("GD_Weap_Shotgun.A_Weapons.SG_Torgue_2_Uncommon")
                                weighBarrelForJakobs("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_2_Uncommon")
                                weighBarrelForHyperion("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_2_Uncommon")
                                #Snipers
                                weighBarrelForDahl("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                weighBarrelForVladof("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                weighBarrelForMaliwan("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                weighBarrelForJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                weighBarrelForHyperion("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                undoBarrel("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                weighBarrelForBandit("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                weighBarrelForTediore("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                weighBarrelForVladof("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                weighBarrelForMaliwan("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                weighBarrelForTorgue("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                #Blues
                                #ARs
                                weighBarrelForBandit("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_3_Rare")
                                weighBarrelForDahl("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_3_Rare")
                                weighBarrelForJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_3_Rare")
                                weighBarrelForTorgue("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_3_Rare")
                                weighBarrelForVladof("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_3_Rare")
                                #Shotguns
                                weighBarrelForBandit("GD_Weap_Shotgun.A_Weapons.SG_Bandit_3_Rare")
                                weighBarrelForTediore("GD_Weap_Shotgun.A_Weapons.SG_Tediore_3_Rare")
                                weighBarrelForTorgue("GD_Weap_Shotgun.A_Weapons.SG_Torgue_3_Rare")
                                weighBarrelForJakobs("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_3_Rare")
                                weighBarrelForHyperion("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_3_Rare")
                                #Purples
                                #Pistols
                                weighBarrelForBandit("GD_Weap_Pistol.A_Weapons.Pistol_Bandit_4_VeryRare")
                                weighBarrelForTediore("GD_Weap_Pistol.A_Weapons.Pistol_Tediore_4_VeryRare")
                                weighBarrelForVladof("GD_Weap_Pistol.A_Weapons.Pistol_Vladof_4_VeryRare")
                                weighBarrelForDahl("GD_Weap_Pistol.A_Weapons.Pistol_Dahl_4_VeryRare")
                                weighBarrelForTorgue("GD_Weap_Pistol.A_Weapons.Pistol_Torgue_4_VeryRare")
                                weighBarrelForMaliwan("GD_Weap_Pistol.A_Weapons.Pistol_Maliwan_4_VeryRare")
                                weighBarrelForJakobs("GD_Weap_Pistol.A_Weapons.Pistol_Jakobs_4_VeryRare")
                                weighBarrelForHyperion("GD_Weap_Pistol.A_Weapons.Pistol_Hyperion_4_VeryRare")
                                #SMGs
                                weighBarrelForBandit("GD_Weap_SMG.A_Weapons.SMG_Bandit_4_VeryRare")
                                weighBarrelForTediore("GD_Weap_SMG.A_Weapons.SMG_Tediore_4_VeryRare")
                                weighBarrelForDahl("GD_Weap_SMG.A_Weapons.SMG_Dahl_4_VeryRare")
                                weighBarrelForMaliwan("GD_Weap_SMG.A_Weapons.SMG_Maliwan_4_VeryRare")
                                weighBarrelForHyperion("GD_Weap_SMG.A_Weapons.SMG_Hyperion_4_VeryRare")
                                #Shotguns
                                weighBarrelForBandit("GD_Weap_Shotgun.A_Weapons.SG_Bandit_4_VeryRare")
                                weighBarrelForTediore("GD_Weap_Shotgun.A_Weapons.SG_Tediore_4_VeryRare")
                                weighBarrelForTorgue("GD_Weap_Shotgun.A_Weapons.SG_Torgue_4_VeryRare")
                                weighBarrelForJakobs("GD_Weap_Shotgun.A_Weapons.SG_Jakobs_4_VeryRare")
                                weighBarrelForHyperion("GD_Weap_Shotgun.A_Weapons.SG_Hyperion_4_VeryRare")
                                #Stocks
                                #ARs
                                weighStockAgainstJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Bandit_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Dahl_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Jakobs_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Torgue_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_AssaultRifle.A_Weapons.AR_Vladof_2_Uncommon")
                                weighStockAgainstJakobs("GD_Anemone_Weapons.AssaultRifle.PeakOpener.AR_PeakOpener")
                                undoStock("GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX")
                                #SMGs
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Bandit")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Tediore")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Dahl")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Maliwan")
                                fixStock("GD_Weap_SMG.A_Weapons.SMG_Hyperion")
                                #Snipers
                                weighStockAgainstJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Dahl_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Vladof_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Maliwan_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Jakobs_2_Uncommon")
                                weighStockAgainstJakobs("GD_Weap_SniperRifles.A_Weapons.Sniper_Hyperion_2_Uncommon")
                                weighStockAgainstJakobs("GD_Anemone_Weapons.sniper.Sniper_Jakobs_6_Chaude_Mama")
                                undoStock("GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1")
                                #Launchers
                                weighStockAgainstTediore("GD_Weap_Launchers.A_Weapons.RL_Bandit_2_Uncommon")
                                weighStockAgainstTediore("GD_Weap_Launchers.A_Weapons.RL_Tediore_2_Uncommon")
                                weighStockAgainstTediore("GD_Weap_Launchers.A_Weapons.RL_Vladof_2_Uncommon")
                                weighStockAgainstTediore("GD_Weap_Launchers.A_Weapons.RL_Maliwan_2_Uncommon")
                                weighStockAgainstTediore("GD_Weap_Launchers.A_Weapons.RL_Torgue_2_Uncommon")
                                
                            makeWeaponDependenciesActuallyWorkLikeTheyShouldHaveInTheFirstPlaceGodDamnit()
                            
                        if self.shieldPartsOption.CurrentValue == True:
                            if PC.GetCurrentPlaythrough() == 0:
                                ResetShields()
                            else:
                                ScaleShields()
                            
                    self.lastPlaythrough = PC.GetCurrentPlaythrough()

                if self.lootPoolOption.CurrentValue == True:
                    FixBossLootPools(mapname)
                    
            else:
                #Runs the audio fixes STOLEN FROM UCP
                FixAudio()
                
                #Makes Axton's turret throw faster
                AxtonTurretAnimationChanges()
                '''
                #Adjusts the play speed of vehicle entering and exiting animations
                if self.vehicleAnimationsOption.CurrentValue == True:
                    FixVehicleAnimations()
                '''
            
            return True
            
        #For updating on player joining
        def HookClientReceive(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True:
                PC = GetEngine().GamePlayers[0].Actor
                mapname=PC.WorldInfo.GetMapName()

                if mapname != "menumap":
                    
                    #Updates custom weights
                    UpdateCustomWeights()
                
                if self.lootPoolOption.CurrentValue == True:
                    FixBossLootPools(mapname)
            
            return True
        
        #For updating on player joining
        def RessurectPlayer(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True and self.gearLevelOption.CurrentValue == True:
                #Changes the math in the randomizers for item drops and enemy spawns
                SetLevelRandomizers()

            return True
        
        #For making echos non-consumable
        def ConsumeItem(caller: UObject, function: UFunction, params: FStruct) -> bool:
            item = caller.GetInventoryDefinition()
            
            #Makes the player's starter echo non-consumable and handles which dialogue plays
            returnValue = True
            blankSoundObject = unrealsdk.FindObject("AkEvent","Ake_UI.UI_HUD.Ak_Play_UI_World_Use_Over")

            for excludedItem in self.NonConsumableItemsList:
                if item == unrealsdk.FindObject(excludedItem[0], excludedItem[1]):
                    returnValue = False
                    i = 0
                    for dialogue in self.dialogGroupObject.TalkActs:
                        dialogue.TalkData[0].TalkAkEvent = self.savedDialogGroupObject.TalkActs[i].TalkData[0].TalkAkEvent
                        dialogue.OutputDelay = self.savedDialogGroupObject.TalkActs[i].OutputDelay
                        i += 1
            
            if self.reusableEchoesOption.CurrentValue == False:
                returnValue = True
                
            return returnValue
        
        #For pausing the game while in the inventory menu
        def TryFakePauseInSinglePlayer(caller: UObject, function: UFunction, params: FStruct) -> bool:
            return self.menuPauseOption.CurrentValue
        
        #For opening the inventory menu in the air
        def ShowStatusMenu(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.menuInAirOption.CurrentValue == False:
                return True
            
            else:
                viewportClient = caller.GetPlayerViewportClient()
                if viewportClient and caller.CanShowModalMenu():
                    caller.ForceUnzoom()
                    if caller.TradeManager:
                        caller.TradeManager.CancelTrade()
                    caller.SetStatusMenuOpen(True)
                    viewportClient.ViewportUI.RunStatusMenu(caller)
                    caller.ClearContextualPromptScreen()
                
                return False

        #For updating certain vendors
        def GenerateInventory(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True:
                if self.vendorPriceOption.CurrentValue == True:
                    ScaleCosts()
                #Makes vendor loot able to roll above and below rarity
                if self.lootPoolOption.CurrentValue == True:
                    FixVendorLoot()
                
                if self.gearLevelOption.CurrentValue == True:
                    SetLevelRandomizers()

            return True
        
        #Increases the amount of damage cars do on impact
        def DriverEnter(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if caller.AwesomeLevel != 2:
                PC = GetEngine().GamePlayers[0].Actor
                playthrough = PC.GetCurrentPlaythrough()
                if playthrough == 0:
                    caller.ImpactDamage *= self.NVHMCarImpactDamageModifier
                elif playthrough == 1:
                    caller.ImpactDamage *= self.TVHMCarImpactDamageModifier
                else:
                    caller.ImpactDamage *= self.UVHMCarImpactDamageModifier
                caller.AwesomeLevel = 2
                
            #Permaslag fix
            if self.makeVehiclesUnslaggable == True and self.vehiclePermaslagOption.CurrentValue == True:
                vehicleList = [
                    "GD_Runner_Streaming.Archetype.Class_RocketRunner",
                    "GD_Runner_Streaming.Archetype.Class_LightRunnerMG",
                    "GD_BTech_Streaming.ClassDefinition.Class_SawBladeTechnical",
                    "GD_BTech_Streaming.ClassDefinition.Class_CatapultTechnical",
                    "GD_Orchid_RocketHovercraft.ClassDefinition.Class_RocketHovercraft",
                    "GD_Orchid_HarpoonHovercraft.ClassDefinition.Class_HarpoonHovercraft",
                    "GD_Orchid_SawHovercraft.ClassDefinition.Class_SawHovercraft",
                    "GD_Sage_CorrosiveFanBoat.ClassDefinition.Class_CorrosiveFanBoat",
                    "GD_Sage_ShockFanboat.ClassDefinition.Class_ShockFanboat",
                    "GD_Sage_IncendiaryFanboat.ClassDefinition.Class_IncendiaryFanboat"
                ]
                for vehicle in vehicleList:
                    if unrealsdk.FindObject("VehicleClassDefinition",vehicle):
                        vehicleObject = unrealsdk.FindObject("VehicleClassDefinition",vehicle)
                        vehicleObject.AmpDamageModifiers = ((0, None, None, 1),(0, None, None, 1),)
                        vehicleObject.AmpResistanceModifiers = ((0, None, None, 1),(0, None, None, 1),)
            
            return True
        
        #Do not allow the player to enter the game if they do not have the level cap set correctly
        def DisplayDlcLevelCapInUninstalledDlc_Clicked(caller: UObject, function: UFunction, params: FStruct) -> bool:
            params.Dlg.Close()
            return False
        
        #Stops the popups from appearing when you first open your inventory
        def extSetCurrentScreen(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.DLCPopupOption.CurrentValue == False:
                
                NewCurrentScreen = caller.GetScreenByName(params.ScreenName)
                if NewCurrentScreen == caller.CurrentScreen:
                    if caller.CurrentScreen == 3:
                        return False
                if caller.bHasScreenToCleanup:
                    caller.CleanupScreen(caller.CurrentScreen)
                caller.bHasScreenToCleanup = True
                caller.CurrentScreen = NewCurrentScreen
                caller.CurrentScreenTime = 0.0
                caller.UpdateDesiredCameraPosition()
                if params.ScreenName == "inventory":
                    caller.SetupInventoryScreen()
                elif params.ScreenName == "challenges":
                    caller.SetupChallengesScreen()
                elif params.ScreenName == "missionlog":
                    caller.extSetupMissionLogScreen()
                elif params.ScreenName == "skills":
                    caller.SetupSkillTree()
                else:
                    caller.SetVariableString("header.lb.text", "$<StringAliasMap:Tab_Left>")
                    caller.SetVariableString("header.rb.text", "$<StringAliasMap:Tab_Right>")
                    caller.TryDisplayRewardPanel()
                
                return False
            
            else:
                return True

        #Stops the popup for golden keys from appearing when you create a new character
        def CheckNotifyNewGoldenKeys(caller: UObject, function: UFunction, params: FStruct) -> bool:
            return self.goldenKeyPopupOption.CurrentValue

        #For ignoring bank capacity
        def Swap(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if caller.GetMaxSize() > 4 and self.unlimitedBankOption.CurrentValue == True:
                self.blockSwap = True
            return True
        
        #For ignoring bank capacity
        def GetInternal(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.blockSwap == True and self.unlimitedBankOption.CurrentValue == True:
                self.blockSwap = False
                return False
            else:
                return True
            
        '''
        def TalkStarted(caller: UObject, function: UFunction, params: FStruct) -> bool:
            
            return False
        '''
            
        '''
        def TalkFinished(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"say ran TalkFinished")
            return True
        '''
        '''
        def Activate(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"say ran Activate")
            return False
        ''' 
        '''
        def RegisterTalker(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"say ran RegisterTalker")
            return True
        '''
        '''
        def PlayEchoDialog(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            PC.ServerRCon(f"say ran PlayEchoDialog")
            return True
        '''
        #For checking for conflicts
        def LaunchSaveGameEx(caller: UObject, function: UFunction, params: FStruct) -> bool:
            for mod in Mods:
                if mod.Name in self.conflictingModNames and mod.IsEnabled == True and self.checkForModConflicts == True:
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"say {self.modConflictText}")
                    return False
            if unrealsdk.FindObject("SkillDefinition", "GD_Weap_AssaultRifle.Skills.Skill_EvilSmasher_SMASH").TrackedSkillHUDSlot == 10 and self.checkForUCP == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"say {self.modConflictText}")
                return False

            if self.hasRestarted == False:
                PC = GetEngine().GamePlayers[0].Actor
                PC.GFxUIManager.ShowTrainingDialog(self.PleaseRestartPopup[1], self.PleaseRestartPopup[0], self.PleaseRestartPopup[2])
                return False
            return True
            
        def LaunchNewGame(caller: UObject, function: UFunction, params: FStruct) -> bool:
            for mod in Mods:
                if mod.Name in self.conflictingModNames and mod.IsEnabled == True and self.checkForModConflicts == True:
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"say {self.modConflictText}")
                    return False
            if unrealsdk.FindObject("SkillDefinition", "GD_Weap_AssaultRifle.Skills.Skill_EvilSmasher_SMASH").TrackedSkillHUDSlot == 10 and self.checkForUCP == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"say {self.modConflictText}")
                return False

            if self.hasRestarted == False:
                PC = GetEngine().GamePlayers[0].Actor
                PC.GFxUIManager.ShowTrainingDialog(self.PleaseRestartPopup[1], self.PleaseRestartPopup[0], self.PleaseRestartPopup[2])
                return False
            return True
        
        #For making the levers in digistruct peak free
        def ApplyBehaviorToContext(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True and self.digipeakChestOption.CurrentValue == True:
                PC = GetEngine().GamePlayers[0].Actor
                mapname=PC.WorldInfo.GetMapName()
                
                if mapname == "TestingZone_P":
                    caller.CostAmount = 0
            return True
            
        #For resetting auto checking objects
        def CommitMapChange(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True:
                if len(self.autoCheckingObjectsList) > 0:
                    for object in self.autoCheckingObjectsList:
                        object.resetSuccessList()
            return True
        
        def ApplyBehaviorToContext2(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if IsHost() == True:
                pickupList = unrealsdk.FindAll("WillowPickup")
                self.numItemsOnGround = len(pickupList)
                globalsObject = unrealsdk.FindObject("GlobalsDefinition", "GD_Globals.General.Globals")
                if self.raidCrashPreventionOption.CurrentValue == True:
                    for pickup in pickupList:
                        if pickup.bIsMissionItem == False:
                            if self.numItemsOnGround >= self.warnShortlived and self.hasShownShortlivedWarning == False:
                                ShowHUDMessage("Warning!", "Ground money, ammo and whites will be destroyed if more items are dropped")
                                self.hasShownShortlivedWarning = True
                            elif self.numItemsOnGround < self.warnShortlived:
                                self.hasShownShortlivedWarning = False
                                
                            if self.numItemsOnGround >= self.warnLonglived and self.hasShownLonglivedWarning == False:
                                ShowHUDMessage("Warning!", "Ground seraph crystals, eridium and greens will be destroyed if more items are dropped")
                                self.hasShownLonglivedWarning = True
                            elif self.numItemsOnGround < self.warnLonglived:
                                self.hasShownLonglivedWarning = False
                                
                            if self.numItemsOnGround >= self.deleteShortlived:
                                if pickup.LifeSpanType == globalsObject.RarityLevelColors[0].DropLifeSpanType:
                                    pickup.LifeSpan = 1
                                    
                            if self.numItemsOnGround >= self.deleteLonglived:
                                if pickup.LifeSpanType == globalsObject.RarityLevelColors[3].DropLifeSpanType:
                                    pickup.LifeSpan = 1
                
                UpdateCustomWeights()
            return True
                        
        def HandleRewardInputKey(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            if (params.ukey == PC.PlayerInput.GetKeyForAction("UseSecondary", True) and PC.PlayerInput.bUsingGamepad == False) or (params.ukey == 'XboxTypeS_Y' and PC.PlayerInput.bUsingGamepad == True):
                if params.uevent == 0:
                    playthrough = PC.GetCurrentPlaythrough()
                    PlayerRepInfo = PC.PlayerReplicationInfo
                    hasEnoughEridium = False
                    eridiumCost = 0
                    if playthrough == 0:
                        eridiumCost = self.eridiumCostToRerollMissionRewardsNVHM
                    elif playthrough == 1:
                        eridiumCost = self.eridiumCostToRerollMissionRewardsTVHM
                    else:
                        eridiumCost = self.eridiumCostToRerollMissionRewardsUVHM
                    currentEridium = PlayerRepInfo.GetCurrencyOnHand(1)
                    if currentEridium >= eridiumCost:
                        PlayerRepInfo.AddCurrencyOnHand(1, (eridiumCost * -1))
                        self.blockRewards = True
                        rewardObject = caller.RewardObject
                        PC.ServerGrantMissionRewards(rewardObject.RewardData.Mission, rewardObject.RewardData.bGrantAltReward)
            return True

        def SetTooltips(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            
            #Tutorial popup
            if self.hiddenMissionRerollHasPoppedUpOption.CurrentValue == False and self.popupDisablingOption.CurrentValue != "Disabled":
                PC.GFxUIManager.ShowTrainingDialog(self.MissionRewardPopup[1], self.MissionRewardPopup[0], self.MissionRewardPopup[2])
                self.hiddenMissionRerollHasPoppedUpOption.CurrentValue = True
                SaveModSettings(self)
            
            PlayerRepInfo = PC.PlayerReplicationInfo
            playthrough = PC.GetCurrentPlaythrough()
            eridiumCost = 0
            if playthrough == 0:
                eridiumCost = self.eridiumCostToRerollMissionRewardsNVHM
            elif playthrough == 1:
                eridiumCost = self.eridiumCostToRerollMissionRewardsTVHM
            else:
                eridiumCost = self.eridiumCostToRerollMissionRewardsUVHM
            key = "ERROR FINDING KEY"
            if PC.PlayerInput.bUsingGamepad == False:
                secondaryUse = PC.PlayerInput.GetKeyForAction("UseSecondary", True)
                key = f"[{secondaryUse}]"
            else:
                key = "(Y)"
                
            inspectKey = "ERROR FINDING KEY"
            if PC.PlayerInput.bUsingGamepad == False: 
                inspectKey = "[F]"
            else:
                inspectKey = "(R)"
                
            acceptKey = "ERROR FINDING KEY"
            if PC.PlayerInput.bUsingGamepad == False: 
                acceptKey = "[Enter]"
            else:
                acceptKey = "(A)"
                
            caller.GetObject("tooltips").SetString("htmlText", f"{acceptKey} Accept   {inspectKey} Inspect\n{key} Reroll ({eridiumCost}{self.eridiumCharacter}/{PlayerRepInfo.GetCurrencyOnHand(1)}{self.eridiumCharacter})")
            return False

        def AddCurrencyOnHand(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.blockRewards == True:
                return False
            else:
                return True
        
        def ExpEarn(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.blockRewards == True:
                self.blockRewards = False
                return False
            else:
                return True
        
        def ClientIncrementOverpowerLevel(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            OPLevel = GetOPLevel(PC)
            
            if self.OPLevelOption.CurrentValue == "OP8":
                if OPLevel >= 8:
                    self.blockingOPCap = True

            else:
                self.blockingOPCap = False
            
            if OPLevel >= 8 and self.OPLevelOption.CurrentValue == "OP8":
                ShowHUDMessage(caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailableTitle", "WillowMenu"), caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailable", "WillowMenu"))
                return False
            
            elif OPLevel == PC.PlayerReplicationInfo.NumOverpowerLevelsUnlocked:
                caller.ClientIncrementOverpowerLevel(params.IncrementAmount, params.MaximumValue)
                return False
                
            else:
                return True
        
        def ServerIncrementOverpowerLevel(caller: UObject, function: UFunction, params: FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            OPLevel = GetOPLevel(PC)
            
            if self.OPLevelOption.CurrentValue == "OP8":
                if OPLevel >= 8:
                    self.blockingOPCap = True

            else:
                self.blockingOPCap = False
            
            if OPLevel >= 8 and self.OPLevelOption.CurrentValue == "OP8":
                ShowHUDMessage(caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailableTitle", "WillowMenu"), caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailable", "WillowMenu"))
                return False
            
            elif OPLevel == PC.PlayerReplicationInfo.NumOverpowerLevelsUnlocked:
                caller.ServerIncrementOverpowerLevel(params.IncrementAmount, params.MaximumValue)
                return False
                
            else:
                return True
        
        def DisplayTrainingMessage(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.blockingOPCap == True:
                self.blockingOPCap = False
                ShowHUDMessage(caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailableTitle", "WillowMenu"), caller.Localize("OverpowerUnlock", "NoMoreUnlocksAvailable", "WillowMenu"))
                return False
            else:
                return True
        
        def HandleNetworkOptionsButtonClickEx(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if params.Index == 2:
                return False
            else:
                return True

        #For altering the dlc advertisements
        def ShowMOTD(caller: UObject, function: UFunction, params: FStruct) -> bool:
            if self.adOption.CurrentValue == "BL2Fix":
                if caller.MyFrontendDefinition != None:
                    random.seed(datetime.datetime.now())
                    index = random.randint(0, len(self.MOTDData) - 1)
                    caller.SetVariableString(caller.MyFrontendDefinition.MOTD_HeaderPath, self.MOTDData[index][0])
                    caller.SetVariableString(caller.MyFrontendDefinition.MOTD_BodyPath, self.MOTDData[index][1])
                    caller.SingleArgInvokeS("menu.inner.messageOfTheDay.gotoAndPlay", "go")
                    caller.SetTimer(self.MOTDData[index][2], False, 'HideMOTD')
            elif self.adOption.CurrentValue == "Gearbox":
                return True
            return False

        #STOLEN FROM NOADS
        def CanAcessOakUpsell(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            return False

        #For skipping dialog on controller
        def DuckPressed(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            if caller.bUsingGamepad == True and self.crouchSkipOption.CurrentValue == True:
                componentList = unrealsdk.FindAll("GearboxDialogComponent")
                for component in componentList:
                    component.StopTalking()
            return True

        #For stopping the player from joining a friend's game
        def JoinGame(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            for mod in Mods:
                if mod.Name in self.conflictingModNames and mod.IsEnabled == True and self.checkForModConflicts == True:
                    PC = GetEngine().GamePlayers[0].Actor
                    PC.ServerRCon(f"say {self.modConflictText}")
                    return False
            if unrealsdk.FindObject("SkillDefinition", "GD_Weap_AssaultRifle.Skills.Skill_EvilSmasher_SMASH").TrackedSkillHUDSlot == 10 and self.checkForUCP == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.ServerRCon(f"say {self.modConflictText}")
                return False
                
            if self.hasRestarted == False:
                PC = GetEngine().GamePlayers[0].Actor
                PC.GFxUIManager.ShowTrainingDialog(self.PleaseRestartPopup[1], self.PleaseRestartPopup[0], self.PleaseRestartPopup[2])
                return False
            return True
            
        #For adding a UI component to vending machines
        def SetTooltips2(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            if caller.VM.GetShopType() == 1 and ((caller.CurrentSelectionItem == None and caller.bOnItemOfTheDay) or (caller.IsCurrentSelectionSell() == False and caller.IsCurrentSelectionBuyBack() == False)):
                PC = GetEngine().GamePlayers[0].Actor
                key = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    secondaryUse = PC.PlayerInput.GetKeyForAction("UseSecondary", True)
                    key = f"[{secondaryUse}]"
                else:
                    key = "(Y)"
                    
                purchaseKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    purchaseKey = "[Enter]"
                else:
                    purchaseKey = "(A)"
                
                trashKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    trashKey = "[Delete]"
                else:
                    trashKey = "(L)"
                
                compareKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    compareKey = "[E]"
                else:
                    compareKey = "(X)"
                    
                sortKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    sortKey = "[Page Up]/[Page Down]"
                else:
                    sortKey = "(LT)/(RT)"
                
                inspectKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    inspectKey = "[F]"
                else:
                    inspectKey = "(R)"
                    
                cancelKey = "ERROR FINDING KEY"
                if PC.PlayerInput.bUsingGamepad == False:
                    cancelKey = "[Escape]"
                else:
                    cancelKey = "(B)"
                    
                caller.TwoPanelInterface.SetTooltipText(f"{purchaseKey} Purchase   {trashKey} Sell Trash   {key} Fill Ammo   {compareKey} Compare   {sortKey} Sort   {inspectKey} Inspect   {cancelKey} Cancel")
                
                #Popup
                if self.hiddenVendorHasPoppedUpOption.CurrentValue == False and self.popupDisablingOption.CurrentValue != "Disabled":
                    PC.GFxUIManager.ShowTrainingDialog(self.AmmoVendorPopup[1], self.AmmoVendorPopup[0], self.AmmoVendorPopup[2])
                    self.hiddenVendorHasPoppedUpOption.CurrentValue = True
                    SaveModSettings(self)
                
                return False
            else:
                if caller.VM.GetShopType() == 3 and self.hiddenEarlHasPoppedUpOption.CurrentValue == False and self.popupDisablingOption.CurrentValue != "Disabled":
                    PC = GetEngine().GamePlayers[0].Actor
                    #PC.GFxUIManager.ShowTrainingDialog(self.EarlPopup[1], self.EarlPopup[0], self.EarlPopup[2])
                    self.hiddenEarlHasPoppedUpOption.CurrentValue = True
                    SaveModSettings(self)
                return True
                
        #For filling the player's ammo
        def MainInputKey(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            PlayerRepInfo = PC.PlayerReplicationInfo
            startingMoney = PlayerRepInfo.GetCurrencyOnHand(0)
            def FillAmmoType(item) -> int:
                returnValue = -1
                price = caller.VM.GetSellingPriceForInventory(item, PC, 1)
                i = 0
                while i < 100:
                    if PlayerRepInfo.GetCurrencyOnHand(0) >= price:
                        caller.VM.PlayerBuyItem(item, PC, 1, False)
                        returnValue = 2
                        i += 1
                    else:
                        returnValue = 1
                        i = 100 #break
                
                if startingMoney == PlayerRepInfo.GetCurrencyOnHand(0) and returnValue != 1:
                    returnValue = 0
                
                return returnValue
                                    
            if ((params.ukey == PC.PlayerInput.GetKeyForAction("UseSecondary", True) and PC.PlayerInput.bUsingGamepad == False) or (params.ukey == 'XboxTypeS_Y' and PC.PlayerInput.bUsingGamepad == True)) and params.uevent == 0 and caller.VM.GetShopType() == 1 and ((caller.CurrentSelectionItem == None and caller.bOnItemOfTheDay) or (caller.IsCurrentSelectionSell() == False and caller.IsCurrentSelectionBuyBack() == False)):
                alertValue = -1
                for item in unrealsdk.FindAll("WillowUsableItem"):
                    if item.Owner == caller.VM:
                        temp = FillAmmoType(item)
                        if temp > alertValue:
                            alertValue = temp
                        if temp == -1:
                            unrealsdk.Log("Error filling ammo")
                            
                if alertValue == 0:
                    caller.PlayFeedback_CannotCarryOrUse()
                elif alertValue == 1:
                    caller.PlayFeedback_CannotAfford()
                elif alertValue == 2:
                    caller.PlayUISound('Buy')
                    caller.Feedback.TriggerPurchased()
                elif alertValue == -1:
                    unrealsdk.Log("Error filling ammo")
                
                return False
            else:
                return True
        
        def LaunchSaveGame(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            savedGame = caller.WPCOwner.GetCachedSaveGame()
            if savedGame.ExpPoints > caller.WPCOwner.GetExpPointsRequiredForLevel(caller.WPCOwner.GetMaxExpLevel()):
                PC.GFxUIManager.ShowTrainingDialog(self.UnderlevelPopup[1], self.UnderlevelPopup[0], self.UnderlevelPopup[2])
                return False
            return True
        
        def extInitMainPanel(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            if self.hiddenBankHasPoppedUpOption.CurrentValue == False and self.popupDisablingOption.CurrentValue != "Disabled" and self.unlimitedBankOption.CurrentValue == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.GFxUIManager.ShowTrainingDialog(self.BankPopup[1], self.BankPopup[0], self.BankPopup[2])
                self.hiddenBankHasPoppedUpOption.CurrentValue = True
                SaveModSettings(self)
            return True
        
        def OnPop(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            if self.notifyRestart == True:
                PC = GetEngine().GamePlayers[0].Actor
                PC.GFxUIManager.ShowTrainingDialog(self.PleaseRestartPopup[1], self.PleaseRestartPopup[0], self.PleaseRestartPopup[2])
                self.notifyRestart = False
            return True
        
        #For showing the dialog skip popup
        def DisplayHUD(caller: unrealsdk.UObject, function: unrealsdk.UFunction, params: unrealsdk.FStruct) -> bool:
            PC = GetEngine().GamePlayers[0].Actor
            mapname=PC.WorldInfo.GetMapName()
            if IsHost() == True:
                if self.hiddenDialogSkipHasPoppedUpOption.CurrentValue == False and self.HUDHookRuns == 3 and mapname != "Glacial_P" and self.popupDisablingOption.CurrentValue != "Disabled":
                    PC.GFxUIManager.ShowTrainingDialog(self.DialogSkipPopup[1], self.DialogSkipPopup[0], self.DialogSkipPopup[2])
                    self.hiddenDialogSkipHasPoppedUpOption.CurrentValue = True
                    SaveModSettings(self)
                
                elif self.hiddenDialogSkipHasPoppedUpOption.CurrentValue == False and self.HUDHookRuns == 5 and mapname == "Glacial_P" and self.popupDisablingOption.CurrentValue != "Disabled":
                    PC.GFxUIManager.ShowTrainingDialog(self.DialogSkipPopup[1], self.DialogSkipPopup[0], self.DialogSkipPopup[2])
                    self.hiddenDialogSkipHasPoppedUpOption.CurrentValue = True
                    SaveModSettings(self)

                self.HUDHookRuns += 1
                
            return True
        
        RegisterHook("WillowGame.WillowHUD.CreateWeaponScopeMovie", "HookCreateWeaponScopeMovie", HookCreateWeaponScopeMovie)
        RegisterHook("WillowGame.WillowGameMessage.ClientReceive", "HookClientReceive", HookClientReceive)
        RegisterHook("WillowGame.WillowPlayerPawn.ResurrectPlayer", "RessurectPlayer", RessurectPlayer)
        RegisterHook("Engine.WillowInventory.ConsumeItem", "ConsumeItem", ConsumeItem)
        RegisterHook("WillowGame.WillowHUD.TryFakePauseInSinglePlayer", "TryFakePauseInSinglePlayer", TryFakePauseInSinglePlayer)
        RegisterHook("WillowGame.WillowPlayerController.ShowStatusMenu", "ShowStatusMenu", ShowStatusMenu)
        RegisterHook("WillowGame.WillowVendingMachine.GenerateInventory", "GenerateInventory", GenerateInventory)
        RegisterHook("WillowGame.WillowVehicle.DriverEnter", "DriverEnter", DriverEnter)
        RegisterHook("WillowGame.FrontendGFxMovie.DisplayDlcLevelCapInUninstalledDlc_Clicked", "DisplayDlcLevelCapInUninstalledDlc_Clicked", DisplayDlcLevelCapInUninstalledDlc_Clicked)
        RegisterHook("WillowGame.StatusMenuExGFxMovie.extSetCurrentScreen", "extSetCurrentScreen", extSetCurrentScreen)
        RegisterHook("WillowGame.WillowPlayerController.CheckNotifyNewGoldenKeys", "CheckNotifyNewGoldenKeys", CheckNotifyNewGoldenKeys)
        RegisterHook("WillowGame.WillowInventoryStorage.Swap", "Swap", Swap)
        RegisterHook("WillowGame.WillowInventoryStorage.GetInternal", "GetInternal", GetInternal)
        RegisterHook("WillowGame.FrontendGFxMovie.LaunchSaveGameEx", "LaunchSaveGameEx", LaunchSaveGameEx)
        RegisterHook("WillowGame.FrontendGFxMovie.LaunchNewGame", "LaunchNewGame", LaunchNewGame)
        RegisterHook("WillowGame.Behavior_SetUsabilityCost.ApplyBehaviorToContext", "ApplyBehaviorToContext", ApplyBehaviorToContext)
        RegisterHook("Engine.WorldInfo.CommitMapChange", "CommitMapChange", CommitMapChange)
        RegisterHook("WillowGame.Behavior_SpawnItems.ApplyBehaviorToContext", "ApplyBehaviorToContext2", ApplyBehaviorToContext2)
        RegisterHook("WillowGame.QuestAcceptGFxMovie.HandleRewardInputKey", "HandleRewardInputKey", HandleRewardInputKey)
        RegisterHook("WillowGame.MissionRewardGFxObject.SetTooltips", "SetTooltips", SetTooltips)
        RegisterHook("WillowGame.WillowPlayerReplicationInfo.AddCurrencyOnHand", "AddCurrencyOnHand", AddCurrencyOnHand)
        RegisterHook("WillowGame.WillowPlayerController.ExpEarn", "ExpEarn", ExpEarn)
        RegisterHook("WillowGame.WillowPlayerController.ClientIncrementOverpowerLevel", "ClientIncrementOverpowerLevel", ClientIncrementOverpowerLevel)
        RegisterHook("WillowGame.WillowPlayerController.ServerIncrementOverpowerLevel", "ServerIncrementOverpowerLevel", ServerIncrementOverpowerLevel)
        RegisterHook("WillowGame.WillowPlayerController.DisplayTrainingMessage", "DisplayTrainingMessage", DisplayTrainingMessage)
        RegisterHook("WillowGame.FrontendGFxMovie.HandleNetworkOptionsButtonClickEx", "HandleNetworkOptionsButtonClickEx", HandleNetworkOptionsButtonClickEx)
        RegisterHook("WillowGame.FrontendGFxMovie.ShowMOTD", "ShowMOTD", ShowMOTD)
        RegisterHook("WillowGame.WillowPlayerController.CanAcessOakUpsell", "CanAcessOakUpsell", CanAcessOakUpsell)
        RegisterHook("WillowGame.WillowPlayerInput.DuckPressed", "DuckPressed", DuckPressed)
        RegisterHook("WillowGame.FrontEndPlayerListGFxObject.JoinGame", "JoinGame", JoinGame)
        RegisterHook("WillowGame.VendingMachineExGFxMovie.SetTooltips", "SetTooltips2", SetTooltips2)
        RegisterHook("WillowGame.VendingMachineExGFxMovie.MainInputKey", "MainInputKey", MainInputKey)
        RegisterHook("WillowGame.FrontendGFxMovie.LaunchSaveGame", "LaunchSaveGame", LaunchSaveGame)
        RegisterHook("WillowGame.BankGFxMovie.extInitMainPanel", "extInitMainPanel", extInitMainPanel)
        RegisterHook("WillowGame.WillowScrollingListDataProviderOptionsBase.OnPop", "OnPop", OnPop)
        RegisterHook("WillowGame.WillowPlayerController.DisplayHUD", "DisplayHUD", DisplayHUD)
    
    def GameInputPressed(self,  input):
        if input.Name == "Skip current dialog":
            componentList = unrealsdk.FindAll("GearboxDialogComponent")
            for component in componentList:
                component.StopTalking()
  
    def ModOptionChanged(self, option, newValue):
        def HandleStarterEquipment(weaponStatus, grenadeStatus):
            PC = GetEngine().GamePlayers[0].Actor
            #Weapons
            if weaponStatus == True:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_PremierClub UnlockItems ((GameStage=1,UnlockItems=(InventoryBalanceDefinition'GD_Artifacts.A_Item_Unique.A_VaultHunter',WeaponBalanceDefinition'GD_Weap_AssaultRifle.A_Weapons_Unique.AR_Dahl_1_GBX',WeaponBalanceDefinition'GD_Weap_SMG.A_Weapons_Unique.SMG_Gearbox_1',WeaponBalanceDefinition'GD_Weap_SniperRifles.A_Weapons_Unique.Sniper_Gearbox_1'),UnlockItemPools=))")
            else:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_PremierClub UnlockItems ()")
                    
            #Grenade
            if grenadeStatus == True:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_Collectors UnlockItems ((GameStage=1,UnlockItems=(InventoryBalanceDefinition'GD_GrenadeMods.A_Item_Custom.GM_SkyRocket'),UnlockItemPools=(KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.DigitalEdHeads',KeyedItemPoolDefinition'GD_CustomItemPools_MainGame.Rewards.DigitalEdSkins')))")
            else:
                PC.ServerRCon(f"set GD_Globals.Unlocks.MarketingUnlock_Collectors UnlockItems ()")
                
        #Travel delay slider
        if option.Caption == "Multiplayer travel delay":
            PC = GetEngine().GamePlayers[0].Actor
            value = newValue + 1
            PC.ServerRCon(f"set globals traveldelay {value}")
        '''
        #Autopause
        elif option.Caption == "Menu pause":
            self.autopause = newValue
        
        #Menu any time
        elif option.Caption == "Menu in air":
            self.menuAnyTime = newValue
        
        #Starter popups
        elif option.Caption == "DLC Pop-Ups":
            self.DLCPopups = newValue
        '''
        #Starter weapons
        if option.Caption == "Starting Gear":
            if newValue == "All":
                HandleStarterEquipment(True, True)
            elif newValue == "None":
                HandleStarterEquipment(False, False)
            elif newValue == "Special Edition":
                HandleStarterEquipment(False, True)
            elif newValue == "Premiere Club":
                HandleStarterEquipment(True, False)
                    
        #Money-coloured eridium
        elif option.Caption == "Currency Beam Colour":
            globalsObject = unrealsdk.FindObject("GlobalsDefinition", "GD_Globals.General.Globals")
            if newValue == "Yellow":
                globalsObject.RarityLevelColors[15].Color.R = globalsObject.RarityLevelColors[11].Color.R
                globalsObject.RarityLevelColors[15].Color.G = globalsObject.RarityLevelColors[11].Color.G
                globalsObject.RarityLevelColors[15].Color.B = globalsObject.RarityLevelColors[11].Color.B
                if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                
                if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 0
                    seraphCrystalObject.LootBeamColorOverride.G = 0
                    seraphCrystalObject.LootBeamColorOverride.R = 0
                    seraphCrystalObject.LootBeamColorOverride.A = 0
            else:
                globalsObject.RarityLevelColors[15].Color.R = 145
                globalsObject.RarityLevelColors[15].Color.G = 50
                globalsObject.RarityLevelColors[15].Color.B = 200
                if unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Aster_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                
                if unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Iris_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Orchid_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                    
                if unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal"):
                    seraphCrystalObject = unrealsdk.FindObject("UsableItemDefinition","GD_Sage_SeraphCrystal.UsableItems.Pickup_SeraphCrystal")
                    seraphCrystalObject.LootBeamColorOverride.B = 184
                    seraphCrystalObject.LootBeamColorOverride.G = 154
                    seraphCrystalObject.LootBeamColorOverride.R = 255
                    seraphCrystalObject.LootBeamColorOverride.A = 255
                
        #Preferred vehicles
        elif option.Caption == "Preferred technical":
            catapultObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_CatapultTechnical")
            sawbladeObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_SawBladeTechnical")
            if newValue == "Catapult":
                catapultObject.PreferredOrdering = 0
                sawbladeObject.PreferredOrdering = 3
            elif newValue == "Sawblade":
                catapultObject.PreferredOrdering = 3
                sawbladeObject.PreferredOrdering = 0
        elif option.Caption == "Preferred runner":
            MGObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_MGRunner")
            rocketObject = unrealsdk.FindObject("VSSUIDefinition","GD_Globals.VehicleSpawnStation.VSSUI_RocketRunner")
            if newValue == "Rocket":
                MGObject.PreferredOrdering = 6
                rocketObject.PreferredOrdering = 5
            elif newValue == "MG":
                MGObject.PreferredOrdering = 5
                rocketObject.PreferredOrdering = 6
        '''
        #Axton's turret deploy speed
        elif option.Caption == "Turret Throw Speed":
            if newValue == "Grenade":
                self.shortenTurretDeploy = True
            else:
                self.shortenTurretDeploy = False
        '''
        '''
        #Level cap
        if option.Caption == "Max OP Level":
            if newValue == "OP8":
                self.loweringOPCap = True
            else:
                self.loweringOPCap = False
        '''
        #Cutscene disabler STOLEN FROM FromDarkHell's CUTSCENE DISABLER
        if option.Caption == "Cutscenes":
            PC = GetEngine().GamePlayers[0].Actor
            mapname=PC.WorldInfo.GetMapName()
            if newValue == "Combat Only":
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        if cutscene.combatRelevant == True:
                            cutscene.turnOn()
                        else:
                            cutscene.turnOff()
                            
            elif newValue == "None":
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        cutscene.turnOff()
                        
            else:
                for cutscene in self.cutsceneDisablerList:
                    if cutscene.mapname == mapname:
                        cutscene.turnOn()

        #Audio fix SORTA STOLEN FROM UCP
        if option.Caption == "Fix Audio":
            PC = GetEngine().GamePlayers[0].Actor
            #THIS IS FILLER
        '''
        #Golden key popup
        if option.Caption == "Golden Key Pop-Ups":
            self.keyPopup = newValue
        '''
        if option.Caption == "Eridium Auto-Pickup":
            if newValue == "Always":
                eridiumBarObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumBar")
                eridiumStickObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumStick")
                
                eridiumBarObject.bAutomaticallyPickup = True
                eridiumStickObject.bAutomaticallyPickup = True
            elif newValue == "Never":
                eridiumBarObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumBar")
                eridiumStickObject = unrealsdk.FindObject("UsableItemDefinition","GD_Currency.A_Item.EridiumStick")
                
                eridiumBarObject.bAutomaticallyPickup = False
                eridiumStickObject.bAutomaticallyPickup = False

        if option in self.mustRestartOptionsList:
            self.notifyRestart = True
            self.hasRestarted = False
        
    def Disable(self) -> None:
        RemoveHook("WillowGame.WillowHUD.CreateWeaponScopeMovie", "HookCreateWeaponScopeMovie")
        RemoveHook("WillowGame.WillowGameMessage.ClientReceive", "HookClientReceive")
        RemoveHook("WillowGame.WillowPlayerPawn.ResurrectPlayer", "RessurectPlayer")
        RemoveHook("Engine.WillowInventory.ConsumeItem", "ConsumeItem")
        RemoveHook("WillowGame.WillowHUD.TryFakePauseInSinglePlayer", "TryFakePauseInSinglePlayer")
        RemoveHook("WillowGame.WillowPlayerController.ShowStatusMenu", "ShowStatusMenu")
        RemoveHook("WillowGame.WillowVendingMachine.GenerateInventory", "GenerateInventory")
        RemoveHook("WillowGame.WillowVehicle.DriverEnter", "DriverEnter")
        RemoveHook("WillowGame.FrontendGFXMovie.DisplayDlcLevelCapInUninstalledDlc_Clicked", "DisplayDlcLevelCapInUninstalledDlc_Clicked")
        RemoveHook("WillowGame.StatusMenuExGFxMovie.extSetCurrentScreen", "extSetCurrentScreen")
        RemoveHook("WillowGame.WillowPlayerController.CheckNotifyNewGoldenKeys", "CheckNotifyNewGoldenKeys")
        RemoveHook("WillowGame.WillowInventoryStorage.Swap", "Swap")
        RemoveHook("WillowGame.WillowInventoryStorage.GetInternal", "GetInternal")
        RemoveHook("WillowGame.FrontendGFxMovie.LaunchSaveGameEx", "LaunchSaveGameEx")
        RemoveHook("WillowGame.FrontendGFxMovie.LaunchNewGame", "LaunchNewGame")
        RemoveHook("WillowGame.Behavior_SetUsabilityCost.ApplyBehaviorToContext", "ApplyBehaviorToContext")
        RemoveHook("Engine.WorldInfo.CommitMapChange", "CommitMapChange")
        RemoveHook("WillowGame.Behavior_SpawnItems.ApplyBehaviorToContext", "ApplyBehaviorToContext")
        RemoveHook("WillowGame.QuestAcceptGFxMovie.HandleRewardInputKey", "HandleRewardInputKey")
        RemoveHook("WillowGame.MissionRewardGFxObject.SetTooltips", "SetTooltips")
        RemoveHook("WillowGame.WillowPlayerReplicationInfo.AddCurrencyOnHand", "AddCurrencyOnHand")
        RemoveHook("WillowGame.WillowPlayerController.ExpEarn", "ExpEarn")
        RemoveHook("WillowGame.WillowPlayerController.ClientIncrementOverpowerLevel", "ClientIncrementOverpowerLevel")
        RemoveHook("WillowGame.WillowPlayerController.ServerIncrementOverpowerLevel", "ServerIncrementOverpowerLevel")
        RemoveHook("WillowGame.WillowPlayerController.DisplayTrainingMessage", "DisplayTrainingMessage")
        RemoveHook("WillowGame.FrontendGFxMovie.HandleNetworkOptionsButtonClickEx", "HandleNetworkOptionsButtonClickEx")
        RemoveHook("WillowGame.FrontendGFxMovie.ShowMOTD", "ShowMOTD")
        RemoveHook("WillowGame.WillowPlayerController.CanAcessOakUpsell", "CanAcessOakUpsell")
        RemoveHook("WillowGame.WillowPlayerInput.DuckPressed", "DuckPressed")
        RemoveHook("WillowGame.FrontEndPlayerListGFxObject.JoinGame", "JoinGame")
        RemoveHook("WillowGame.VendingMachineExGFxMovie.SetTooltips", "SetTooltips2")
        RemoveHook("WillowGame.VendingMachineExGFxMovie.MainInputKey", "MainInputKey")

RegisterMod(DropRateMod())